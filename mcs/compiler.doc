Compiler operations

The compiler has a number of phases:

* Parsing

	Initially the compiler parses all the source files and keeps a
	parsed representation in memory. Also syntax error checking
	is performed at this point.

	The compiler stores the information in classes whose names
	represent the language construct, for example, the "if"
	construct is stored in an `If' class.  A class is stored in a
	`Class'.
	
* Type creation

	Once the parsing has happened, compiled types are created. What
	is actually created is only a type skeleton including name,
	correct nesting, type parameters definitions. Types are created
	before any referenced types are loaded to ensure that locally
	defined type is used when an external assembly references a type
	with same name as compiled type.

* References loading

	As a next step referenced assemblies and modules are loaded and
	their top-level types are imported and cached. We import only
	C# valid top level types at this point all other members are
	imported on demand when needed.
	
* Namespaces definition

	Before any type resolution can be done we define all compiled
	namespaces. This is mainly done to prepare using clauses of each
	namespace block before any type resolution takes a place.
	
* Types definition

	The first step of type definition is to resolve base class or
	base interfaces to correctly setup type hierarchy before any
	member is defined.
	
	At this point we do some error checking and verify that the
	members inheritance is correct and some other members
	oriented checks.

	By the time we are done, all classes, structs and interfaces
	have been defined and all their members have been defined as
	well.

* Emit aka Code Generation

	At this stage the CIL code is generated together with other
	metadata including attributes, constants, type parameter constraints.
	Before any method body code is generated its body is first
	resolved and check for errors including flow analysis.

* Statements

	Most of the statements are handled in the statement.cs file.

* Expressions

* MemberCache

	MemberCache is one of core compiler components. It maintains information
	about types and their members. It tries to be as fast as possible
	because almost all resolve operations end up querying members info in
	some way.
	
	MemberCache is not definition but specification oriented to maintain
	differences between inflated versions of generic types. This makes usage
	of MemberCache simple because consumer does not need to care how to inflate
	current member and returned type information will always give correctly
	inflated type. However setting MemberCache up is one of the most complicated
	parts of the compiler due to possible dependencies when types are defined
	and complexity of nested types.
	
* Debugger support

	Compiler produces .mdb symbol file for better debugging experience. The
	process is quite straightforward. For every statement or a block there
	is an entry in symbol file. Each entry includes of start location of
	the statement and it's starting IL offset in the method. For most statements
	this is easy but few need special handling (e.g. do, while).
	
	When sequence point is needed to represent original location and no IL
	entry is written for the line we emit `nop' instruction. This is done only
	for very few constructs (e.g. block opening brace).
	
	Captured variables are not treated differently at the moment. Debugger has
	internal knowledge of their mangled names and how to decode them.
	
* IKVM.Reflection vs System.Reflection

	Mono compiler can be compiled using different reflection backends. At the
	moment we support System.Reflection and IKVM.Reflection they both use same
	API as official System.Reflection.Emit API which allows us to maintain only
	single version of compiler with few using aliases to specialise.
	
	The backends are not plug-able but require compiler to be compiled with
	specific STATIC define when targeting IKVM.Reflection.
	
	IKVM.Reflection is used for static compilation. This means the compiler runs
	in batch mode like most compilers do. It can target any runtime version and
	use any mscorlib. The mcs.exe is using IKVM.Reflection.
	
	System.Reflection is used for dynamic compilation. This mode is used by
	our REPL and Evaluator API. Produced IL code is not written to disc but
	executed by runtime (JIT). Mono.CSharp.dll is using System.Reflection and
	System.Reflection.Emit.

* Error reporting

	Always use `Report::Error' or `Report::Warning' methods of Report
	class. The actual Report instance is available via local context.
	An expression error reporting has to be done during Resolve phase,
	except when it's Emit specific (very rare).

	Error reporting should try to use the same codes that the
	Microsoft compiler uses (if only so we can track which errors
	we handle and which ones we don't).

	If there is an error which is specific to MSC, use negative
	numbers, and register the number in mcs/errors/errors.txt

	Try to write a test case for any error that you run into the
	code of the compiler if there is none already.

	Put your test case in a file called csNNNN.cs in the
	mcs/errors directory, and have the first two lines be:

	// csNNNN.cs: This is the error message
	// Line: XXX
	// Compiler options: an optional compiler options

	Where `XXX' is the line where the error occurs.  We will later
	use this as a regression test suite for catching errors in the
	compiler. 
