2004-06-15  Marek Safar  <marek.safar@seznam.cz>

	* expression.cs (StackAlloc.DoReSolve): Added test for
	negative parameter (CS0247).

2004-06-15  Marek Safar  <marek.safar@seznam.cz>

	Fix bug #59792
	* class.cs: (Event.DelegateMethod.Emit): Added synchronization flag.

2004-06-15  Marek Safar  <marek.safar@seznam.cz>

	Fix bug #59781
	* expression.cs: (Binary.DoNumericPromotions): Added conversion for
	ulong.

2004-06-14  Marek Safar  <marek.safar@seznam.cz>

	Fix bug #58254 & cs1555.cs, cs1556.cs
	* driver.cs (MainDriver): Added tests for errors CS1555, CS1556.

2004-06-14  Marek Safar  <marek.safar@seznam.cz>

	* cs-parser.jay: Added error CS1669 test for indexers.

2004-06-13  Martin Baulig  <martin@ximian.com>

	Merged latest changes into gmcs.  Please keep this comment in
	here, it makes it easier for me to see what changed in MCS since
	the last time I merged.

2004-06-11  Martin Baulig  <martin@ximian.com>

	* expression.cs (Invocation.IsParamsMethodApplicable): We need to
	call this twice: for params and varargs methods.

2004-06-11  Marek Safar  <marek.safar@seznam.cz>

	* class.cs:
	(FieldBase.DoDefine, PropertyBase.DoDefine): Added error test CS0610.

2004-06-11  Marek Safar  <marek.safar@seznam.cz>

	* attribute.cs (Attribute.GetValidTargets): Made public.

	* class.cs: 
	(AbstractPropertyEventMethod): New class for better code sharing.
	(AbstractPropertyEventMethod.ApplyAttributeBuilder): Add error
	CS1667 report.
	(PropertyMethod, DelegateMethod): Derived from AbstractPropertyEventMethod

2004-06-11  Raja R Harinath  <rharinath@novell.com>

	Fix bug #59477.
	* ecore.cs (ResolveFlags): Add new 'Intermediate' flag to tell
	that the call to Resolve is part of a MemberAccess.
	(Expression.Resolve): Use it for SimpleName resolution.
	(SimpleName.SimpleNameResolve, SimpleName.DoResolveAllowStatic):
	Add 'intermediate' boolean argument.
	(SimpleName.DoSimpleNameResolve): Likewise.  Use it to disable an
	error message when the SimpleName can be resolved ambiguously
	between an expression and a type.
	* expression.cs (MemberAccess.IdenticalNameAndTypeName): Make
	public.
	(MemberAccess.Resolve): Pass 'Intermediate' flag to the Resolve()
	call on the left-side.

2004-06-11  Marek Safar  <marek.safar@seznam.cz>

	* class.cs:
	(MethodCore.VerifyClsCompliance): Added test for error CS3000.

2004-06-11  Marek Safar  <marek.safar@seznam.cz>

	* attribute.cs (Attribute.Emit): Fixed error CS0579 reporting.

2004-06-11  Martin Baulig  <martin@ximian.com>

	* expression.cs (Invocation.EmitCall): Use OpCodes.Callvirt for
	varargs methods if applicable.

2004-06-11  Martin Baulig  <martin@ximian.com>

	* expression.cs (Invocation.EmitCall): Don't use
	`method.CallingConvention == CallingConventions.VarArgs' since the
	method could also have `CallingConventions.HasThis'.

2004-06-11  Marek Safar  <marek.safar@seznam.cz>

	* class.cs (Event.GetSignatureForError): Implemented.
	Fixed crash in error test cs3010.cs

2004-06-10  Miguel de Icaza  <miguel@ximian.com>

	* cs-tokenizer.cs: Change the way we track __arglist to be
	consistent with the other keywords.

2004-06-09  Miguel de Icaza  <miguel@ximian.com>

	* codegen.cs: FAQ avoider: turn 1577 into a warning for now until
	tomorrow.

2004-06-09  Sebastien Pouliot  <sebastien@ximian.com>

	* codegen.cs: Check that all referenced assemblies have a strongname
	before strongnaming the compiled assembly. If not report error CS1577.
	Fix bug #56563. Patch by Jackson Harper.
	* typemanager.cs: Added a method to return all referenced assemblies.
	Fix bug #56563. Patch by Jackson Harper.

2004-06-08  Marek Safar  <marek.safar@seznam.cz>

	* class.cs:
	(Method.ApplyAttributeBuilder): Moved and added conditional
	attribute error tests (CS0577, CS0578, CS0243, CS0582, CS0629).

	* delegate.cs:
	(DelegateCreation.ResolveMethodGroupExpr): Added error CS1618 test.

2004-06-08  Marek Safar  <marek.safar@seznam.cz>

	Fixed #59640
	* class.cs: (EventField.attribute_targets): Changed default target.

2004-06-08  Martin Baulig  <martin@ximian.com>

	* expression.cs (Invocation.EmitCall): Enable varargs methods.

2004-06-08  Martin Baulig  <martin@ximian.com>

	* rootcontext.cs (ResolveCore): Added "System.RuntimeArgumentHandle".

2004-06-07  Martin Baulig  <martin@ximian.com>

	Added support for varargs methods.

	* cs-tokenizer.cs (Token.ARGLIST): New token for the `__arglist'
	keyword.

	* cs-parser.jay: Added support for `__arglist'.

	* decl.cs (MemberCache.AddMethods): Don't ignore varargs methods.

	* expression.cs (Argument.AType): Added `ArgList'.
	(Invocation): Added support for varargs methods.
	(ArglistAccess): New public class.
	(Arglist): New public class.

	* parameter.cs (Parameter.Modifier): Added `ARGLIST'.

	* statement.cs (Block.Flags): Added `HasVarargs'.  We set this on
	a method's top-level block if the method has varargs.

	* support.cs (ReflectionParameters, InternalParameters): Added
	support for varargs methods.	

2004-06-07  Miguel de Icaza  <miguel@ximian.com>

	* class.cs: Provide location in indexer error report.

	* driver.cs: Use standard names.

	* namespace.cs: Catch the use of using after a namespace has been
	declared also on using aliases.

2004-06-03  Raja R Harinath  <rharinath@novell.com>

	Bug #50820.
	* typemanager.cs (closure_private_ok, closure_invocation_type)
	(closure_qualifier_type, closure_invocation_assembly)
	(FilterWithClosure): Move to ...
	(Closure): New internal nested class.
	(Closure.CheckValidFamilyAccess): Split out from Closure.Filter.
	(MemberLookup, RealMemberLookup): Add new almost_match parameter.
	* ecore.cs (almostMatchedMembers): New variable to help report CS1540.
	(MemberLookup, MemberLookupFailed): Use it.
	* expression.cs (New.DoResolve): Treat the lookup for the
	constructor as being qualified by the 'new'ed type.
	(Indexers.GetIndexersForTypeOrInterface): Update.

2004-06-03  Marek Safar  <marek.safar@seznam.cz>

	* attribute.cs
	(GetConditionalAttributeValue): New method. Returns
	condition of ConditionalAttribute.
	(SearchMulti): New method.  Returns all attributes of type 't'.
	Use it when attribute is AllowMultiple = true.
	(IsConditionalMethodExcluded): New method.

	* class.cs
	(Method.IsExcluded): Implemented. Returns true if method has conditional
	attribute and the conditions is not defined (method is excluded).
	(IMethodData): Extended interface for ConditionalAttribute support.
	(PropertyMethod.IsExcluded): Implemented.

	* decl.cs
	(MemberCore.Flags): Excluded_Undetected, Excluded new caching flags.

	* expression.cs
	(Invocation.IsMethodExcluded): Checks the ConditionalAttribute
	on the method.

2004-06-02 Ben Maurer  <bmaurer@users.sourceforge.net>

	* expression.cs (ArrayCreationExpression): Make this just an
	`expression'. It can't be a statement, so the code here was
	dead.

2004-06-02  Marek Safar  <marek.safar@seznam.cz>

	Fixed #59072
	* typemanager.cs (GetFullNameSignature): New method for
	MethodBase types.

2004-06-02  Marek Safar  <marek.safar@seznam.cz>

	Fixed #56452
	* class.cs (MemberBase.GetSignatureForError): New virtual method.
	Use this method when MethodBuilder is null.
	(MethodData.DefineMethodBuilder): Encapsulated code to the new method.
	Added test for error CS0626 (MONO reports error for this situation).
	(IMethodData.GetSignatureForError): Extended interface.

2004-06-01  Marek Safar  <marek.safar@seznam.cz>

	* attribute.cs
	(AttributeTester.GetObsoleteAttribute): Returns instance of
	ObsoleteAttribute when type is obsolete.

	* class.cs
	(TypeContainer.VerifyObsoleteAttribute): Override.
	(Method.GetSignatureForError): New method for usage when MethodBuilder is null.
	(MethodCode.VerifyObsoleteAttribute): Override.
	(MemberBase.VerifyObsoleteAttribute): Override.

	* decl.cs
	(MemberCore.CheckUsageOfObsoleteAttribute): Tests presence of ObsoleteAttribute
	and report proper error.

	*delegate.cs
	Delegate.VerifyObsoleteAttribute): Override.

	* ecore.cs
	(Expression.CheckObsoleteAttribute): Tests presence of ObsoleteAttribute
	and report proper error.
	(FieldExpr.DoResolve): Added tests for ObsoleteAttribute.

	* enum.cs
	(Enum.GetObsoleteAttribute): Returns ObsoleteAttribute for both enum type
	and enum member.

	* expression.cs
	(Probe.DoResolve, Cast.DoResolve, LocalVariableReference.DoResolve,
	New.DoResolve, SizeOf.DoResolve, TypeOf.DoResolce, MemberAccess.DoResolve):
	Added test for ObsoleteAttribute.

	* statement.cs
	(Catch): Derived from Statement.

2004-06-01  Marek Safar  <marek.safar@seznam.cz>
 
	Fixed bug #59071 & cs0160.cs
 
	* statement.cs (Try.Resolve): Check here whether order of catch
	clauses matches their dependencies.

2004-05-31  Miguel de Icaza  <miguel@ximian.com>

 	* Reverted patch to namespace.cs (Use lookuptypedirect).  This
	caused a regression: #59343.  Referencing nested classes from an
	assembly stopped working.

2004-05-31  Martin Baulig  <martin@ximian.com>

	MCS is now frozen for beta 2.

2004-05-30 Ben Maurer  <bmaurer@users.sourceforge.net>

	* convert.cs: add a trivial cache for overload operator resolution.

2004-05-30 Ben Maurer  <bmaurer@users.sourceforge.net>

	* decl.cs: If possible, use lookuptypedirect here. We can only do
	this if there is no `.' after the namespace. Avoids using
	LookupType, which does lots of slow processing.
	(FindNestedType) New method, does what it says :-).
	* namespace.cs: use LookupTypeDirect.
	* rootcontext.cs: use membercache, if possible.
	* typemanager.cs (LookupTypeDirect): Cache negative hits too.

2004-05-30 Ben Maurer  <bmaurer@users.sourceforge.net>

	* expression.cs:
	According to the spec, 

	In a member access of the form E.I, if E is a single identifier,
	and if the meaning of E as a simple-name (§7.5.2) is a constant,
	field, property, localvariable, or parameter with the same type as
	the meaning of E as a type-name (§3.8), then both possible
	meanings of E are permitted.

	We did not check that E as a simple-name had the same type as E as
	a type name.

	This trivial check gives us 5-7% on bootstrap time.

2004-05-30 Ben Maurer  <bmaurer@users.sourceforge.net>

	* expression.cs (Invocation.OverloadResolve): Avoid the
	use of hashtables and boxing here by allocating on demand.

2004-05-30  Martin Baulig  <martin@ximian.com>

	* rootcontext.cs (RootContext.LookupType): Don't cache things if
	we're doing a silent lookup.  Don't try to lookup nested types in
	TypeManager.object_type (thanks to Ben Maurer).

2004-05-30  Martin Baulig  <martin@ximian.com>

	Committing a patch from Ben Maurer.

	* rootcontext.cs (RootContext.LookupType): Cache negative results.

2004-05-29  Martin Baulig  <martin@ximian.com>

	* class.cs (IMethodData.ShouldIgnore): New method.

	* typemanager.cs (TypeManager.MethodFlags): Don't take a
	`Location' argument, we don't need it anywhere.  Use
	`IMethodData.ShouldIgnore ()' instead of
	`MethodData.GetMethodFlags ()'.
	(TypeManager.AddMethod): Removed.
	(TypeManager.AddMethod2): Renamed to AddMethod.

2004-05-29  Martin Baulig  <martin@ximian.com>

	Committing a patch from Benjamin Jemlich <pcgod@gmx.net>.

	* convert.cs (Convert.ImplicitReferenceConversion): If we're
	converting from a class type S to an interface type and we already
	have an object on the stack, don't box it again.  Fixes #52578.

2004-05-29  Martin Baulig  <martin@ximian.com>

	* class.cs (ConstructorInitializer.GetOverloadedConstructor):
	Added support for `params' parameters.  Fixes #59267.

2004-05-29  Martin Baulig  <martin@ximian.com>

	* literal.cs (NullPointer): Provide a private .ctor which sets
	`type' to TypeManager.object_type.  Fixes #59048.

2004-05-29  Martin Baulig  <martin@ximian.com>

	* expression.cs (MemberAccess.ResolveMemberAccess): If we're an
	EventExpr, set `ee.InstanceExpression = left'.  Fixes #59188.

	* ecore.cs (EventExpr.instance_expr): Make the field private.

2004-05-26  Marek Safar  <marek.safar@seznam.cz>

	Fixed bug #50080 & cs0214-2.cs
	* expression.cs (Cast.DoResolve): Check unsafe context here.
        
	* statement.cs (Resolve.DoResolve): Likewise.

2004-05-26  Martin Baulig  <martin@ximian.com>

	* namespace.cs (NamespaceEntry.Lookup): Added `bool silent'.

	* rootcontext.cs (RootContext.NamespaceLookup): Added `bool silent'.
	(RootContext.LookupType): Pass down the `silent' flag.

2004-05-25  Martin Baulig  <martin@ximian.com>

	* expression.cs
	(MethodGroupExpr.IdenticalTypeName): New public property.
	(Invocation.DoResolve): Don't report a CS0176 if the "instance"
	expression actually refers to a type.

2004-05-25  Martin Baulig  <martin@ximian.com>

	* expression.cs (Invocation.DoResolve): Applied Ben Maurer's patch
	for #56176 and made it actually work.

2004-05-25  Martin Baulig  <martin@ximian.com>

	* ecore.cs (Expression.CacheTemporaries): Make this virtual.
	(FieldExpr, PropertyExpr): Override and implement
	CacheTemporaries.  Fixes #52279.

2004-05-25  Miguel de Icaza  <miguel@ximian.com>

	* location.cs: In the new compiler listing a file twice is a
	warning, not an error.

2004-05-24  Martin Baulig  <martin@ximian.com>

	* enum.cs (Enum.DefineType): For the `BaseType' to be a
	TypeLookupExpression; otherwise, report a CS1008.  Fixes #58571.

2004-05-24  Martin Baulig  <martin@ximian.com>

	* decl.cs (DeclSpace.FindType): Try doing an alias lookup before
	walking the `using' list.  Fixes #53921.

2004-05-24  Martin Baulig  <martin@ximian.com>

	* const.cs (Const.LookupConstantValue): Added support for
	EmptyCast's; fixes #55251.

2004-05-24  Martin Baulig  <martin@ximian.com>

	* ecore.cs (SimpleName.SimpleNameResolve): Renamed to
	DoSimpleNameResolve() and provide a SimpleNameResolve() wrapper
	which does the CS0135 check.  The reason is that we first need to
	check whether the variable actually exists.

2004-05-24  Martin Baulig  <martin@ximian.com>

	* class.cs (MemberBase.DoDefine): Use DeclSpace.FindType() rather
	than RootContext.LookupType() to find the explicit interface
	type.  Fixes #58584.

2004-05-24  Raja R Harinath  <rharinath@novell.com>

	* Makefile: Simplify.  Use executable.make.
	* mcs.exe.sources: New file.  List of sources of mcs.exe.

2004-05-24  Anders Carlsson  <andersca@gnome.org>

	* decl.cs:
	* enum.cs:
	Use the invariant culture when doing String.Compare for CLS case
	sensitivity.
	
2004-05-23  Martin Baulig  <martin@ximian.com>

	* decl.cs (DeclSpace.FindType): Only check the `using' list if we
	don't have any dots.  Fixes #52622, added cs0246-8.cs.

	* namespace.cs (NamespaceEntry.Lookup): Likewise.
        
2004-05-23  Marek Safar  <marek.safar@seznam.cz>

	* class.cs (MemberBase.Define): Reuse MemberType member for 
	resolved type. Other methods can use it too.

2004-05-23  Martin Baulig  <martin@ximian.com>

	* ecore.cs (SimpleName.SimpleNameResolve): Only report a CS0135 if
	the variable also exists in the current block (otherwise, we need
	to report a CS0103).  Fixes #58670.

2004-05-23  Martin Baulig  <martin@ximian.com>

	* flowanalysis.cs (Reachability.Reachable): Compute this
	on-the-fly rather than storing it as a field.

2004-05-23  Martin Baulig  <martin@ximian.com>

	* flowanalysis.cs (Reachability.And): Manually compute the
	resulting `barrier' from the reachability.	
       
2004-05-23  Marek Safar  <marek.safar@seznam.cz>

	Fix bug #57835
	* attribute.cs (AttributeTester.GetMethodObsoleteAttribute): Returns
	instance of ObsoleteAttribute when symbol is obsolete.

	* class.cs
	(IMethodData): Extended interface for ObsoleteAttribute support.

2004-05-22  Marek Safar  <marek.safar@seznam.cz>

	* attribute.cs: Fix bug #55970

2004-05-22  Marek Safar  <marek.safar@seznam.cz>

	Fix bug #52705
	* attribute.cs
	(GetObsoleteAttribute): New method. Creates the instance of
	ObsoleteAttribute.
	(AttributeTester.GetMemberObsoleteAttribute): Returns instance of
	ObsoleteAttribute when member is obsolete.
	(AttributeTester.Report_ObsoleteMessage): Common method for
	Obsolete error/warning reporting.

	* class.cs
	(TypeContainer.base_classs_type): New member for storing parent type.

	* decl.cs
	(MemberCore.GetObsoleteAttribute): Returns instance of ObsoleteAttribute
	for this MemberCore.

2004-05-21  Marek Safar  <marek.safar@seznam.cz>

	* attribute.cs, const.cs: Fix bug #58590

2004-05-21  Martin Baulig  <martin@ximian.com>

	* flowanalysis.cs (FlowBranching.MergeTopBlock): Don't check for
	out parameters if the end of the method is unreachable.  Fixes
	#58098.	

2004-05-21  Marek Safar  <marek.safar@seznam.cz>

	* codegen.cs, cs-parser.jay: Removed SetAttributes method.
	Hari was right, why extra method.

2004-05-21  Marek Safar  <marek.safar@seznam.cz>

	* attribute.cs, cs-parser.jay: Fix errors/cs0579-7.cs.

2004-05-20  Martin Baulig  <martin@ximian.com>

	Merged this back from gmcs to keep the differences to a minumum.

	* attribute.cs (Attribute.CheckAttributeType): Take an EmitContext
	instead of a Declspace.
	(Attribute.ResolveType): Likewise.
	(Attributes.Search): Likewise.
	(Attributes.Contains): Likewise.
	(Attributes.GetClsCompliantAttribute): Likewise.

	* class.cs (TypeContainer.VerifyMembers): Added EmitContext
	argument.
	(MethodData.ApplyAttributes): Take an EmitContext instead of a
	DeclSpace.

2004-05-19  Marek Safar  <marek.safar@seznam.cz>

	Fix bug #58688 (MCS does not report error when the same attribute
	is assigned twice)

	* attribute.cs (Attribute.Emit): Distinction between null and default.

2004-05-19  Raja R Harinath  <rharinath@novell.com>

	* cs-parser.jay (attribute): Create a GlobalAttribute for the case
	of a top-level attribute without an attribute target.
	* attribute.cs (Attribute.Error_AttributeConstructorMismatch): 
	Make non-static.
	(Attribute.Conditional_GetConditionName), 
	(Attribute.Obsolete_GetObsoleteMessage): Update.
	(Attribute.IndexerName_GetIndexerName): New.  Attribute-specific
	part of ScanForIndexerName.
	(Attribute.CanIgnoreInvalidAttribute): New function.
	(Attribute.ScanForIndexerName): Move to ...
	(Attributes.ScanForIndexerName): ... here.
	(Attributes.Attrs): Rename from now-misnamed AttributeSections.
	(Attributes.Search): New internal variant that can choose not to
	complain if types aren't resolved.  The original signature now
	complains.
	(Attributes.GetClsCompliantAttribute): Use internal variant, with
	complaints suppressed.
	(GlobalAttribute.CheckAttributeType): Overwrite ds.NamespaceEntry
	only if it not useful.
	(CanIgnoreInvalidAttribute): Ignore assembly attribute errors at
	top-level for attributes that are shared between the assembly
	and a top-level class.
	* parameter.cs (ImplicitParameter): Rename from ParameterAtribute.
	* class.cs: Update to reflect changes.
	(DefineIndexers): Fuse loops.
	* codegen.cs (GetAssemblyName): Update to reflect changes.  Accept
	a couple more variants of attribute names.

2004-05-18  Marek Safar  <marek.safar@seznam.cz>

	Fix bug #52585 (Implemented explicit attribute declaration)

	* attribute.cs:
	(Attributable.ValidAttributeTargets): New abstract method. It gets
	list of valid attribute targets for explicit target declaration.
	(Attribute.Target): It holds target itself.
	(AttributeSection): Removed.
	(Attribute.CheckTargets): New method. It checks whether attribute
	target is valid for the current element.

	* class.cs:
	(EventProperty): New class. For events that are declared like
	property (with add and remove accessors).
	(EventField): New class. For events that are declared like field.
	class.cs

	* cs-parser.jay: Implemented explicit attribute target declaration.

	* class.cs, decl.cs, delegate.cs, enum.cs, parameter.cs:        
	Override ValidAttributeTargets.

	* parameter.cs:
	(ReturnParameter): Class for applying custom attributes on 
	the return type.
	(ParameterAtribute): New class. Class for applying custom
	attributes on the parameter type.

2004-05-17  Miguel de Icaza  <miguel@ximian.com>

	* class.cs (MemberBase.DoDefine): Pass UNSAFE on interface
	definitions. 

	(Method): Allow UNSAFE here.

	* modifiers.cs: Support unsafe reporting.

2004-05-17  Marek Safar  <marek.safar@seznam.cz>

	* decl.cs: Fix bug #58478.

2004-05-17  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* statement.cs: When checking for unreachable code on an EmptyStatement,
	set the location. Fixes bug #58488.

2004-05-13  Miguel de Icaza  <miguel@ximian.com>

	* driver.cs: Add -pkg handling.

	From Gonzalo: UseShelLExecute=false

2004-05-12  Marek Safar  <marek.safar@seznam.cz>

	* attribute.cs:
	(Attribute.GetAttributeTargets): New method. Gets AttributeTargets
	for attribute.
	(Attribute.IsClsCompliaceRequired): Moved to base for better
	accesibility.
	(Attribute.UsageAttribute): New property for AttributeUsageAttribute
	when attribute is AttributeUsageAttribute.
	(Attribute.GetValidTargets): Simplified.
	(Attribute.GetAttributeUsage): New method returns AttributeUsage
	attribute for this type.
	(Attribute.ApplyAttributes): Method renamed to Emit and make
	non-static.
	(GlobalAttributeSection): New class for special handling of global
	attributes (assembly, module).
	(AttributeSection.Emit): New method.

	* class.cs: Implemented Attributable abstract methods.
	(MethodCore.LabelParameters): Moved to Parameter class.
	(Accessor): Is back simple class.
	(PropertyMethod): Implemented Attributable abstract class.
	(DelegateMethod): Implemented Attributable abstract class.
	(Event): New constructor for disctintion between normal Event
	and Event with accessors.

	* cs-parser.jay: Used new Event ctor and GlobalAttributeSection.

	* codegen.cs, const.cs, decl.cs, delegate.cs:
	(CommonAssemblyModulClass): Implemented Attributable abstract class
	and simplified.

	* enum.cs: Implement IAttributeSupport interface.
	(EnumMember): New class for emum members. Implemented Attributable
	abstract class

	* parameter.cs:
	(ParameterBase): Is abstract.
	(ReturnParameter): New class for easier [return:] attribute handling.

	* typemanager.cs: Removed builder_to_attr.

2004-05-11  Raja R Harinath  <rharinath@novell.com>

	Fix bug #57151.
	* attribute.cs (Attribute.GetPositionalValue): New function.
	* class.cs (TypeContainer.VerifyMembers): New function.
	(TypeContainer.Emit): Use it.
	(ClassOrStruct): New base class for Class and Struct.
	(ClassOrStruct.ApplyAttributeBuilder): New function.  Note if 
	StructLayout(LayoutKind.Explicit) was ascribed to the struct or
	class.
	(ClassOrStruct.VerifyMembers): If the struct is explicitly laid out,
	then each non-static field should have a FieldOffset attribute.
	Otherwise, none of the fields should have a FieldOffset attribute.
	* rootcontext.cs (RootContext.ResolveCore): Resolve StructLayout 
	and FieldOffset attributes.
	* typemanager.cs (TypeManager.struct_layout_attribute_type)
	(TypeManager.field_offset_attribute_type): New core types.
	(TypeManager.InitCoreTypes): Initialize them.

2004-05-11  Michal Moskal  <malekith@pld-linux.org>

	* class.cs (Event.RemoveDelegateMethod.DelegateMethodInfo):
	Return correct type.
	From bug #58270.

2004-05-09  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (Binary.DoNumericPromotions): 0 long constant can
	be implicitly converted to ulong.
	
	* expression.cs: The logic for allowing operator &, | and ^ worked
	was wrong, it worked before because we did not report an error in
	an else branch.  Fixes 57895.

	* class.cs: Applied patch from iain@mccoy.id.au Iain McCoy to
	allow volatile fields to be reference types.

2004-05-07  Miguel de Icaza  <miguel@ximian.com>

	* driver.cs: Add support for /debug-

2004-05-07  Raja R Harinath  <rharinath@novell.com>

	* attribute.cs (Attribute.CheckAttributeType, Attribute.ResolveType): 
	Add a 'complain' parameter to silence errors.
	(Attribute.Resolve): Update to changes.  Put in sanity check to catch
	silently overlooked type-resolutions.
	(Attribute.ScanForIndexerName, Attribute.DefinePInvokeMethod): Update
	to reflect changes.
	(Attributes.Search): New function.
	(Attributes.Contains, Attributes.GetClsCompliantAttribute): Use Search.
	(Attributes.GetAttributeFullName): Remove hack.
	* class.cs (MethodCore.LabelParameters, MethodData.ApplyAttributes): 
	Update to reflect changes.
	* codegen.cs (CommonAssemblyModulClass.GetClsCompliantAttribute):
	Use Attributes.Search instead of nested loops.

2004-05-07  Marek Safar  <marek.safar@seznam.cz>

	* decl.cs:
	(MemberCore.Flags): Extended for caching presence of CLSCompliantAttribute.
	(MemberCore.VerifyClsCompliance): Implemented CS3019 error report.
	(DeclSpace.GetClsCompliantAttributeValue): Returns simple bool.

	* report.cs: (Report.Warning): Renamed to Warning_T because of
	parameter collision.

2004-05-05  Raja R Harinath  <rharinath@novell.com>

	* expression.cs (MemberAccess.ResolveMemberAccess):
	Exit with non-zero status after Report.Error.
	* rootcontext.cs (RootContext.BootstrapCorlib_ResolveDelegate):
	Likewise.
	* typemanager.cs (TypeManager.CoreLookupType): Likewise.

2004-05-04  Lluis Sanchez Gual  <lluis@ximian.com>

	* support.cs: Don't hang when the file is empty.

2004-05-04  Lluis Sanchez Gual  <lluis@ximian.com>

	* support.cs: In SeekableStreamReader, compute the preamble size of the
	  underlying stream. Position changes should take into account that initial
	  count of bytes.

2004-05-03  Todd Berman  <tberman@sevenl.net>

	* driver.cs: remove unused GetSysVersion function.

2004-05-03  Todd Berman  <tberman@sevenl.net>

	* driver.cs: Remove the hack from saturday, as well as the hack
	from jackson (LoadAssemblyFromGac), also adds the CWD to the
	link_paths to get that bit proper.

2004-05-01  Todd Berman  <tberman@sevenl.net>

	* driver.cs: Try a LoadFrom before a Load, this checks the current
	path. This is currently a bug in mono that is be fixed, however, this
	provides a workaround for now. This will be removed when the bug
	is fixed.

2004-05-01  Sebastien Pouliot  <sebastien@ximian.com>

	* CryptoConvert.cs: Updated to latest version. Fix issue with 
	incomplete key pairs (#57941).

2004-05-01  Todd Berman  <tberman@sevenl.net>

	* driver.cs: Remove '.' from path_chars, now System.* loads properly
	from the GAC

2004-04-30  Jackson Harper  <jackson@ximian.com>

	* codegen.cs: Open keys readonly.
	
2004-04-30  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* typemanager.cs: don't report cyclic struct layout when a struct
	contains 2 or more fields of the same type. Failed for Pango.AttrShape
	which has 2 Pango.Rectangle fields.

2004-04-29 Ben Maurer  <bmaurer@users.sourceforge.net>

	* expression.cs: Handle IntPtr comparisons with IL code
	rather than a method call.

2004-04-29  Martin Baulig  <martin@ximian.com>

	* ecore.cs (PropertyExpr.FindAccessor): New private method.  Walk
	the list of PropertyInfo's in class hierarchy and find the
	accessor.  Fixes #56013.

2004-04-29  Martin Baulig  <martin@ximian.com>

	* typemanager.cs (TypeManager.CheckStructCycles): Fixed.

2004-04-29  Martin Baulig  <martin@ximian.com>

	Applying a patch from Benjamin Jemlich <pcgod@gmx.net>.

	* ecore.cs (FieldExpr.AddressOf): Make this work for valuetypes.

2004-04-29  Martin Baulig  <martin@ximian.com>

	* class.cs (ConstructorInitializer.Resolve): Check whether the
	parent .ctor is accessible.  Fixes #52146.

2004-04-29  Martin Baulig  <martin@ximian.com>

	Applying a patch from Benjamin Jemlich <pcgod@gmx.net>.

	* statement.cs (Using.EmitLocalVariableDecls): Use
	TypeManager.idisposable_type, not typeof (IDisposable).
	(Foreach.EmitCollectionForeach): Added support for valuetypes.

2004-04-29  Martin Baulig  <martin@ximian.com>

	* class.cs (Event.Define): Don't emit the field and don't set
	RTSpecialName and SpecialName for events on interfaces.  Fixes
	#57703.	

2004-04-29  Raja R Harinath  <rharinath@novell.com>

	Refactor Attribute.ApplyAttributes.
	* attribute.cs (Attributable): New base class for objects that can
	have Attributes applied on them.
	(Attribute): Make AttributeUsage fields public.
	(Attribute.GetFieldValue, Attribute.GetMarshal): Make non-static.
	(Attribute.IsInternalCall): New property.
	(Attribute.UsageAttr): Convert to a public read-only property.
	(Attribute.CheckAttributeType): Use a DeclSpace, not an	EmitContext.
	(Attribute.ResolveType, Attribute.Resolve)
	(Attribute.ScanForIndexerName): Update to reflect changes.
	(Attribute.CheckAttributeTarget): Re-format.
	(Attribute.ApplyAttributes): Refactor, to various
	Attributable.ApplyAttributeBuilder methods.
	* decl.cs (MemberCore): Make Attributable.
	* class.cs (Accessor): Make Attributable.
	(MethodData.ApplyAttributes): Use proper attribute types, not
	attribute names.
	(TypeContainer.LabelParameters): Pass Parameter to ApplyAttributes.
	(TypeContainer.ApplyAttributeBuilder)
	(Method.ApplyAttributeBuilder, Constructor.ApplyAttributeBuilder)
	(Field.ApplyAttributeBuilder, Accessor.ApplyAttributeBuilder)	
	(PropertyBase.ApplyAttributeBuilder, Event.ApplyAttributeBuilder)
	(Operator.ApplyAttributeBuilder): New factored-out methods.
	* const.cs (Const.ApplyAttributeBuilder): Likewise.
	* delegate.cs (Delegate.ApplyAttributeBuilder): Likewise.
	* enum.cs (Enum.ApplyAttributeBuilder): Likewise.
	* parameter.cs (ParameterBase): New Attributable base class
	that can also represent Return types.
	(Parameter): Update to the changes.

2004-04-29  Jackson Harper  <jackson@ximian.com>

	* driver.cs: Prefer the corlib system version when looking for
	assemblies in the GAC. This is still a hack, but its a better hack
	now.
	
2004-04-29  Marek Safar  <marek.safar@seznam.cz>

	* decl.cs, enum.cs: Improved error 3005 reporting.
  
	* report.cs (SymbolRelatedToPreviousError): New method for error reporting.
        (related_symbols): New private member for list of symbols
	related to reported error/warning.
        
	* tree.cs: Do not use now obsolete Report.LocationOfPreviousError.

2004-04-29  Martin Baulig  <martin@ximian.com>

	* ecore.cs (Expression.Constantify): If we're an enum and
	TypeManager.TypeToCoreType() doesn't give us another type, use
	t.UnderlyingSystemType.  Fixes #56178.	

2004-04-29  Martin Baulig  <martin@ximian.com>

	* decl.cs (MemberCache.SetupCacheForInterface): Look over all our
	interfaces and for each interface, only add members directly
	declared in that interface.  Fixes #53255.

2004-04-28  Martin Baulig  <martin@ximian.com>

	* expression.cs (ConditionalLogicalOperator): Use a temporary
	variable for `left' to avoid that we evaluate it more than once;
	bug #52588.

2004-04-28  Martin Baulig  <martin@ximian.com>

	* expression.cs (ComposedCast.DoResolveAsTypeStep): Don't allow
	`void[]' (CS1547).

2004-04-28  Martin Baulig  <martin@ximian.com>

	* statement.cs (LocalInfo.Resolve): Check whether the type is not
	void (CS1547).

	* class.cs (MemberBase.CheckParameters, FieldBase.DoDefine): Check
	whether the type is not void (CS1547).

2004-04-28  Martin Baulig  <martin@ximian.com>

	* expression.cs (Unary.DoResolveLValue): Override this and report
	CS0131 for anything but Operator.Indirection.

2004-04-28  Martin Baulig  <martin@ximian.com>

	Committing a patch from Ben Maurer; see bug #50820.

	* typemanager.cs (TypeManager.FilterWithClosure): Added CS1540
	check for classes.

	* ecore.cs (Expression.MemberLookupFailed): Added CS1540 check for
	classes.	

2004-04-28  Martin Baulig  <martin@ximian.com>

	Committing a patch from Ben Maurer; see bug #50820.

	* typemanager.cs (TypeManager.FilterWithClosure): Added CS1540
	check for classes.

	* ecore.cs (Expression.MemberLookupFailed): Added CS1540 check for
	classes.	

2004-04-28  Martin Baulig  <martin@ximian.com>

	* statement.cs (Block.LookupLabel): Also lookup in implicit child blocks.
	(Block.AddLabel): Call DoLookupLabel() to only search in the
	current block.

2004-04-28  Martin Baulig  <martin@ximian.com>

	* cfold.cs (ConstantFold.BinaryFold): Added special support for
	comparing StringConstants and NullLiterals in Equality and Inequality.

2004-04-28  Jackson Harper  <jackson@ximian.com>

	* driver.cs: Attempt to load referenced assemblies from the
	GAC. This is the quick and dirty version of this method that
	doesnt take into account versions and just takes the first
	canidate found. Will be good enough for now as we will not have more
	then one version installed into the GAC until I update this method.

2004-04-28  Martin Baulig  <martin@ximian.com>

	* typemanager.cs (TypeManager.CheckStructCycles): New public
	static method to check for cycles in the struct layout.

	* rootcontext.cs (RootContext.PopulateTypes): Call
	TypeManager.CheckStructCycles() for each TypeContainer.
	[Note: We only need to visit each type once.]

2004-04-28  Martin Baulig  <martin@ximian.com>

	* constant.cs (StringConstant.Emit): Emit Ldnull if we're null.

	* const.cs (Const.LookupConstantValue): Return a `bool' signalling
	success and added `out object value'.  Use a `bool resolved' field
	to check whether we've already been called rather than
	`ConstantValue != null' since this breaks for NullLiterals.

2004-04-28  Raja R Harinath  <rharinath@novell.com>

	* driver.cs (Driver.MainDriver) [IsModuleOnly]: Open code the
	setting of this flag, since the 'set' method may be non-public.

2004-04-28  Raja R Harinath  <rharinath@novell.com>

	* flowanalysis.cs (FlowBranchingException.LookupLabel): Add a null
	check on current_vector.Block.

2004-04-27  Martin Baulig  <martin@ximian.com>

	* expression.cs (BaseAccess.CommonResolve): Don't allow `base' in
	a field initializer.  Fixes #56459.

2004-04-27  Martin Baulig  <martin@ximian.com>

	* ecore.cs (PropertyExpr.DoResolve/DoResolveLValue): Check whether
	we're not attempting to use an indexer.  Fixes #52154.

2004-04-27  Martin Baulig  <martin@ximian.com>

	* statement.cs (Return): Don't create a return label if we don't
	need it; reverts my change from January 20th.  Thanks to Ben
	Maurer for this.

2004-04-27  Martin Baulig  <martin@ximian.com>

	According to the spec, `goto' can only leave a nested scope, but
	never enter it.

	* statement.cs (Block.LookupLabel): Only lookup in the current
	block, don't recurse into parent or child blocks.
	(Block.AddLabel): Check in parent and child blocks, report
	CS0140/CS0158 if we find a duplicate.
	(Block): Removed this indexer for label lookups.
	(Goto.Resolve): Call LookupLabel() on our current FlowBranching;
	this already does the error reporting for us.

	* flowanalysis.cs
	(FlowBranching.UsageVector.Block): New public variable; may be null.
	(FlowBranching.CreateSibling): Added `Block' argument.
	(FlowBranching.LookupLabel): New public virtual method.  Lookup a
	label for the target of a `goto' and check whether we're not
	leaving a `finally'.

2004-04-27  Martin Baulig  <martin@ximian.com>

	* flowanalysis.cs (FlowBranching.UsageVector.MergeChild): If we're
	a finite loop block, also do the ALWAYS->SOMETIMES for throws (not
	just for returns).

2004-04-27  Martin Baulig  <martin@ximian.com>

	* statement.cs (Block.AddLabel): Also check for implicit blocks
	and added a CS0158 check.

2004-04-27  Martin Baulig  <martin@ximian.com>

	* flowanalysis.cs (FlowBranchingLoop): New class.
	(FlowBranching.UsageVector.MergeJumpOrigins): Take a list of
	UsageVector's instead of an ArrayList.
	(FlowBranching.Label): Likewise.
	(FlowBranching.UsageVector.MergeBreakOrigins): New method.
	(FlowBranching.AddBreakVector): New method.

2004-04-27  Miguel de Icaza  <miguel@ximian.com>

	* attribute.cs: Small regression fix: only convert the type if we
	the type is different, fixes System.Drawing build.

2004-04-27  Martin Baulig  <martin@ximian.com>

	* attribute.cs (Attribute.Resolve): If we have a constant value
	for a named field or property, implicity convert it to the correct
	type.

2004-04-27  Raja R Harinath  <rharinath@novell.com>

	* statement.cs (Block.Block): Implicit blocks share
	'child_variable_names' fields with parent blocks.
	(Block.AddChildVariableNames): Remove.
	(Block.AddVariable): Mark variable as "used by a child block" in
	every surrounding block.
	* ecore.cs (SimpleName.SimpleNameResolve): If the name has already
	been used in a child block, complain about violation of "Invariant
	meaning in blocks" rule.
	* cs-parser.jay (declare_local_variables): Don't use
	AddChildVariableNames.
	(foreach_statement): Don't create an implicit block: 'foreach'
	introduces a scope.

2004-04-23  Miguel de Icaza  <miguel@ximian.com>

	* convert.cs (ImplicitNumericConversion): 0 is also positive when
	converting from 0L to ulong.  Fixes 57522.

2004-04-22  Marek Safar  <marek.safar@seznam.cz>

	* decl.cs (FindMemberToOverride): Fix wrong warning for case when
        derived class hides via 'new' keyword field from base class (test-242.cs).
        TODO: Handle this in the more general way.
        
	* class.cs (CheckBase): Ditto.

2004-04-22  Marek Safar  <marek.safar@seznam.cz>

	* decl.cs (caching_flags): New member for storing cached values
	as bit flags.
	(MemberCore.Flags): New enum where bit flags for caching_flags
	are defined.
	(MemberCore.cls_compliance): Moved to caching_flags.
	(DeclSpace.Created): Moved to caching_flags.

	* class.cs: Use caching_flags instead of DeclSpace.Created
        
2004-04-21  Miguel de Icaza  <miguel@ximian.com>

	* ecore.cs (PropertyExpr.GetAccesor): Only perform the 1540 check
	if we are only a derived class, not a nested class.

	* typemanager.cs: Same as above, but do this at the MemberLookup
	level (used by field and methods, properties are handled in
	PropertyExpr).   Allow for the qualified access if we are a nested
	method. 

2004-04-21  Marek Safar  <marek.safar@seznam.cz>

	* class.cs: Refactoring.
	(IMethodData): New inteface; Holds links to parent members
	to avoid member duplication (reduced memory allocation).
	(Method): Implemented IMethodData interface.
	(PropertyBase): New inner classes for get/set methods.
	(PropertyBase.PropertyMethod): Implemented IMethodData interface
	(Event): New inner classes for add/remove methods.
	(Event.DelegateMethod): Implemented IMethodData interface.

	* cs-parser.jay: Pass DeclSpace to Event class for creation of valid
	EmitContext (related to class.cs refactoring).

2004-04-21  Raja R Harinath  <rharinath@novell.com>

	* delegate.cs (Delegate.VerifyApplicability): If the number of
	arguments are the same as the number of parameters, first try to
	verify applicability ignoring  any 'params' modifier on the last
	parameter.
	Fixes #56442.

2004-04-16  Raja R Harinath  <rharinath@novell.com>

	* class.cs (TypeContainer.AddIndexer): Use
	'ExplicitInterfaceName' to determine if interface name was
	explicitly specified.  'InterfaceType' is not initialized at this time.
	(TypeContainer.DefineIndexers): Remove use of temporary list.  The
	Indexers array is already in the required order.  Initialize
	'IndexerName' only if there are normal indexers.
	(TypeContainer.DoDefineMembers): Don't initialize IndexerName.
	(TypeContainer.Emit): Emit DefaultMember attribute only if
	IndexerName is initialized.
	Fixes #56300.

2004-04-15  Benjamin Jemlich  <pcgod@gmx.net>

	* enum.cs (Enum.DefineType): Don't allow char as type for enum.
	Fixes #57007

2004-04-15  Raja R Harinath  <rharinath@novell.com>

	* attribute.cs (Attribute.CheckAttributeType): Check for ambiguous
	attributes.
	Fix for #56456.

	* attribute.cs (Attribute.Resolve): Check for duplicate named
	attributes.
	Fix for #56463.

2004-04-15  Miguel de Icaza  <miguel@ximian.com>

	* iterators.cs (MarkYield): track whether we are in an exception,
	and generate code accordingly.  Use a temporary value to store the
	result for our state.

	I had ignored a bit the interaction of try/catch with iterators
	since their behavior was not entirely obvious, but now it is
	possible to verify that our behavior is the same as MS .NET 2.0

	Fixes 54814

2004-04-14  Miguel de Icaza  <miguel@ximian.com>

	* iterators.cs: Avoid creating temporaries if there is no work to
	do. 

	* expression.cs (ArrayAccess.EmitLoadOpcode): If dealing with
	Enumerations, use TypeManager.EnumToUnderlying and call
	recursively. 

	Based on the patch from Benjamin Jemlich (pcgod@gmx.net), fixes
	bug #57013

	(This.Emit): Use EmitContext.EmitThis to emit our
	instance variable.

	(This.EmitAssign): Ditto.

	* ecore.cs (FieldExpr.Emit): Remove RemapToProxy special
	codepaths, we will move all the functionality into
	Mono.CSharp.This 

	(FieldExpr.EmitAssign): Ditto.

	This fixes several hidden bugs that I uncovered while doing a code
	review of this today.

	* codegen.cs (EmitThis): reworked so the semantics are more clear
	and also support value types "this" instances.

	* iterators.cs: Changed so that for iterators in value types, we
	do not pass the value type as a parameter.  

	Initialization of the enumerator helpers is now done in the caller
	instead of passing the parameters to the constructors and having
	the constructor set the fields.

	The fields have now `assembly' visibility instead of private.

2004-04-11  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (Argument.Resolve): Check if fields passed as ref
	or out are contained in a MarshalByRefObject.

	* typemanager.cs, rootcontext.cs: Add System.Marshalbyrefobject as
	another compiler type.

2004-04-06 Ben Maurer  <bmaurer@users.sourceforge.net>

	* class.cs (Indexer.Define): use the new name checking method.
	Also, return false on an error.
	* cs-tokenizer.cs (IsValidIdentifier): Checks for a valid identifier.
	(is_identifier_[start/part]_character): make static.

2004-04-10  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (Binary.ResolveOperator): Do no append strings
	twice: since we can be invoked more than once (array evaluation)
	on the same concatenation, take care of this here.  Based on a fix
	from Ben (bug #56454)

2004-04-08  Sebastien Pouliot  <sebastien@ximian.com>

	* codegen.cs: Fix another case where CS1548 must be reported (when 
	delay-sign isn't specified and no private is available #56564). Fix
	loading	the ECMA "key" to delay-sign an assembly. Report a CS1548 
	error when MCS is used on the MS runtime and we need to delay-sign 
	(which seems unsupported by AssemblyBuilder - see #56621).

2004-04-08  Marek Safar  <marek.safar@seznam.cz>

	* typemanager.cs (TypeManager.TypeToCoreType): Handle IntPtr too.
	(TypeManager.ComputeNamespaces): Faster implementation for
	Microsoft runtime.

	* compiler.csproj: Updated AssemblyName to mcs.

2004-04-07  Miguel de Icaza  <miguel@ximian.com>

	* rootcontext.cs: Add new types to the boot resolution.

	* ecore.cs (TypeExpr.CanInheritFrom): Inheriting from
	MulticastDelegate is not allowed.

	* typemanager.cs: Add new types to lookup: System.TypedReference
	and ArgIterator.

	* paramter.cs (Parameter.Resolve): if we are an out/ref parameter,
	check for TypedReference or ArgIterator, they are not allowed. 

	* ecore.cs (BoxedCast): Set the eclass to ExprClass.Value, this
	makes us properly catch 1510 in some conditions (see bug 56016 for
	details). 

2004-04-06  Bernie Solomon  <bernard@ugsolutions.com>

	* CryptoConvert.cs: update from corlib version
	with endian fixes.

2004-04-05  Miguel de Icaza  <miguel@ximian.com>

	* class.cs (Indexer.Define): Check indexername declaration

2004-04-05  Marek Safar  <marek.safar@seznam.cz>

	* attribute.cs (IsClsCompliant): Fixed problem with handling
	all three states (compliant, not-compliant, undetected).

2004-03-30  Marek Safar  <marek.safar@seznam.cz>

	* attribute.cs (Attribute): Location is now public.
	(Resolve): Store resolved arguments (pos_values) in attribute class.
	Attribute extractors (now GetClsCompliantAttributeValue) can reuse them.
	(GetClsCompliantAttributeValue): New method that gets
	CLSCompliantAttribute value.
	(GetClsCompliantAttribute): Returns CLSCompliantAttribute for DeclSpace
	if exists else null.
	(AttributeTester): New class for CLS-Compliant verification routines.

	* class.cs (Emit): Add CLS-Compliant verification.
	(Method.GetSignatureForError): Implemented.
	(Constructor.GetSignatureForError): Implemented
	(Constructor.HasCompliantArgs): Returns if constructor has
	CLS-Compliant arguments.
	(Constructor.Emit): Override.
	(Construcor.IsIdentifierClsCompliant): New method; For constructors
	is needed to test only parameters.
	(FieldBase.GetSignatureForError): Implemented.
	(TypeContainer): New member for storing base interfaces.
	(TypeContainer.FindMembers): Search in base interfaces too.

	* codegen.cs (GetClsComplianceAttribute): New method that gets
	assembly or module CLSCompliantAttribute value.
	(ResolveClsCompliance): New method that resolve CLSCompliantAttribute
	for assembly.
	(ModuleClass.Emit): Add error 3012 test.

	* const.cs (Emit): Override and call base for CLS-Compliant tests.

	* decl.cs (ClsComplianceValue): New enum that holds CLS-Compliant
	state for all decl types.
	(MemberCore.Emit): Emit is now virtual and call VerifyClsCompliance
	if CLS-Compliant tests are required.
	(IsClsCompliaceRequired): New method. Analyze whether code
	must be CLS-Compliant.
	(IsExposedFromAssembly): New method. Returns true when MemberCore
	is exposed from assembly.
	(GetClsCompliantAttributeValue): New method. Resolve CLSCompliantAttribute
	value or gets cached value.
	(HasClsCompliantAttribute): New method. Returns true if MemberCore
	is explicitly marked with CLSCompliantAttribute.
	(IsIdentifierClsCompliant): New abstract method. This method is
	used to testing error 3005.
	(IsIdentifierAndParamClsCompliant): New method. Common helper method
	for identifier and parameters CLS-Compliant testing.
	(VerifyClsCompliance): New method. The main virtual method for
	CLS-Compliant verifications.
	(CheckAccessLevel): In one special case (System.Drawing) was TypeBuilder
	null. I don't know why is null (too many public members !).
	(GetClsCompliantAttributeValue). New method. Goes through class hierarchy
	and get value of first CLSCompliantAttribute that found.

	* delegate.cs (Emit): Override and call base for CLS-Compliant tests.
	(VerifyClsCompliance): Override and add extra tests.

	* driver.cs (CSCParseOption): New command line options (clscheck[+|-]).
	clscheck- disable CLS-Compliant verification event if assembly is has
	CLSCompliantAttribute(true).

	* enum.cs (Emit): Override and call base for CLS-Compliant tests.
	ApllyAttribute is now called in emit section as in the other cases.
	Possible future Emit integration.
	(IsIdentifierClsCompliant): New override.
	(VerifyClsCompliance): New override.
	(GetEnumeratorName): Returns full enum name.

	* parameter.cs (GetSignatureForError): Implemented.

	* report.cs (WarningData): New struct for Warning message information.
	(LocationOfPreviousError): New method.
	(Warning): New method. Reports warning based on the warning table.
	(Error_T): New method. Reports error based on the error table.

	* rootcontext.cs (EmitCode): Added new Emit(s) because CLS-Compliant
	verifications are done here.

	* tree.cs (RecordDecl): Used new LocationOfPreviousError method.

	* typemanager.cs (cls_compliant_attribute_type): New member thath holds
	CLSCompliantAttribute.
	(all_imported_types): New member holds all imported types from other
	assemblies.
	(LoadAllImportedTypes): New method fills static table with exported types
	from all referenced assemblies.
	(Modules): New property returns all assembly modules.

2004-03-30  Miguel de Icaza  <miguel@ximian.com>

	* cs-parser.jay: Add a rule to catch wrong event syntax instead of
	throwing a parser error.

	* ecore.cs (PropertyExpr.GetAccessor): Apply patch from Patrik Reali
	which removes the hardcoded get_/set_ prefixes for properties, as
	IL allows for the properties to be named something else.  

	Bug #56013

	* expression.cs: Do not override operand before we know if it is
	non-null.  Fix 56207

2004-03-29 Ben Maurer  <bmaurer@users.sourceforge.net>

	* typemanager.cs: support for pinned variables.

2004-03-29 Ben Maurer  <bmaurer@users.sourceforge.net>

	* decl.cs, typemanager.cs: Avoid using an arraylist
	as a buffer if there is only one result set.

2004-03-29 Ben Maurer  <bmaurer@users.sourceforge.net>

	* expression.cs: Make sure you cant call a static method
	with an instance expression, bug #56174.

2004-03-29  Miguel de Icaza  <miguel@ximian.com>

	* class.cs (IsDuplicateImplementation): Improve error reporting to
	flag 663 (method only differs in parameter modifier).

	* cs-tokenizer.cs: Do not require whitespace when a ( or " will do
	in preprocessor directives.

	* location.cs (LookupFile): Allow for the empty path.

	* attribute.cs (DefinePInvokeMethod): Fix 56148;  I would like a
	better approach for some of that patch, but its failing with the
	CharSet enumeration.  For now try/catch will do.

	* typemanager.cs: Do not crash if a struct does not have fields.
	Fixes 56150.

2004-03-28 Ben Maurer  <bmaurer@users.sourceforge.net>

	* expression.cs: cs0213, cant fix a fixed expression.
	fixes 50231.

2004-03-28 Ben Maurer  <bmaurer@users.sourceforge.net>

	* cs-parser.jay: detect invalid embeded statements gracefully.
	bug #51113.

2004-03-28 Ben Maurer  <bmaurer@users.sourceforge.net>

	* ecore.cs, typemanager.cs: Correct impl of cs1540 check.
	As a regex:
	s/
	the invocation type may not be a subclass of the tye of the item/
	The type of the item must be a subclass of the invocation item.
	/g

	Fixes bug #50820.

2004-03-25  Sebastien Pouliot  <sebastien@ximian.com>

	* attribute.cs: Added methods to get a string and a bool from an
	attribute. Required to information from AssemblyKeyFileAttribute,
	AttributeKeyNameAttribute (string) and AssemblyDelaySign (bool).
	* codegen.cs: Modified AssemblyName creation to include support for
	strongnames. Catch additional exceptions to report them as CS1548.
	* compiler.csproj: Updated include CryptoConvert.cs.
	* compiler.csproj.user: Removed file - user specific configuration.
	* CryptoConvert.cs: New. A COPY of the class CryptoConvert from 
	Mono.Security assembly. The original class is maintained and tested in
	/mcs/class/Mono.Security/Mono.Security.Cryptography/CryptoConvert.cs.
	* drivers.cs: Added support for /keyfile, /keycontainer and /delaysign
	like CSC 8.0 (C# v2) supports.
	* Makefile: Added CryptoConvert.cs to mcs sources.
	* rootcontext.cs: Added new options for strongnames.

2004-03-24 Ben Maurer  <bmaurer@users.sourceforge.net>

	* driver.cs: For --expect-error, report error code `2'
	if the program compiled with no errors, error code `1' if
	it compiled with an error other than the one expected.

2004-03-24  Sebastien Pouliot  <sebastien@ximian.com>

	* compiler.csproj: Updated for Visual Studio .NET 2003.
	* compiler.csproj.user: Updated for Visual Studio .NET 2003.
	* compiler.sln: Updated for Visual Studio .NET 2003.

2004-03-24  Ravi Pratap M  <ravi@ximian.com>

	* expression.cs: Fix bug #47234. We basically need to apply the
	rule that we prefer the conversion of null to a reference type
	when faced with a conversion to 'object' (csc behaviour).

2004-03-23 Ben Maurer  <bmaurer@users.sourceforge.net>

	* statement.cs: Shorter form for foreach, eliminates
	a local variable. r=Martin.

2004-03-23 Ben Maurer  <bmaurer@users.sourceforge.net>

	* constant.cs, ecore.cs, literal.cs: New prop IsZeroInteger that
	checks if we can use brtrue/brfalse to test for 0.
	* expression.cs: use the above in the test for using brtrue/brfalse.
	cleanup code a bit.

2004-03-23 Ben Maurer  <bmaurer@users.sourceforge.net>

	* expression.cs: Rewrite string concat stuff. Benefits:

	- "a" + foo + "b" + "c" becomes "a" + foo + "bc"
	- "a" + foo + "b" + bar + "c" + baz ... uses concat (string []).
	rather than a concat chain.

	* typemanager.cs: Add lookups for more concat overloads.

2004-03-23 Ben Maurer  <bmaurer@users.sourceforge.net>

	* expression.cs: Emit shorter il code for array init.

	newarr
	dup
	// set 1

	// set 2

	newarr
	stloc.x

	ldloc.x
	// set 1

	ldloc.x
	// set 2

2004-03-22 Ben Maurer  <bmaurer@users.sourceforge.net>

	* statement.cs: Before, two switch blocks would be merged if the
	total size of the blocks (end_item - begin_item + 1) was less than
	two times the combined sizes of the blocks.

	Now, it will only merge if after the merge at least half of the
	slots are filled.

	fixes 55885.

2004-03-20  Atsushi Enomoto  <atsushi@ximian.com>

	* class.cs : csc build fix for GetMethods(). See bug #52503.

2004-03-20 Ben Maurer  <bmaurer@users.sourceforge.net>

	* expression.cs: Make sure fp comparisons work with NaN.
	This fixes bug #54303. Mig approved this patch a long
	time ago, but we were not able to test b/c the runtime
	had a related bug.

2004-03-19  Miguel de Icaza  <miguel@ximian.com>

	* ecore.cs (TypExpr.GetHashCode): implement this overload. 

2004-03-19  Martin Baulig  <martin@ximian.com>

	* class.cs (MemberCore.IsDuplicateImplementation): Report the
	error here and not in our caller.

2004-03-19  Martin Baulig  <martin@ximian.com>

	* interface.cs: Completely killed this file.
	(Interface): We're now a TypeContainer and live in class.cs.

	* class.cs (TypeContainer.GetClassBases): Added `bool is_iface'
	argument; we're now also called for interfaces.
	(TypeContainer.DefineMembers): Allow this method being called
	multiple times.
	(TypeContainer.GetMethods): New public method; formerly known as
	Interface.GetMethod().  This is used by PendingImplementation.
	(TypeContainer.EmitDefaultMemberAttr): Moved here from Interface;
	it's now private and non-static.
	(Interface): Moved this here; it's now implemented similar to
	Class and Struct.
	(Method, Property, Event, Indexer): Added `bool is_interface'
	argument to their .ctor's.
	(MemberBase.IsInterface): New public field.

	* cs-parser.jay: Create normal Method, Property, Event, Indexer
	instances instead of InterfaceMethod, InterfaceProperty, etc.
	(opt_interface_base): Removed; we now use `opt_class_base' instead.
	(InterfaceAccessorInfo): Create `Get' and `Set' Accessor's.

2004-03-19  Martin Baulig  <martin@ximian.com>

	* class.cs (MethodCore.IsDuplicateImplementation): New private
	method which does the CS0111 checking.
	(Method.CheckBase, Constructor.CheckBase, PropertyBase.CheckBase):
	Use IsDuplicateImplementation().

2004-03-17 Ben Maurer  <bmaurer@users.sourceforge.net>

	* decl.cs (FindMemberToOverride): New method to find the correct
	method or property to override in the base class.
	* class.cs
	    - Make Method/Property use the above method to find the
	      version in the base class.
	    - Remove the InheritableMemberSignatureCompare as it is now
	      dead code.

	This patch makes large code bases much faster to compile, as it is
	O(n) rather than O(n^2) to do this validation.

	Also, it fixes bug 52458 which is that nested classes are not
	taken into account when finding the base class member.

	Reviewed/Approved by Martin.

2004-03-17  Marek Safar  <marek.safar@seznam.cz>

	* interface.cs: In all interface classes removed redundant
	member initialization.

2004-03-16  Martin Baulig  <martin@ximian.com>

	* class.cs (TypeContainer.GetClassBases): Fix the CS0528 check.

2004-03-15  Miguel de Icaza  <miguel@ximian.com>

	* decl.cs (DefineTypeAndParents): New helper method to define a
	type's containers before the type itself is defined;  This is a
	bug exposed by the recent changes to Windows.Forms when an
	implemented interface was defined inside a class that had not been
	built yet.   

	* modifiers.cs (MethodAttr): All methods in C# are HideBySig.

	(Check): Loop correctly to report errors modifiers
	(UNSAFE was not in the loop, since it was the same as TOP).

	* interface.cs: Every interface member now takes a ModFlags,
	instead of a "is_new" bool, which we set on the base MemberCore. 

	Every place where we called "UnsafeOk" in the interface, now we
	call the proper member (InterfaceMethod.UnsafeOK) instead to get
	the unsafe settings from the member declaration instead of the
	container interface. 

	* cs-parser.jay (opt_new): Allow unsafe here per the spec. 

	* pending.cs (TypeAndMethods): Add `get_indexer_name' and
	`set_indexer_name' to the pending bits (one per type).

	We fixed a bug today that was picking the wrong method to
	override, since for properties the existing InterfaceMethod code
	basically ignored the method name.  Now we make sure that the
	method name is one of the valid indexer names.

2004-03-14  Gustavo Giráldez  <gustavo.giraldez@gmx.net>
 
 	* support.cs (SeekableStreamReader): Keep track of stream byte
 	positions and don't mix them with character offsets to the buffer.

	Patch from Gustavo Giráldez

2004-03-15  Marek Safar  <marek.safar@seznam.cz>

	* interface.cs (InterfaceSetGetBase): Removed double member
	initialization, base class does it as well.

2004-03-13  Martin Baulig  <martin@ximian.com>

	* class.cs: Reverted Miguel's latest commit; it makes mcs crash
	when compiling corlib.

2004-03-13  Miguel de Icaza  <miguel@ximian.com>

	* convert.cs (ExplicitConversion): We were reporting an error on
	certain conversions (object_type source to a value type, when the
	expression was `null') before we had a chance to pass it through
	the user defined conversions.

	* driver.cs: Replace / and \ in resource specifications to dots.
	Fixes 50752

	* class.cs: Add check for duplicate operators.  Fixes 52477

2004-03-11  Miguel de Icaza  <miguel@ximian.com>

	* statement.cs (Switch.SimpleSwitchEmit): Deal with default labels
	that are in the middle of the statements, not only at the end.
	Fixes #54987

	* class.cs (TypeContainer.AddField): No longer set the
	`HaveStaticConstructor' flag, now we call it
	`UserDefineStaticConstructor' to diferentiate the slightly
	semantic difference.

	The situation is that we were not adding BeforeFieldInit (from
	Modifiers.TypeAttr) to classes that could have it.
	BeforeFieldInit should be set to classes that have no static
	constructor. 

	See:

	http://www.yoda.arachsys.com/csharp/beforefieldinit.html

	And most importantly Zoltan's comment:

	http://bugzilla.ximian.com/show_bug.cgi?id=44229

	"I think beforefieldinit means 'it's ok to initialize the type sometime 
	 before its static fields are used', i.e. initialization does not need
	 to be triggered by the first access to the type. Setting this flag
	 helps the JIT to compile better code, since it can run the static
	 constructor at JIT time, and does not need to generate code to call it
	 (possibly lots of times) at runtime. Unfortunately, mcs does not set
	 this flag for lots of classes like String. 
	 
	 csc sets this flag if the type does not have an explicit static 
	 constructor. The reasoning seems to be that if there are only static
	 initalizers for a type, and no static constructor, then the programmer
	 does not care when this initialization happens, so beforefieldinit
	 can be used.
	 
	 This bug prevents the AOT compiler from being usable, since it 
	 generates so many calls to mono_runtime_class_init that the AOT code
	 is much slower than the JITted code. The JITted code is faster, 
	 because it does not generate these calls if the vtable is type is
	 already initialized, which is true in the majority of cases. But the
	 AOT compiler can't do this."

2004-03-10  Miguel de Icaza  <miguel@ximian.com>

	* class.cs (MethodData.Emit): Refactor the code so symbolic
	information is generated for destructors;  For some reasons we
	were taking a code path that did not generate symbolic information
	before. 

2004-03-11 Ben Maurer  <bmaurer@users.sourceforge.net>

	* class.cs: Create a Constructor.CheckBase method that
	takes care of all validation type code. The method
	contains some code that was moved from Define.

	It also includes new code that checks for duplicate ctors.
	This fixes bug #55148.

2004-03-09  Joshua Tauberer <tauberer@for.net>

	* expression.cs (ArrayCreation): Fix: More than 6 nulls in
	a { ... }-style array creation invokes EmitStaticInitializers
	which is not good for reference-type arrays.  String, decimal
	and now null constants (NullCast) are not counted toward
	static initializers.

2004-03-05  Martin Baulig  <martin@ximian.com>

	* location.cs (SourceFile.HasLineDirective): New public field;
	specifies whether the file contains or is referenced by a "#line"
	directive.
	(Location.DefineSymbolDocuments): Ignore source files which
	either contain or are referenced by a "#line" directive.	

2004-02-29  Ben Maurer <bmaurer@users.sourceforge.net>

	* class.cs (Method.CheckBase): Avoid using FindMembers, we have
	direct access to our parent, so check the method inline there.

2004-02-27 Ben Maurer  <bmaurer@users.sourceforge.net>

	* expression.cs (Invocation.EmitCall): Miguel's last commit
	caused a regression. If you had:

	    T t = null;
	    t.Foo ();

	In Foo the implict this would be null.

2004-02-27  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (Invocation.EmitCall): If the method is not
	virtual, do not emit a CallVirt to it, use Call.

	* typemanager.cs (GetFullNameSignature): Improve the method to
	cope with ".ctor" and replace it with the type name.

	* class.cs (ConstructorInitializer.Resolve): Now the method takes
	as an argument the ConstructorBuilder where it is being defined,
	to catch the recursive constructor invocations.

2004-02-26  Miguel de Icaza  <miguel@ximian.com>

	* iterators.cs (IteratorHandler.IsIEnumerator, IsIEnumerable): New
	routines to check if a type is an enumerable/enumerator allow
	classes that implement the IEnumerable or IEnumerator interfaces.

	* class.cs (Property, Operator): Implement IIteratorContainer, and
	implement SetYields.

	(Property.Define): Do the block swapping for get_methods in the
	context of iterators.   We need to check if Properties also
	include indexers or not.

	(Operator): Assign the Block before invoking the
	OperatorMethod.Define, so we can trigger the Iterator code
	replacement. 

	* cs-parser.jay (SimpleIteratorContainer): new helper class.  Both
	Property and Operator classes are not created when we parse the
	declarator but until we have the block completed, so we use a
	singleton SimpleIteratorContainer.Simple to flag whether the
	SetYields has been invoked.

	We propagate this setting then to the Property or the Operator to
	allow the `yield' to function.

2004-02-25  Marek Safar  <marek.safar@seznam.cz>

	* codegen.cs: Implemented attribute support for modules.
	New AssemblyClass, ModuleClass and CommonAssemblyModulClass for
	Assembly/Module functionality.

	* attribute.cs, class.cs, cs-parser.jay, delegate.cs, driver.cs, enum.cs
	interface.cs, rootcontext.cs, statement.cs, typemanager.cs:
	Updated dependencies on CodeGen.ModuleBuilder and CodeGen.AssemblyBuilder.

2004-02-16  Marek Safar  <marek.safar@seznam.cz>

	* interface.cs (FindMembers): The operation is performed on all base
	interfaces and not only on the first. It is required for future CLS Compliance patch.

2004-02-12 Ben Maurer  <bmaurer@users.sourceforge.net>

	* statement.cs, codegen.cs:
	This patch deals with patterns such as:

	public class List : IEnumerable {

		public MyEnumerator GetEnumerator () {
			return new MyEnumerator(this);
		}

		IEnumerator IEnumerable.GetEnumerator () {
			...
		}
		
		public struct MyEnumerator : IEnumerator {
			...
		}
	}

	Before, there were a few things we did wrong:
	1) we would emit callvirt on a struct, which is illegal
	2) we emited ldarg when we needed to emit ldarga
	3) we would mistakenly call the interface methods on an enumerator
	type that derived from IEnumerator and was in another assembly. For example:

	public class MyEnumerator : IEnumerator

	Would have the interface methods called, even if there were public impls of the
	method. In a struct, this lead to invalid IL code.

2004-02-11  Marek Safar  <marek.safar@seznam.cz>

	* const.cs: Const is now derived from FieldBase. Method EmitConstant name
	  renamed to Emit.

	* delegate.cs (Define): Fixed crash when delegate type is undefined.

2004-02-11  Miguel de Icaza  <miguel@ximian.com>

	* cs-parser.jay: Fix small regression: we were not testing V2
	compiler features correctly.

	* interface.cs: If the emit context is null, then create one

2004-02-09  Marek Safar  <marek.safar@seznam.cz>

	* decl.cs (GetSignatureForError): New virtual method to get full name
	  for error messages.

	* attribute.cs (IAttributeSupport): New interface for attribute setting.
	  Now it is possible to rewrite ApplyAttributes method to be less if/else.

	* interface.cs : All InterfaceXXX classes are now derived from MemberCore.
	  Duplicated members and code in these classes has been removed.
	  Better encapsulation in these classes.

2004-02-07  Miguel de Icaza  <miguel@ximian.com>

	* assign.cs (Assign.DoResolve): When dealing with compound
	assignments, there is a new rule in ECMA C# 2.4 (might have been
	there before, but it is documented here) that states that in:

	a op= b;

	If b is of type int, and the `op' is a shift-operator, then the
	above is evaluated as:

	a = (int) a op b 

	* expression.cs (Binary.ResolveOperator): Instead of testing for
	int/uint/long/ulong, try to implicitly convert to any of those
	types and use that in pointer arithmetic.

	* delegate.cs (Error_NoMatchingMethodForDelegate): Compute the
	method to print information for from the type, not from the
	null-method we were given.

2004-02-01  Duncan Mak  <duncan@ximian.com>

	* cs-tokenizer.cs (get_cmd_arg): Skip over whitespace before
	parsing for cmd, fixes bug #53694.

2004-02-04  Marek Safar  <marek.safar@seznam.cz>

	* class.cs, decl.cs: Fixed problem where IndexerName attribute was ignored
	in the member name duplication tests. Property and operator name duplication
	was missing too (error tests cs0102-{2,3,4,5}.cs, cs0111-{3,4}.cs).

2004-02-03  Marek Safar  <marek.safar@seznam.cz>

	* interface.cs (PopulateMethod): Fixed crash when interface method
	returns not existing type (error test cs0246-3.cs).

2004-02-02  Ravi Pratap M <ravi@ximian.com>

	* cs-parser.jay (interface_accessors): Re-write actions to also
	store attributes attached to get and set methods. Fix spelling
	while at it.

	(inteface_property_declaration): Modify accordingly.

	(InterfaceAccessorInfo): New helper class to store information to pass
	around between rules that use interface_accessors.

	* interface.cs (Emit): Apply attributes on the get and set
	accessors of properties and indexers too.

	* attribute.cs (ApplyAttributes): Modify accordingly to use the
	right MethodBuilder when applying attributes to the get and set accessors.

2004-01-31  Miguel de Icaza  <miguel@ximian.com>

	* cs-tokenizer.cs: Applied patch from Marek Safar to fix bug 53386

2004-01-26  Miguel de Icaza  <miguel@ximian.com>

	* cs-tokenizer.cs: Handle #line hidden from PDC bits.

2004-01-25  Miguel de Icaza  <miguel@ximian.com>

	* cs-parser.jay: Remove YIELD token, instead use the new grammar
	changes that treat `yield' specially when present before `break'
	or `return' tokens.

	* cs-tokenizer.cs: yield is no longer a keyword.

2004-01-23  Marek Safar  <marek.safar@seznam.cz>

	* cs-parser.jay, class.cs (DefineDefaultConstructor): Fixed ModFlags
	setting for default constructors.
	For default constructors are almost every time set wrong Modifier. The
	generated IL code has been alright. But inside mcs this values was
	wrong and this was reason why several of my CLS Compliance tests
	failed.

2004-01-22  Martin Baulig  <martin@ximian.com>

	* cs-parser.jay (namespace_or_type_name): Return an Expression,
	not a QualifiedIdentifier.  This is what `type_name_expression'
	was previously doing.
	(type_name_expression): Removed; the code is now in
	`namespace_or_type_name'.
	(qualified_identifier): Removed, use `namespace_or_type_name'
	instead.
	(QualifiedIdentifier): Removed this class.	

2004-01-22  Martin Baulig  <martin@ximian.com>

	* namespace.cs (NamespaceEntry.UsingAlias): Take an Expression,
	not a string as alias name.

2004-01-21  Miguel de Icaza  <miguel@ximian.com>

	* ecore.cs (FieldInfo.AddressOf): Revert patch from previous
	#52730 bug, and instead compute correctly the need to use a
	temporary variable when requesting an address based on the
	static/instace modified of the field and the constructor.
 
2004-01-21  Martin Baulig  <martin@ximian.com>

	* ecore.cs (SimpleName.ResolveAsTypeStep): Lookup in the current
	class and namespace before looking up aliases.  Fixes #52517.

2004-01-21  Martin Baulig  <martin@ximian.com>

	* flowanalysis.cs (UsageVector.Merge): Allow variables being
	assinged in a 'try'; fixes exception4.cs.

2004-01-21  Marek Safar  <marek.safar@seznam.cz>
	* class.cs : Implemented parameter-less constructor for TypeContainer

	* decl.cs: Attributes are now stored here. New property OptAttributes

	* delegate.cs, enum.cs, interface.cs: Removed attribute member.

	* rootcontext.cs, tree.cs: Now use parameter-less constructor of TypeContainer

2004-01-21  Marek Safar  <marek.safar@seznam.cz>

	* typemanager.cs (CSharpSignature): Now reports also inner class name.
	  (CSharpSignature): New method for indexer and property signature.

2004-01-21  Marek Safar  <marek.safar@seznam.cz>

	* pending.cs (IsVirtualFilter): Faster implementation.

2004-01-21  Marek Safar  <marek.safar@seznam.cz>

	* typemanager.cs: Avoid inclusion of same assembly more than once.

2004-01-21  Marek Safar  <marek.safar@seznam.cz>

	* cs-parser.jay: Fixed problem where the last assembly attribute
	  has been applied also to following declaration (class, struct, etc.)
	  
2004-01-21  Marek Safar  <marek.safar@seznam.cz>

	* class.cs: Added error CS0538, CS0539 reporting.
	Fixed crash on Microsoft runtime when field type is void.

	* cs-parser.jay: Added error CS0537 reporting.

	* pending.cs: Added error CS0535 reporting.
	Improved error report for errors CS0536, CS0534.

2004-01-20  Miguel de Icaza  <miguel@ximian.com>

	Merge a few bits from the Anonymous Method MCS tree.

	* statement.cs (ToplevelBlock): New class for toplevel methods,
	will hold anonymous methods, lifted variables.

	* cs-parser.jay: Create toplevel blocks for delegates and for
	regular blocks of code. 

2004-01-20  Martin Baulig  <martin@ximian.com>

	* codegen.cs (EmitContext): Removed `InTry', `InCatch',
	`InFinally', `InLoop', `TryCatchLevel', `LoopBeginTryCatchLevel'
	and `NeedExplicitReturn'; added `IsLastStatement'.
	(EmitContext.EmitTopBlock): Emit the explicit "ret" if we either
	have a `ReturnLabel' or we're not unreachable.

	* flowanalysis.cs (FlowBranching.MergeChild): Actually merge the
	child's reachability; don't just override ours with it.  Fixes
	#58058 (lluis's example).
	(FlowBranching): Added public InTryOrCatch(), InCatch(),
	InFinally(), InLoop(), InSwitch() and
	BreakCrossesTryCatchBoundary() methods.

	* statement.cs (Return): Do all error checking in Resolve().
	Unless we are the last statement in a top-level block, always
	create a return label and jump to it.
	(Break, Continue): Do all error checking in Resolve(); also make
	sure we aren't leaving a `finally'.
	(Block.DoEmit): Set `ec.IsLastStatement' when emitting the last
	statement in a top-level block.
	(Block.Flags): Added `IsDestructor'.
	(Block.IsDestructor): New public property.

2004-01-20  Martin Baulig  <martin@ximian.com>

	* statement.cs (Break.DoEmit): Set ec.NeedExplicitReturn; fixes #52427.

2004-01-20  Martin Baulig  <martin@ximian.com>

	* statement.cs (Statement.ResolveUnreachable): New public method.
	(If, While): Do the dead-code elimination in Resolve(), not in Emit().
	(Block.Resolve): Resolve unreachable statements.

2004-01-19 Ben Maurer  <bmaurer@users.sourceforge.net>

	* expression.cs: We need to fix the case where we do
	not have a temp variable here.

	* assign.cs: Only expression compound assignments need
	temporary variables.

2004-01-19 Ben Maurer  <bmaurer@users.sourceforge.net>

	* flowanalysis.cs: Reduce memory allocation in a few ways:
	  - A block with no variables should not allocate a bit
	    vector for itself.
	  - A method with no out parameters does not need any tracking
	    for assignment of the parameters, so we need not allocate
	    any data for it.
	  - The arrays:
	        public readonly Type[] VariableTypes;
		public readonly string[] VariableNames;
	    Are redundant. The data is already stored in the variable
	    map, so we need not allocate another array for it.
	  - We need to add alot of checks for if (params | locals) == null
	    due to the first two changes.

2004-01-18  Miguel de Icaza  <miguel@ximian.com>

	* ecore.cs (FieldExpr.AddressOf): For ValueTypes that do not
	implement IMemoryLocation, we store a copy on a local variable and
	take the address of it.  Patch from Benjamin Jemlich

	* cs-parser.jay: Applied patch from Ben Maurer to the "type" rule
	to use a special "type_name_expression" rule which reduces the
	number of "QualifiedIdentifier" classes created, and instead
	directly creates MemberAccess expressions.

2004-01-17  Miguel de Icaza  <miguel@ximian.com>

	* convert.cs: Applied patch from Benjamin Jemlich (pcgod@gmx.net)
	that fixes #52853.  Null literal assignment to ValueType

	* class.cs (MethodData.Emit): Instead of checking the name of the
	method to determine if its a destructor, create a new derived
	class from Method called Destructor, and test for that.  

	* cs-parser.jay: Create a Destructor object instead of a Method.  

	Based on a fix from Benjamin Jemlich (pcgod@gmx.net)

	Fixes: 52933

2004-01-16  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (Binary.ResolveOperator): Perform an implicit
	conversion from MethodGroups to their delegate types on the
	Addition operation.

	* delegate.cs: Introduce a new class DelegateCreation that is the
	base class for `NewDelegate' and `ImplicitDelegateCreation',
	factor some code in here.

	* convert.cs (Convert.ImplicitConversionStandard): Add an implicit
	conversion from MethodGroups to compatible delegate types. 

	* ecore.cs (Expression.Resolve): Do not flag error 654
	(Methodgroupd needs parenthesis) if running on the V2 compiler, as
	we allow conversions from MethodGroups to delegate types now.

	* assign.cs (Assign.DoResolve): Do not flag errors on methodgroup
	assignments in v2 either.

2004-01-10  Miguel de Icaza  <miguel@ximian.com>

	* ecore.cs (FieldExpr.AddressOf): Fix generated IL for accessing
	static read-only fields in ctors.

	Applied patch from Benjamin Jemlich 

	* expression.cs (UnaryMutator): Avoid leaking local variables. 

2004-01-09  Miguel de Icaza  <miguel@ximian.com>

	* cs-tokenizer.cs (IsCastToken): Allow the various native types
	here to return true, as they can be used like this:

		(XXX) int.MEMBER ()

	Fixed 49836 and all the other dups

2004-01-09  Zoltan Varga  <vargaz@freemail.hu>

	* driver.cs: Implement /win32res and /win32icon.

2004-01-08  Miguel de Icaza  <miguel@ximian.com>

	* cs-parser.jay: Add a rule to improve error handling for the
	common mistake of placing modifiers after the type.

2004-01-07  Miguel de Icaza  <miguel@ximian.com>

	* cs-parser.jay (interface_event_declaration): Catch
	initialization of events on interfaces, and report cs0068

	* cs-parser.jay (interface_event_declaration): Catch
	initialization of events. 

	* ecore.cs: Better report missing constructors.

	* expression.cs (Binary.ResolveOperator): My previous bug fix had
	the error reporting done in the wrong place.  Fix.

	* expression.cs (Binary.ResolveOperator): Catch the 
	operator + (E x, E y) error earlier, and later allow for implicit
	conversions in operator +/- (E e, U x) from U to the underlying
	type of E.

	* class.cs (TypeContainer.DefineDefaultConstructor): Fix bug
	52596, if the container class is abstract, the default constructor
	is protected otherwise its public (before, we were always public).

	* statement.cs (Fixed.Resolve): Catch a couple more errors in the
	fixed statement.

	(Using.EmitLocalVariableDecls): Applied patch from Benjamin
	Jemlich that fixes bug #52597, MCS was generating invalid code for
	idisposable structs.   Thanks to Ben for following up with this
	bug as well.

2004-01-06  Miguel de Icaza  <miguel@ximian.com>

	* driver.cs: Allow assemblies without code to be generated, fixes
	52230.

2004-01-07  Nick Drochak <ndrochak@gol.com>

	* attribute.cs: Remove unneeded catch variables. Eliminates a warning.

2004-01-05  Miguel de Icaza  <miguel@ximian.com>

	* cs-parser.jay: Add rules to improve error reporting if fields or
	methods are declared at the namespace level (error 116)

	* Add rules to catch event add/remove

2004-01-04  David Sheldon <dave-mono@earth.li>

  * expression.cs: Added matching ")" to error message for 
  CS0077

2004-01-03 Todd Berman <tberman@gentoo.org>

	* ecore.cs, attribute.cs:
	Applying fix from #52429.

2004-01-03 Ben Maurer  <bmaurer@users.sourceforge.net>

	* ecore.cs, expression.cs, statement.cs:
	Total rewrite of how we handle branching. We
	now handle complex boolean expressions with fewer
	jumps. As well if (x == 0) no longer emits a ceq.

	if (x is Foo) is much faster now, because we generate
	better code.

	Overall, we get a pretty big improvement on our benchmark
	tests. The code we generate is smaller and more readable.

	I did a full two-stage bootstrap. The patch was reviewed
	by Martin and Miguel.

2004-01-03 Ben Maurer  <bmaurer@users.sourceforge.net>

	* cs-parser.jay: Make primary_expression not take a QI.
	we dont need this because the member_access rule covers
	us here. So we replace the rule with just IDENTIFIER.

	This has two good effects. First, we remove a s/r conflict.
	Second, we allocate many fewer QualifiedIdentifier objects.

2004-01-03 Ben Maurer  <bmaurer@users.sourceforge.net>

	* attribute.cs: Handle MarshalAs attributes as pseudo, and
	set the correct information via SRE. This prevents
	hanging on the MS runtime. Fixes #29374.

2004-01-03 Ben Maurer  <bmaurer@users.sourceforge.net>

	* convert.cs: correctly handle conversions to value types
	from Enum and ValueType as unboxing conversions.

	Fixes bug #52569. Patch by Benjamin Jemlich.

2004-01-02  Ravi Pratap  <ravi@ximian.com>

	* expression.cs (BetterConversion): Prefer int -> uint
	over int -> ulong (csc's behaviour). This fixed bug #52046.

2004-01-02 Ben Maurer  <bmaurer@users.sourceforge.net>

	* decl.cs (MemberCache.FindMembers): now returns a
	MemberInfo [].

	* typemanager.cs: In general, go with with ^^.
	(CopyNewMethods): take an IList.
	(RealMemberLookup): Only allocate an arraylist
	if we copy from two sets of methods.

	This change basically does two things:
	1) Fewer array lists allocated due to CopyNewMethods.
	2) the explicit cast in MemberList costed ALOT.

2004-01-02  Zoltan Varga  <vargaz@freemail.hu>

	* cs-tokenizer.cs (consume_identifier) driver.cs: Cache identifiers in
	a hashtable to avoid needless string allocations when an identifier is
	used more than once (the common case).

2004-01-01 Ben Maurer  <bmaurer@users.sourceforge.net>

	* pending.cs: MS's TypeBuilder.GetInterfaces ()
	is broken, it will not return anything. So, we
	have to use the information we have in mcs to
	do the task.

	* typemanager.cs: Add a cache for GetInterfaces,
	since this will now be used more often (due to ^^)

	(GetExplicitInterfaces) New method that gets the
	declared, not effective, interfaces on a type
	builder (eg, if you have interface IFoo, interface
	IBar, Foo : IFoo, Bar : Foo, IBar, GetExplInt (Bar) ==
	{ IBar }.

	This patch makes MCS able to bootstrap itself on
	Windows again.

2004-01-01 Ben Maurer  <bmaurer@users.sourceforge.net>

	* expression.cs: Remove the Nop's that Miguel put
	in by mistake.

2003-12-31 Ben Maurer  <bmaurer@users.sourceforge.net>

	* report.cs, codegen.cs: Give the real stack trace to
	the error when an exception is thrown.

2003-12-31 Ben Maurer  <bmaurer@users.sourceforge.net>

	* decl.cs: only allocate hashtables for ifaces if 
	it is an iface!

2003-12-31 Ben Maurer  <bmaurer@users.sourceforge.net>

	* expression.cs: fix the error from cs0121-2.cs
	(a parent interface has two child interfaces that
	have a function with the same name and 0 params
	and the function is called through the parent).

2003-12-30 Ben Maurer  <bmaurer@users.sourceforge.net>

	* class.cs, rootcontext.cs, typmanager.cs: do not
	leak pointers.

2003-12-28 Ben Maurer  <bmaurer@users.sourceforge.net>

	* codegen.cs: remove stack for the ec flow branching.
	It is already a linked list, so no need.

2003-12-27 Ben Maurer  <bmaurer@users.sourceforge.net>

	* Makefile: Allow custom profiler here.

2003-12-26 Ben Maurer  <bmaurer@users.sourceforge.net>

	* typemanager.cs (LookupType):
	  - Use a static char [], because split takes
	    a param array for args, so it was allocating
	    every time.
	  - Do not store true in a hashtable, it boxes.

2003-12-26 Ben Maurer  <bmaurer@users.sourceforge.net>

	* flowanalysis.cs: bytify common enums.

2003-12-25 Ben Maurer  <bmaurer@users.sourceforge.net>

	* modifiers.cs: Add a new set of flags for the
	flags allowed on explicit interface impls.
	* cs-parser.jay: catch the use of modifiers in
	interfaces correctly.
	* class.cs: catch private void IFoo.Blah ().

	All related to bug #50572.

2003-12-25 Ben Maurer  <bmaurer@users.sourceforge.net>

	* decl.cs: Rewrite the consistant accessability checking.
	Accessability is not linear, it must be implemented in
	a tableish way. Fixes #49704.

2003-12-25 Ben Maurer  <bmaurer@users.sourceforge.net>

	* expression.cs: Handle negation in a checked context.
	We must use subtraction from zero. Fixes #38674.

2003-12-23 Ben Maurer  <bmaurer@users.sourceforge.net>

	* class.cs: Ignore static void main in DLLs.
	* rootcontext.cs: Handle the target type here,
	since we are have to access it from class.cs
	* driver.cs: account for the above.

2003-12-23 Ben Maurer  <bmaurer@users.sourceforge.net>

	* report.cs: Give line numbers and files if available.

2003-12-20  Zoltan Varga  <vargaz@freemail.hu>

	* driver.cs: Implement /addmodule.

	* typemanager.cs:  Change 'modules' field so it now contains Modules not
	ModuleBuilders.

2003-12-20  Martin Baulig  <martin@ximian.com>

	* class.cs (TypeContainer.DefineMembers): Don't do the CS0649 check here.
	(FieldBase.IsAssigned): Removed this field.
	(FieldBase.SetAssigned): New public method.
	(TypeContainer.Emit): Make the CS0169/CS0649 checks actually work.

2003-12-20  Martin Baulig  <martin@ximian.com>

	* expression.cs (LocalVariableReference.DoResolve): Don't set
	`vi.Used' if we're called from DoResolveLValue().

	* statement.cs (Block.DoResolve): `ec.DoEndFlowBranching()' now
	returns the usage vector it just merged into the current one -
	pass this one to UsageWarning().
	(Block.UsageWarning): Take the `FlowBranching.UsageVector' instead
	of the `EmitContext', don't call this recursively on our children.

2003-12-19  Zoltan Varga  <vargaz@freemail.hu>

	* driver.cs: Implement /target:module.

2003-12-18  Zoltan Varga  <vargaz@freemail.hu>

	* support.cs (CharArrayHashtable): New helper class.

	* cs-tokenizer.cs: Store keywords in a hashtable indexed by 
	char arrays, not strings, so we can avoid creating a string in
	consume_identifier if the identifier is a keyword.

2003-12-16  Martin Baulig  <martin@ximian.com>

	* statement.cs (LocalInfo.Assigned): Removed this property.
	(LocalInfo.Flags): Removed `Assigned'.
	(LocalInfo.IsAssigned): New public method; takes the EmitContext
	and uses flow analysis.
	(Block.UsageWarning): Made this method private.
	(Block.Resolve): Call UsageWarning() if appropriate.

	* expression.cs (LocalVariableReference.DoResolve): Always set
	LocalInfo.Used here.

2003-12-13  Martin Baulig  <martin@ximian.com>

	* statement.cs (Statement.DoEmit, Statement.Emit): Don't return
	any value here; we're now using flow analysis to figure out
	whether a statement/block returns a value.

2003-12-13  Martin Baulig  <martin@ximian.com>

	* flowanalysis.cs (UsageVector.MergeFinallyOrigins): Made this
	working again.
	(FlowBranching.MergeFinally): Don't call
	`branching.CheckOutParameters()' here, this is called in
	MergeTopBlock().
	(FlowBranchingException.AddSibling): Call MergeFinallyOrigins()
	when adding the `finally' vector.	

2003-12-13  Martin Baulig  <martin@ximian.com>

	* flowanalysis.cs
	(UsageVector.MergeJumpOrigins, FlowBranching.Label): Make this
	actually work and also fix #48962.

2003-12-12 Ben Maurer  <bmaurer@users.sourceforge.net>

	* decl.cs: Do not check System.Object for nested types,
	since we know it does not have any. Big bang for buck:

	BEFORE:
	   Run 1:   8.35 seconds
	   Run 2:   8.32 seconds
	   corlib:  17.99 seconds
	AFTER:
	   Run 1:   8.17 seconds
	   Run 2:   8.17 seconds
	   corlib:  17.39 seconds

2003-12-11 Ben Maurer  <bmaurer@users.sourceforge.net>

	* class.cs (FindMembers): Allocate arraylists on demand. Most of the
	time we are returning 0 members, so we save alot here.

2003-12-11  Martin Baulig  <martin@ximian.com>

	* flowanalysis.cs (UsageVector.MergeResult): Renamed this back to
	`MergeChild()', also just take the `FlowBranching' as argument;
	call Merge() on it and return the result.
	(FlowBranching.Merge): We don't need to do anything if we just
	have one sibling.

2003-12-11  Martin Baulig  <martin@ximian.com>

	* flowanalysis.cs: Use a list of `UsageVector's instead of storing
	them in an `ArrayList' to reduce memory usage.  Thanks to Ben
	Maurer for this idea.

2003-12-11  Martin Baulig  <martin@ximian.com>

	* flowanalysis.cs (MergeResult): This class is now gone; we now
	use the `UsageVector' for this.  The reason for this is that if a
	branching just has one sibling, we don't need to "merge" them at
	all - that's the next step to do.
	(FlowBranching.Merge): We now return a `UsageVector' instead of a
	`MergeResult'.

2003-12-11  Martin Baulig  <martin@ximian.com>

	Reworked flow analyis and made it more precise and bug-free.  The
	most important change is that we're now using a special `Reachability'
	class instead of having "magic" meanings of `FlowReturns'.  I'll
	do some more cleanups and optimizations and also add some more
	documentation this week.

	* flowanalysis.cs (Reachability): Added `Throws' and `Barrier';
	largely reworked this class.
	(FlowReturns): Removed `Unreachable' and `Exception'; we now use
	the new `Reachability' class instead of having "magic" values here.
	(FlowBranching): We're now using an instance of `Reachability'
	instead of having separate `Returns', `Breaks' etc. fields.

	* codegen.cs (EmitContext.EmitTopBlock): Set `has_ret' solely
	based on flow analysis; ignore the return value of block.Emit ().

2003-12-10  Zoltan Varga  <vargaz@freemail.hu>

	* driver.cs typemanager.cs: Find the mono extensions to corlib even
	if they are private.

2003-12-09  Martin Baulig  <martin@ximian.com>

	* flowanalyis.cs (FlowBranching.Return, Goto, Throw): Removed;
	call them directly on the UsageVector.

2003-12-09  Martin Baulig  <martin@ximian.com>

	* flowanalysis.cs (FlowBranching.MergeChild, MergeTopBlock):
	Changed return type from `FlowReturns' to `Reachability'.

2003-12-09  Martin Baulig  <martin@ximian.com>

	* flowanalysis.cs (FlowBranching.Reachability): New sealed class.
	(FlowBranching.MergeResult): Replaced the `Returns', `Breaks' and
	`Reachable' fields with a single `Reachability' one.

2003-12-08 Ben Maurer  <bmaurer@users.sourceforge.net>

	* class.cs (FindMembers): Remove foreach's.

	Bootstrap times:

	BEFORE
		Run 1:   8.74 seconds
		Run 2:   8.71 seconds

	AFTER
		Run 1:   8.64 seconds
		Run 2:   8.58 seconds


2003-12-08 Ben Maurer  <bmaurer@users.sourceforge.net>

	* cs-parser.jay:
	* gen-treedump.cs:
	* statement.cs:
	This patch does a few things:
		1. EmptyStatement is now a singleton, so it is never reallocated.
		2. All blah is EmptyStatement constructs have been changed to
		   blah == EmptyStatement.Value, which is much faster and valid
		   now that EmptyStatement is a singleton.
		3. When resolving a block, rather than allocating a new array for
		   the non-empty statements, empty statements are replaced with
		   EmptyStatement.Value
		4. Some recursive functions have been made non-recursive.
	Mainly the performance impact is from (3), however (1) and (2) are needed for
	this to work. (4) does not make a big difference in normal situations, however
	it makes the profile look saner.

	Bootstrap times:

	BEFORE
	9.25user 0.23system 0:10.28elapsed 92%CPU (0avgtext+0avgdata 0maxresident)k
	9.34user 0.13system 0:10.23elapsed 92%CPU (0avgtext+0avgdata 0maxresident)k
	Total memory allocated: 56397 KB

	AFTER
	9.13user 0.09system 0:09.64elapsed 95%CPU (0avgtext+0avgdata 0maxresident)k
	8.96user 0.24system 0:10.13elapsed 90%CPU (0avgtext+0avgdata 0maxresident)k
	Total memory allocated: 55666 KB

2003-12-08 Ben Maurer  <bmaurer@users.sourceforge.net>

	* support.cs: Rewrite DoubleHash to use its own impl. Is faster
	than the hashtable in a hashtable version

	* decl.cs: Right now, whenever we try to lookup a type inside a namespace,
	we always end up concating a string. This results in a huge perf
	loss, because many strings have to be tracked by the GC. In this
	patch, we first use a hashtable that works with two keys, so that
	the strings do not need to be concat'ed.

	Bootstrap times:
	BEFORE
		Run 1:   8.74 seconds
		Run 2:   8.71 seconds

	AFTER
		Run 1:   8.65 seconds
		Run 2:   8.56 seconds

2003-12-08 Ben Maurer  <bmaurer@users.sourceforge.net>

	* Makefile: Add a new target `do-time' that does a quick and simple
	profile, leaving easy to parse output.

2003-12-08  Zoltan Varga  <vargaz@freemail.hu>

	* codegen.cs (Init): Create the dynamic assembly with 
	AssemblyBuilderAccess.Save, to enable some optimizations in the runtime.

2003-12-02 Ben Maurer  <bmaurer@users.sourceforge.net>

	* support.cs: Make the PtrHashtable use only one
	instance of its comparer.

2003-11-30  Zoltan Varga  <vargaz@freemail.hu>

	* typemanager.cs: Fix lookup of GetNamespaces.

2003-11-29  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs: Removed redundant line.

	* statement.cs (Block.Resolve, Block.Emit): Avoid foreach on
	ArrayLists, use for loops with bounds.  

	* flowanalysis.cs (FlowBranching.Merge): Avoid foreach on
	arraylist.

	* expression.cs (Invocation.OverloadResolve): Avoid foreach on
	arraylists, use for loop with bounds.

	The above three changes give us a 0.071 second performance
	improvement out of 3.294 seconds down to 3.223.  On my machine
	the above changes reduced the memory usage by 1,387 KB during
	compiler bootstrap.

	* cs-parser.jay (QualifiedIdentifier): New class used to represent
	QualifiedIdentifiers.  Before we created a new string through
	concatenation, and mostly later on, the result would be
	manipulated by DecomposeQI through string manipulation.

	This reduced the compiler memory usage for bootstrapping from
	59380 KB to 59007 KB on my machine, 373 KB, and also reduced the
	compile times in 0.05 seconds.

2003-11-28  Dick Porter  <dick@ximian.com>

	* support.cs: Do string compares with the Invariant culture.

	* rootcontext.cs: 
	* gen-treedump.cs: 
	* expression.cs: 
	* driver.cs: 
	* decl.cs: 
	* codegen.cs: 
	* class.cs: Use the char forms of IndexOf and LastIndexOf, so that
	the comparison is done with the Invariant culture.

2003-11-27  Miguel de Icaza  <miguel@ximian.com>

	* statement.cs (Foreach.TryType): Use DeclaredOnly to find the
	GetEnumerator method.

	(ProbeCollectionType): Iterate starting at the most specific type
	upwards looking for a GetEnumerator

	* expression.cs: Shift count can be up to 31 for int/uint and 63
	for long/ulong.

2003-11-26  Miguel de Icaza  <miguel@ximian.com>

	* statement.cs (Block.LookupLabel): Also look for the label on the
	children blocks.  Use a hash table to keep track of visited
	nodes. 

	* cfold.cs (IntConstant to UIntConstant mapping): Only return if
	we actually did transform the other operand, otherwise fall back
	to the common codepath that casts to long.

	* cs-tokenizer.cs: Use the same code pattern as the int case.
	Maybe I should do the parsing myself, and avoid depending on the
	Parse routines to get this done.

2003-11-25  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs: Apply fix from l_m@pacbell.net (Laurent Morichetti),  
	which fixes bug 51347.  This time test it.

	* expression.cs: Make TypeOfVoid derive from TypeOf, so code in
	attributes for example can not tell the difference between these.
	The difference was only a syntax feature of the language. 

	* attribute.cs: Apply attributes to delegates.

	* delegate.cs: Call the apply attributes method.

2003-11-24  Miguel de Icaza  <miguel@ximian.com>

	* convert.cs (TryImplicitIntConversion): One line bug fix: we were
	comparing 0 vs Byte.MinValue, not the value

	(ImplicitConversionRequired): When reporting a conversion error,
	use error 31 to print out the constant error instead of the
	simpler 29.

	* expression.cs: Apply fix from l_m@pacbell.net (Laurent Morichetti),  
	which fixes bug 51347.

2003-11-22  Miguel de Icaza  <miguel@ximian.com>

	* driver.cs: Applied patch from gert.driesen@pandora.be (Gert Driesen) 
	which fixes the -warnaserror command line option.

2003-11-21  Miguel de Icaza  <miguel@ximian.com>

	* cfold.cs (DoNumericPromotions): During constant folding of
	additions on UIntConstant, special case intconstants with
	IntConstants like we do on the expression binary operator. 

2003-11-12  Miguel de Icaza  <miguel@ximian.com>

	* convert.cs (ImplicitReferenceConversion): We were missing a case
	(System.Enum are not value types or class types, so we need to
	classify them separatedly).

	* driver.cs: We do not support error 2007.

2003-11-12 Jackson Harper <jackson@ximian.com>

	* driver.cs: Use corlib.dll or mscorlib.dll when looking up the
	system directory. Also use the full file name so users can
	libraries names mscorlib-o-tron.dll in a non system dir.

2003-11-10  Martin Baulig  <martin@ximian.com>

	* typemanager.cs (TypeManager.ResolveExpressionTypes): Removed.
	(TypeManager.InitCoreTypes): Initialize them here, but instead of
	calling `ResolveType()' on them, directly assign their `Type'.

2003-11-08  Martin Baulig  <martin@ximian.com>

	* class.cs (TypeContainer.GetClassBases): Use TypeExpr's for the
	return value and the `out parent' parameter.
	(TypeContainer.DefineType): Moved the CS0644 check into
	GetClassBases().  Don't pass the interface types to the
	`builder.DefineType()'/`builder.DefineNestedType()', but resolve
	them later and then call `TypeBuilder.AddInterfaceImplementation()'.

	* ecore.cs (TypeExpr.IsAttribute): New property.
	(TypeExpr.GetInterfaces): New method.

	* interface.cs (Interface.GetInterfaceTypeByName): Return a
	TypeExpr instead of a Type.
	(Interface.GetInterfaceBases): Return TypeExpr's instead of Type's.
	(Interface.DefineType): Don't pass the interface types to the
	`builder.Definetype()'/`builder.DefineNestedType()', but resolve
	them later and then call `TypeBulider.AddInterfaceImplementation()'.

	* typemanager.cs (TypeManager.AddUserType): Take a `TypeExpr[]'
	instead of a `Type[]'.
	(TypeManager.RegisterBuilder): Likewise.
	(TypeManager.AddUserInterface): Likewise.
	(TypeManager.ExpandInterfaces): Take a `Type[]' instead of a
	`Type[]' and also return a `TypeExpr[]'.
	(TypeManager.GetInterfaces): Return a `TypeExpr[]'.

2003-11-08  Martin Baulig  <martin@ximian.com>

	* decl.cs (DeclSpace.ResolveTypeExpr): Return a TypeExpr, not an
	Expression.	

2003-11-08  Martin Baulig  <martin@ximian.com>

	* decl.cs (DeclSpace.GetTypeResolveEmitContext): Call
	TypeManager.ResolveExpressionTypes().

	* ecore.cs (Expression.ResolveAsTypeTerminal): Return a TypeExpr
	instead of an Expression.
	(TypeExpr): This is now an abstract base class for `TypeExpression'.
	(TypeExpression): New public class; formerly known as `TypeExpr'.

	* expression.cs (ComposedCast): Derive from TypeExpr.

	* typemanager.cs (TypeManager.system_*_expr): These are now
	TypExpr's instead of Expression's.
	(TypeManager.ResolveExpressionTypes): New public static function;
	called from DeclSpace.GetTypeResolveEmitContext() to resolve all
	of them.	

2003-11-06  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (New.DoResolve): Do not dereference value that
	might be a null return.

	* statement.cs (Block.EmitMeta): Use the Const.ChangeType to make
	sure that the constant value has the right type.  Fixes an
	unreported bug, similar to 50425.

	* const.cs (Const.LookupConstantValue): Call
	ImplicitStandardConversionExists before doing a conversion to
	avoid havng the TypeManager.ChangeType do conversions.

	Reduced the number of casts used

	(Const.ChangeType): New routine to enable reuse of the constant
	type changing code from statement.

	* typemanager.cs (ChangeType): Move common initialization to
	static global variables.

	Fixes #50425.

	* convert.cs (ImplicitReferenceConversion): Somehow we allowed
	every value type to go through, even if it was void.  Fix that. 

	* cs-tokenizer.cs: Use is_identifier_start_character on the start
	character of the define, and the is_identifier_part_character for
	the rest of the string.

2003-11-05  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (UnaryMutator.EmitCode): When I updated
	LocalVariableReference.DoResolve, I overdid it, and dropped an
	optimization done on local variable references.

2003-11-04  Miguel de Icaza  <miguel@ximian.com>

	* ecore.cs: Convert the return from Ldlen into an int.

2003-10-20  Miguel de Icaza  <miguel@ximian.com>

	* decl.cs (DeclSpace.GetAccessLevel): Handle NotPublic case for
	the accessibility, this is a special case for toplevel non-public
	classes (internal for instance).

2003-10-20  Nick Drochak <ndrochak@gol.com>

	* ecore.cs: Fix typo and build.  Needed another right paren.

2003-10-19  Miguel de Icaza  <miguel@ximian.com>

	* ecore.cs: Applied fix from Ben Maurer.   We were handling in the
	`internal' case regular and protected, but not allowing protected
	to be evaluated later.  Bug 49840

2003-10-15  Miguel de Icaza  <miguel@ximian.com>

	* statement.cs (Switch.TableSwitchEmit): Compare the upper bound
	to kb.Nlast, and not the kb.nFirst to isolate the switch
	statement.

	Extract the underlying type, so enumerations of long/ulong are
	treated like long/ulong.

2003-10-14  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (New): Overload the meaning of RequestedType to
	track the possible creation of the NewDelegate type, since
	DoResolve is invoked more than once for new constructors on field
	initialization.

	See bugs: #48800 and #37014

	* cs-parser.jay (declare_local_constants): Take an arraylist
	instead of a single constant.

	(local_constant_declaration): It should take a
	constant_declarators, not a constant_declarator.  Fixes 49487

	* convert.cs: Fix error report.

2003-10-13 Jackson Harper <jackson@ximian.com>

	* typemanager.cs (TypeToCoreType): Add float and double this fixes
	bug #49611

2003-10-09  Martin Baulig  <martin@ximian.com>

	* class.cs (MethodCore): Added additional `DeclSpace ds' argument
	to the .ctor.
	(MethodCore.DoDefineParameters): Removed the TypeContainer
	argument; use the DeclSpace which was passed to the .ctor instead.
	(MethodCore.CheckParameter): Take a DeclSpace instead of a
	TypeContainer; we only need a DeclSpace here.

2003-10-09  Martin Baulig  <martin@ximian.com>

	* class.cs (MethodData): Added additional `DeclSpace ds' argument
	to the .ctor.
	(MethodData.Define, MethodData.Emit): Pass the `ds' to the
	EmitContext's .ctor.	

2003-10-09  Martin Baulig  <martin@ximian.com>

	* decl.cs (DeclSpace.AsAccessible): Moved here from TypeContainer.
	(AccessLevel, CheckAccessLevel, GetAccessLevel): They're used by
	AsAccessible(), moved them as well.

	* class.cs (TypeContainer.AsAccessible): Moved to DeclSpace.

2003-10-08  Atsushi Enomoto <ginga@kit.hi-ho.ne.jp>

	* cs-parser.jay : Renamed yyName to yyNames related to jay.

2003-10-07  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (Binary.Emit.GreatherThanOrEqual): Fix the code
	generation for >=, as spotted by Paolo, bug 48679.  
	Patch from David Waite.

	* cs-tokenizer.cs: Add handling for #pragma.

	* cs-parser.jay: Allow for both yield and yield return in the
	syntax.  The anti-cobolization of C# fight will go on!

	* class.cs (TypeBuilder.DefineType): Catch error condition here
	(Parent.DefineType erroring out and returning null).

	* expression.cs (ArrayCreation.EmitDynamicInitializers): When
	coping with enumerations variables, we were mistakenly processing
	them as a regular value type instead of built-in types.  Fixes the
	bug #48063

	* typemanager.cs (IsBuiltinOrEnum): New method.

2003-09-30  Miguel de Icaza  <miguel@ximian.com>

	* cs-parser.jay: Upgrade: yield now needs the return clause.

2003-09-19  Martin Baulig  <martin@ximian.com>

	* decl.cs (MemberCache.SetupCacheForInterface): Take a
	`MemberCache parent' argument.  Normally, an interface doesn't
	have a parent type except System.Object, but we use this in gmcs
	for generic type parameters.

2003-09-18  Martin Baulig  <martin@ximian.com>

	* typemanager.cs (TypeHandle.ctor): Set `IsInterface' solely based
	on `type.IsInterface'; don't check whether the type has a parent
	to determine whether it's an interface.

2003-09-15  Martin Baulig  <martin@ximian.com>

	* class.cs (TypeContainer.DefineType): Added an error flag to
	avoid reporting duplicate CS0146's ("class definition is
	circular.").

	* driver.cs (Driver.MainDriver): Abort if
	RootContext.ResolveTree() reported any errors.

2003-09-07  Martin Baulig  <martin@ximian.com>

	* report.cs (Error, Warning): Added overloaded versions which take
	a `params object[] args' and call String.Format().

2003-09-07  Martin Baulig  <martin@ximian.com>

	* decl.cs (DeclSpace..ctor): Don't call
	NamespaceEntry.DefineName() here; do it in RecordDecl() which is
	called from Tree.RecordDecl().  Fixes the CS0101 reporting.
	(DeclSpace.RecordDecl): New method.

	* tree.cs (Tree.RecordDecl): Call ds.RecordDecl().

2003-09-02  Ravi Pratap  <ravi@ximian.com>

	* attribute.cs (CheckAttributeTarget): Ensure that we allow return
	value attributes to be applied to ParameterBuilders.

	* class.cs (MethodCore.LabelParameters): Make static and more
	generic so that it can be used from other places - like interface
	methods, for instance.

	* interface.cs (Interface.Emit): Call LabelParameters before
	emitting attributes on the InterfaceMethod.

2003-08-26  Martin Baulig  <martin@ximian.com>

	* ecore.cs (SimpleName.SimpleNameResolve): Look for members before
	resolving aliases; fixes #47927.

2003-08-26  Martin Baulig  <martin@ximian.com>

	* statement.cs (Using.DoResolve): This is internally emitting a
	try/finally clause, so we need to set ec.NeedExplicitReturn if we
	do not always return.  Fixes #47681.

2003-08-26  Martin Baulig  <martin@ximian.com>

	* decl.cs (MemberCore): Moved WarningNotHiding(),
	Error_CannotChangeAccessModifiers() and CheckMethodAgainstBase()
	into MemberBase.
	(AdditionResult): Make this nested in DeclSpace.
	(DeclSpace.ctor): The .ctor now takes an additional NamespaceEntry
	argument; call NamespaceEntry.Define() unless we're nested in a
	class or struct.

	* namespace.cs (Namespace.DefineName): New public function.  This
	is called from DeclSpace's .ctor to add 
	(Namespace.Lookup): Include DeclSpaces in the lookup.

	* class.cs (Operator): Derive from MemberBase, not MemberCore.

	* const.cs (Const): Derive from MemberBase, not MemberCore.	

2003-08-25  Martin Baulig  <martin@ximian.com>

	* convert.cs (Convert.ExplicitReferenceConversion): When
	converting from an interface type to a class, unbox if the target
	type is a struct type.  Fixes #47822.

2003-08-24  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* typemanager.cs: fixed the values of MethodFlags. Closes #47855 and
	#47854.

2003-08-22  Martin Baulig  <martin@ximian.com>

	* class.cs (TypeManager.DefineType): When defining a nested type,
	call DefineType() on our parent; fixes #47801.

2003-08-22  Martin Baulig  <martin@ximian.com>

	* class.cs (MethodData.Define): While checking if a method is an
	interface implementation, improve the test a bit more to fix #47654.

2003-08-22  Martin Baulig  <martin@ximian.com>

	* expression.cs (Probe.DoResolve): Check whether `expr' resolved
	correctly; fixes #47722.

2003-08-22  Martin Baulig  <martin@ximian.com>

	* expression.cs (UnaryMutator.ResolveVariable): If the target is a
	LocalVariableReference, ensure it's not read-only.  Fixes #47536.

	* statement.cs (Fixed.DoResolve): Make all variables read-only.	

2003-08-22  Martin Baulig  <martin@ximian.com>

	* ecore.cs (FieldExpr.DoResolveLValue): Static read-only fields
	can only be assigned in static constructors.  Fixes #47161.

2003-08-22  Martin Baulig  <martin@ximian.com>

	Rewrote and improved the flow analysis code.

	* flowbranching.cs (FlowBranching): Make this class abstract.
	(FlowBranching.CreateBranching): New static function to create a
	new flow branching.
	(FlowBranchingBlock, FlowBranchingException): New classes.
	(FlowBranching.UsageVector.Type): New public readonly field.
	(FlowBranching.UsageVector.Breaks): Removed the setter.
	(FlowBranching.UsageVector.Returns): Removed the setter.
	(FlowBranching.UsageVector): Added Break(), Return(),
	NeverReachable() and Throw() methods to modify the reachability.
	(FlowBranching.UsageVector.MergeChildren): Removed, this is now
	done by FlowBranching.Merge().
	(FlowBranching.UsageVector.MergeChild): New method; merges the
	merge result into the current vector.
	(FlowBranching.Merge): New abstract method to merge a branching.

2003-08-12  Martin Baulig  <martin@ximian.com>

	* expression.cs (Indirection.CacheTemporaries): Create the
	LocalTemporary with the pointer type, not its element type.

2003-08-10  Miguel de Icaza  <miguel@ximian.com>

	* cs-parser.jay: FIRST_KEYWORD, LAST_KEYWORD: used to know if a
	token was a keyword or not.

	Add `error' options where an IDENTIFIER was expected;  Provide
	CheckToken and CheckIdentifierToken convenience error reporting
	functions. 

	Do not use `DeclSpace.Namespace', use `DeclSpace.NamespaceEntry'.

	* decl.cs: Rename `NamespaceEntry Namespace' public field into
	NameSpaceEntry NameSpaceEntry.

	(LookupInterfaceOrClass): Avoid creating a full qualified name
	from namespace and name: avoid doing lookups when we know the
	namespace is non-existant.   Use new Tree.LookupByNamespace which
	looks up DeclSpaces based on their namespace, name pair.

	* driver.cs: Provide a new `parser verbose' to display the
	exception thrown during parsing.  This is turned off by default
	now, so the output of a failure from mcs is more graceful.

	* namespace.cs: Track all the namespaces defined in a hashtable
	for quick lookup.

	(IsNamespace): New method

2003-08-09  Miguel de Icaza  <miguel@ximian.com>

	* namespace.cs: Remove redundant call;  Avoid using MakeFQN when
	we know that we need to concatenate (full typename can never be
	null). 

	* class.cs: ditto.

	* statement.cs: Use a bitfield;  Do not initialize to null things
	which are done by the constructor by default.

	* cs-parser.jay: bug fix, parameter was 4, not 3.

	* expression.cs: Just use the property;

	* statement.cs: No need for GetVariableInfo method.

2003-08-08  Martin Baulig  <martin@ximian.com>

	* flowanalysis.cs (FlowReturns): This is now nested in the
	`FlowBranching' class.
	(MyBitVector): Moved this here from statement.cs.
	(FlowBranching.SiblingType): New enum type.
	(FlowBranching.CreateSibling): Added `SiblingType' argument.

2003-08-07  Martin Baulig  <martin@ximian.com>

	* flowanalysis.cs (FlowBranchingType): This is now nested in the
	`FlowBranching' class and called `BranchingType'.

2003-08-07  Martin Baulig  <martin@ximian.com>

	* flowanalysis.cs: Moved all the control flow analysis code into
	its own file.

2003-08-07  Martin Baulig  <martin@ximian.com>

	* assign.cs (Assign.DoResolve): `target' must either be an
	IAssignMethod or an EventAccess; report a CS0131 otherwise.  Fixes
	#37319.

2003-08-07  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (BinaryMethod): This kind of expression is created by the
	Binary class if it determines that the operator has to be handled
	by a method.

	(BinaryDelegate): This kind of expression is created if we are
	dealing with a + or - operator on delegates.

	(Binary): remove method, argumetns, and DelegateOperator: when
	dealing with methods, 

	* ecore.cs (EventExpr.EmitAddOrRemove): Update to new layout.

	* statement.cs (Block): use bitfields for the three extra booleans
	we had in use.   Remove unused topblock parameter.

	* codegen.cs: Remove unecessary argument to Block.EmitTopBlock

	* assign.cs: Drop extra unneeded tests.

2003-08-06  Miguel de Icaza  <miguel@ximian.com>

	* iterators.cs (Mapvariable): provide a mechanism to use prefixes.

	* statement.cs (Foreach): Use VariableStorage instead of
	LocalBuilders.   

	* codegen.cs (VariableStorage): New class used by clients that
	require a variable stored: locals or fields for variables that
	need to live across yield.

	Maybe provide a convenience api for EmitThis+EmitLoad?

	(GetTemporaryLocal, FreeTemporaryLocal): Recycle
	these bad boys.

2003-08-05  Miguel de Icaza  <miguel@ximian.com>

	* codegen.cs (RemapLocal, RemapLocalLValue, RemapParameter,
	RemapParameterLValue): New methods that are used to turn a
	precomputed FieldInfo into an expression like this:

		instance.FieldInfo

	The idea is to use this instead of making LocalVariableReference
	have more than one meaning.

	* cs-parser.jay: Add error production to BASE.

	* ecore.cs: Deal with TypeManager.GetField returning null, which
	is now a valid return value.

	(FieldExprNoAddress): New expression for Fields whose address can
	not be taken.

	* expression.cs (LocalVariableReference): During the resolve
	phases, create new expressions if we are in a remapping context.
	Remove code that dealt with remapping here.

	(ParameterReference): same.

	(ProxyInstance): New expression, like the `This' expression, but
	it is born fully resolved.  We know what we are doing, so remove
	the errors that are targeted to user-provided uses of `this'.

	* statement.cs (Foreach): our variable is now stored as an
	Expression;  During resolution, follow the protocol, dont just
	assume it will return this.

2003-08-06  Martin Baulig  <martin@ximian.com>

	* support.cs (SeekableStreamReader.cs): New public class.

	* cs-tokenizer.cs, cs-parser.jay, driver.cs: Use the new
	SeekableStreamReader instead of the normal StreamReader.

2003-08-04  Martin Baulig  <martin@ximian.com>

	* cs-parser.jay (CLOSE_PARENS_CAST, CLOSE_PARENS_NO_CAST,
	CLOSE_PARENS_OPEN_PARENS, CLOSE_PARENS_MINUS): New tokens to
	deambiguate casts and delegate invocations.
	(parenthesized_expression): Use the new tokens to ensure this is
	not a cast of method invocation.

	* cs-tokenizer.cs (is_punct): Return one of the new special tokens
	when reading a `)' and Deambiguate_CloseParens () was previously
	called.

	* expression.cs (ParenthesizedExpression): New class.  This is
	just used for the CS0075 test.
	(Binary.DoResolve): Check for CS0075.	

2003-07-29  Ravi Pratap  <ravi@ximian.com>

	* expression.cs (Invocation.MakeUnionSet): Patch from Lluis
	Sanchez : use TypeManager.ArrayContainsMethod instead of a direct
	reference comparison.

	(TypeManager.ArrayContainsMethod): When we have a MethodInfo, also
	examine the ReturnType for equality - this is necessary in the
	cases of implicit and explicit operators whose signature also
	includes the return type.

2003-07-26  Miguel de Icaza  <miguel@ximian.com>

	* namespace.cs: Cache the result of the namespace computation,
	instead of computing it every time.

2003-07-24  Miguel de Icaza  <miguel@ximian.com>

	* decl.cs: Use a global arraylist that we reuse over invocations
	to avoid excesive memory consumption.  Reduces memory usage on an
	mcs compile by one meg (45 average).

	* typemanager.cs (LookupTypeReflection): In .NET pointers are
	private, work around that.

2003-07-23  Miguel de Icaza  <miguel@ximian.com>

	* literal.cs (IntLiteral): Define Zero and One static literals. 

	* cs-parser.jay (integer_literal): use static literals to reduce
	memory usage for the most used literals (0, 1 and -1).  211kb
	reduced in memory usage.

	Replace all calls to `new ArrayList' with `new
	ArrayList(4)' which is a good average number for most allocations,
	and also requires only 16 bytes of memory for its buffer by
	default. 

	This reduced MCS memory usage in seven megabytes for the RSS after
	bootstrapping.

2003-07-28  Ravi Pratap  <ravi@ximian.com>

	* expression.cs (Invocation.OverloadResolve): Fix the algorithm to
	handle params methods the correct way by forming only one
	applicable set with params and normal methods in them. Earlier we
	were looking at params methods only if we found no normal methods
	which was not the correct thing to do.

	(Invocation.BetterFunction): Take separate arguments indicating
	when candidate and the best method are params methods in their
	expanded form.

	This fixes bugs #43367 and #46199.

	* attribute.cs: Documentation updates.

	(CheckAttribute): Rename to CheckAttributeTarget.
	(GetValidPlaces): Rename to GetValidTargets.

	* expression.cs (Invocation.IsParamsMethodApplicable): Fix trivial
	bug - use Convert.ImplicitConversion, not ImplicitUserConversion!

	Fixes bug #44468.

2003-07-28  Martin Baulig  <martin@ximian.com>

	* class.cs (TypeContainer.DefineMembers): Use the base type's full
	name when looking up the base class of a nested class.  Fixes #46977.

2003-07-26  Martin Baulig  <martin@ximian.com>

	* expression.cs (Indexers.Indexer): New nested struct; contains
	getter, setter and the indexer's type.
	(Indexers.Properties): This is now an ArrayList of
	Indexers.Indexer's.
	(IndexerAccess.DoResolveLValue): Correctly set the type if the
	indexer doesn't have any getters.

	* assign.cs (Assign.DoResolve): Also do the implicit conversions
	for embedded property and indexer assignments.

2003-07-26  Martin Baulig  <martin@ximian.com>

	* cs-tokenizer.cs (Tokenizer.xtoken): Report a CS1040 if a
	preprocessor directive is not the first non-whitespace character
	on a line.

2003-07-26  Martin Baulig  <martin@ximian.com>

	* namespace.cs (NamespaceEntry.Lookup): New method; rewrote the
	namespace parsing, follow the spec more closely.

	* rootcontext.cs (RootContext.NamespaceLookup): Use the new
	NamespaceEntry.Lookup().

2003-07-25  Martin Baulig  <martin@ximian.com>

	* MethodCore.cs (OverridesSomething): New public field; it's set
	from TypeContainer.DefineMembers if this method overrides
	something (which doesn't need to be a method).  Fix #39462.

2003-07-25  Ravi Pratap  <ravi@ximian.com>

	* typemanager.cs (GetMembers): Ensure that the list of members is
	reversed. This keeps things in sync.

	* attribute.cs (Attribute.CheckAttribute): Break as soon as we
	find an AttributeUsage attribute.

	* expression.cs (Invocation.OverloadResolve): Perform the check
	which disallows Invoke to be directly called on a Delegate.

	(Error_InvokeOnDelegate): Report error cs1533.

2003-07-25  Martin Baulig  <martin@ximian.com>

	* expression.cs (Indexers.GetIndexersForType): Only look in the
	interface hierarchy if the requested type is already an
	interface.  Fixes #46788 while keeping #46502 fixed.

2003-07-25  Martin Baulig  <martin@ximian.com>

	* class.cs (TypeContainer.DefineMembers): Check whether all
	readonly fields have been assigned and report warning CS0649 if
	not.

	* statement.cs (LocalInfo.IsFixed): Always return true if this is
	a valuetype.

2003-07-24  Ravi Pratap  <ravi@ximian.com>

	* decl.cs (MemberCache.AddMethods): Reverse the order of the array
	returned from GetMethods to make things consistent with the
	assumptions MCS makes about ordering of methods.

	This should comprehensively fix bug #45127 and it does :-)

	* ecore.cs (MethodGroupExpr.DeclaringType): Correct bug - the
	ordering is actually reverse.

	* Clean up some debug messages I left lying around.

	* interface.cs (Populate*): Get rid of code which emits attributes
	since the stage in which we emit attributes is the 'Emit' stage,
	not the define stage.

	(Emit): Move attribute emission for interface members here.

2003-07-22  Ravi Pratap  <ravi@ximian.com>

	* expression.cs (Invocation.OverloadResolve): Follow the spec more
	closely: we eliminate methods in base types when we have an
	applicable method in a top-level type.

	Please see section 14.5.5.1 for an exact description of what goes
	on. 

	This fixes bug #45127 and a host of other related to corlib compilation.

	* ecore.cs (MethodGroupExpr.DeclaringType): The element in the
	array is the method corresponding to the top-level type (this is
	because of the changes made to icall.c) so we change this
	accordingly.

	(MethodGroupExpr.Name): This too.

	* typemanager.cs (GetElementType): New method which does the right
	thing when compiling corlib. 

	* everywhere: Make use of the above in the relevant places.

2003-07-22  Martin Baulig  <martin@ximian.com>

	* cs-parser.jay (invocation_expression): Moved
	`OPEN_PARENS expression CLOSE_PARENS unary_expression' here from
	`cast_expression', but create a InvocationOrCast which later
	resolves to either an Invocation or a Cast.

	* ecore.cs (ExpressionStatement.ResolveStatement): New virtual
	method; call this before EmitStatement() to make sure that this
	expression can be used as a statement.

	* expression.cs (InvocationOrCast): New class; resolves to either
	an Invocation or a Cast.

	* statement.cs (StatementExpression): Call ResolveStatement() on
	the ExpressionStatement before emitting it.

2003-07-21  Martin Baulig  <martin@ximian.com>

	* expression.cs (Invocation.VerifyArgumentsCompat): Check whether
	`ref' and `out' attributes match; fixes #46220.
	(MemberAccess.ResolveMemberAccess): You can't reference a type
	through an expression; fixes #33180.
	(Indexers.GetIndexersForType): Don't return the indexers from
	interfaces the class implements; fixes #46502.

2003-07-21  Martin Baulig  <martin@ximian.com>

	* class.cs (TypeContainer.CheckPairedOperators): Added CS0660 and
	CS0661 checks; fixes bug #30442.

2003-07-21  Martin Baulig  <martin@ximian.com>

	* decl.cs (AdditionResult): Added `Error'.

	* enum.cs (AddEnumMember): Report a CS0076 if name is `value__'.

	* typemanager.cs (TypeManager.ChangeType): Catch exceptions;
	makes cs0031.cs actually work.

2003-07-20  Martin Baulig  <martin@ximian.com>

	* namespace.cs: Fixed that bug which caused a crash when compiling
	the debugger's GUI.

2003-07-20  Miguel de Icaza  <miguel@ximian.com>

	* typemanager.cs (LookupTypeReflection): Never expose types which
	are NotPublic, NestedPrivate, NestedAssembly, or
	NestedFamANDAssem.  We used to return these, and later do a check
	that would report a meaningful error, but the problem is that we
	would not get the real match, if there was a name override.

2003-07-18  Miguel de Icaza  <miguel@ximian.com>

	* namespace.cs (Namespace, Name): Do not compute the namespace
	name dynamically, compute it in the constructor.  This reduced
	memory usage by 1697 KB.

	* driver.cs: Use --pause to pause at the end.

2003-07-17  Peter Williams  <peter@newton.cx>

	* Makefile: Change the name of the test target so that it doesn't
	conflict with the recursive test target.

2003-07-17  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (LocalVariableReference.Emit, EmitAssign,
	AddressOf): Do not use EmitThis, that was wrong, use the actual
	this pointer.

2003-07-15  Miguel de Icaza  <miguel@ximian.com>

	* class.cs (MethodData.Define): While checking if a method is an
	interface implementation, improve the test: If we are not public
	(use new test here: use the computed MethodAttributes directly,
	instead of the parsed modifier flags) check if the `implementing'
	method comes from an interface or not.

	* pending.cs (VerifyPendingMethods): Slightly better error
	message.

	* makefile: add test target that does the mcs bootstrap.

2003-07-16  Ravi Pratap  <ravi@ximian.com>

	* interface.cs (Define): Do nothing here since there are no
	members to populate etc. Move the attribute emission out of here
	since this was just totally the wrong place to put it. Attribute
	application happens during the 'Emit' phase, not in the 'Define'
	phase.

	(Emit): Add this method and move the attribute emission here

	* rootcontext.cs (EmitCode): Call the Emit method on interface
	types too.

2003-07-14  Ravi Pratap M  <ravi@ximian.com>

	* expression.cs (OverloadResolve): Report error only if Location
	is not 'Null' which means that there was a probe going on.

2003-07-14  Martin Baulig  <martin@ximian.com>

	* expression.cs (ConditionalLogicalOperator): New public class to
	implement user defined conditional logical operators.
	This is section 14.11.2 in the spec and bug #40505.

2003-07-14  Martin Baulig  <martin@ximian.com>

	* ecore.cs (FieldExpr.DoResolveLValue): Fixed bug #46198.

2003-07-14  Martin Baulig  <martin@ximian.com>

	* codegen.cs (EmitContext.InFixedInitializer): New public field.

	* ecore.cs (IVariable.VerifyFixed): New interface method.

	* expression.cs (Unary.ResolveOperator): When resolving the `&'
	operator, check whether the variable is actually fixed.  Fixes bug
	#36055.  Set a variable definitely assigned when taking its
	address as required by the spec.

	* statement.cs (LocalInfo.IsFixed): New field.
	(LocalInfo.MakePinned): Set `IsFixed' to true.

2003-07-14  Ravi Pratap M  <ravi@ximian.com>

	* attribute.cs (Attribute.Resolve): While doing a Member lookup
	for .ctors, ensure that we only ask for members declared in the
	attribute type (BindingFlags.DeclaredOnly).

	Fixes bug #43632.

	* expression.cs (Error_WrongNumArguments): Report error 1501
	correctly the way CSC does.

2003-07-13  Martin Baulig  <martin@ximian.com>

	* expression.cs (MemberAccess.ResolveAsTypeStep): Try to do a type
	lookup on the fully qualified name, to make things like "X.X" work
	where "X.X" is a fully qualified type name, but we also have a
	namespace "X" in the using list.  Fixes #41975.

2003-07-13  Martin Baulig  <martin@ximian.com>

	* assign.cs (Assign.GetEmbeddedAssign): New protected virtual
	function. If we're a CompoundAssign, we need to create an embedded
	CompoundAssign, not an embedded Assign.
	(Assign.DoResolve): Make this work for embedded CompoundAssign's.
	Fixes #45854.

2003-07-13  Martin Baulig  <martin@ximian.com>

	* typemanager.cs (TypeManager.IsNestedChildOf): Make this actually
	work to fix bug #46088.

2003-07-13  Ravi Pratap <ravi@ximian.com>

	* class.cs (Operator.Emit): Do not emit attributes here - it is
	taken care of by the Method class that we delegate too. This takes
	care of bug #45876.

2003-07-10  Martin Baulig  <martin@ximian.com>

	* expression.cs (TypeOfVoid): New class.
	(TypeOf): Report a CS0673 if it's System.Void.  Fixes #42264.

2003-07-10  Martin Baulig  <martin@ximian.com>

	* class.cs (MethodCore.DoDefineParameters): Added CS0225 check;
	bug #35957.

2003-07-10  Martin Baulig  <martin@ximian.com>

	* rootcontext.cs (RootContext.NamespaceLookup): Take a DeclSpace,
	not a NamespaceEntry, so we can use DeclSpace.CheckAccessLevel().

	* decl.cs (DeclSpace.FindType): Use DeclSpace.CheckAccessLevel().

	* typemanager.cs (TypeManager.IsAccessibleFrom): Removed.

2003-07-10  Martin Baulig  <martin@ximian.com>

	* expression.cs (ArrayCreation): Don't use a byte blob for arrays
	of decimal.  Fixes #42850.

	NOTE: I also fixed the created byte blob, but this doesn't work on
	the MS runtime and csc never produces any byte blobs for decimal
	arrays.

2003-07-10  Martin Baulig  <martin@ximian.com>

	* statement.cs (StructInfo.GetStructInfo): Catch deep cycles in
	structs; fixes #32068.
	(Block.AddChildVariableNames): Fixed #44302.

2003-07-07  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* namespace.cs: fixed compilation with csc. It's bugzilla #44302.

2003-07-07  Miguel de Icaza  <miguel@ximian.com>

	* attribute.cs: And this test is onger needed.

2003-07-08  Martin Baulig  <martin@ximian.com>

	* rootcontext.cs (RootContext.NamespaceLookup): Ignore
	inaccessible types.  Fixes #36313.

	* decl.cs (DeclSpace.FindType): Ignore inaccessible types.

	* namespace.cs (NamespaceEntry): Create implicit entries for all
	namespaces; ie. if we have `namespace N1.N2.N3 { ... }', we create
	implicit entries for N1.N2 and N1.

2003-07-08  Martin Baulig  <martin@ximian.com>

	Rewrote the handling of namespaces to fix a lot of the issues
	wrt. `using' aliases etc.

	* namespace.cs (Namespace): Splitted this class into a
	per-assembly `Namespace' and a per-file `NamespaceEntry'.

	* typemanager.cs (TypeManager.IsNamespace): Removed.
	(TypeManager.ComputeNamespaces): Only compute namespaces from
	loaded assemblies here, not the namespaces from the assembly we're
	currently compiling.

2003-07-08  Martin Baulig  <martin@ximian.com>

	* rootcontext.cs, class.cs: Fixed the CS1530 reporting.

2003-07-07  Miguel de Icaza  <miguel@ximian.com>

	* typemanager.cs: Reverted patch from Gonzalo, my previous patch
	already fixed it.  

	I thought about the memory savings here, but LookupTypeReflection
	is used under already very constrained scenarios.  Compiling
	corlib or mcs only exposes one hit, so it would not really reduce
	any memory consumption.

2003-07-07  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* typemanager.cs: fixes bug #45889 by only adding public types from
	other assemblies to the list of known types.

2003-07-07  Miguel de Icaza  <miguel@ximian.com>

	* attribute.cs (Attribute.Resolve): Add call to CheckAccessLevel
	on the type we resolved.

2003-07-05  Martin Baulig  <martin@ximian.com>

	* pending.cs (PendingImplementation.ParentImplements): Don't
	create the proxy if the parent is abstract.

	* class.cs (TypeContainer.DefineIndexers): Process explicit
	interface implementations first.  Fixes #37714.

2003-07-04  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (MemberAccess.ResolveMemberAccess): Events are
	defined recursively;  but since we modify the input parameters
	(left is set to `this' temporarily), we reset this value if the
	left_is_explicit is false, which gives the original semantics to
	the code.  

	* literal.cs (NullPointer): new class used to represent a null
	literal in a pointer context.

	* convert.cs (Convert.ImplicitReferenceConversion): Is the target
	type is a pointer, use a NullPointer object instead of a
	NullLiteral.   Closes 43687

	(ExplicitConversion): Convert pointer values using
	the conv opcode to the proper type.

	* ecore.cs (New): change ValueTypeVariable property into a method,
	that returns whether the valuetype is suitable for being used.

	* expression.cs (Binary.DoNumericPromotions): Only return if we
	the int constant was a valid uint, and we can return both left and
	right as uints.  If not, we continue processing, to trigger the
	type conversion.  This fixes 39018.

	* statement.cs (Block.EmitMeta): During constant resolution, set
	the CurrentBlock property on the emitcontext, so that we resolve
	constants propertly.

2003-07-02  Martin Baulig  <martin@ximian.com>

	* codegen.cs (EmitContext.NeedExplicitReturn): New public variable.
	(EmitContext.EmitTopBlock): Emit an explicit return if it's set.

	* statement.cs (Try.Resolve): Set ec.NeedExplicitReturn rather
	than emitting it here.

	* statement.cs: Fixed some more flow analysis bugs.

2003-07-02  Martin Baulig  <martin@ximian.com>

	* class.cs (MethodData.Define): When implementing interface
	methods, set Final unless we're Virtual.

	* decl.cs (MemberCore.CheckMethodAgainstBase): Make the CS0506
	check work for interface methods.

2003-07-01  Martin Baulig  <martin@ximian.com>

	* ecore.cs (EmitContext.This): Replaced this property with a
	GetThis() method which takes a Location argument.  This ensures
	that we get the correct error location for a CS0188.

2003-07-01  Miguel de Icaza  <miguel@ximian.com>

	* ecore.cs: (Convert.ConvertIntLiteral): Add test for
	ImplicitStandardConversion.

	* class.cs (TypeContainer.GetClassBases): Small bug fix for 45649.

2003-07-01  Zoltan Varga  <vargaz@freemail.hu>

	* expression.cs (ResolveOperator): Fix Concat (string, string, string)
	optimization.

2003-06-30  Miguel de Icaza  <miguel@ximian.com>

	* class.cs (Constructor.Define): Turn off initlocals for unsafe
	constructors.

	(MethodData.Define): Turn off initlocals for unsafe methods.

2003-06-29  Miguel de Icaza  <miguel@ximian.com>

	* decl.cs (DeclSpace.CheckAccessLevel): Make this routine
	complete;  Fixes #37521.

	* delegate.cs: Use Modifiers.TypeAttr to compute the
	TypeAttributes, instead of rolling our own.  This makes the flags
	correct for the delegates.

2003-06-28  Miguel de Icaza  <miguel@ximian.com>

	* class.cs (Constructor.Define): Set the private flag for static
	constructors as well.

	* cs-parser.jay (statement_expression): Set the return value to
	null, to avoid a crash when we catch an error.

2003-06-24  Miguel de Icaza  <miguel@ximian.com>

	* cs-parser.jay: Applied patch from Jackson that adds support for
	extern and unsafe modifiers to destructor declarations.

	* expression.cs: Report error 21 if the user is trying to index a
	System.Array.

	* driver.cs: Add an error message, suggested by the bug report.

	* class.cs (TypeContainer.Emit): Only call EmitFieldInitializers
	if we do not have a ": this ()" constructor initializer.  Fixes 45149

2003-06-14  Miguel de Icaza  <miguel@ximian.com>

	* namespace.cs: Add some information to reduce FAQs.

2003-06-13  Miguel de Icaza  <miguel@ximian.com>

	* cfold.cs (BinaryFold): BitwiseAnd, BitwiseOr: handle other
	underlying enumeration types.  Fixes #43915.

	* expression.cs: Treat ushort/short as legal values to be used in
	bitwise operations.

Wed Jun 4 13:19:04 CEST 2003 Paolo Molaro <lupus@ximian.com>

	* delegate.cs: transfer custom attributes for paramenters from
	the delegate declaration to Invoke and BeginInvoke.

Tue Jun 3 11:11:08 CEST 2003 Paolo Molaro <lupus@ximian.com>

	* attribute.cs: handle custom marshalers and emit marshal info
	for fields, too.

2003-05-28  Hector E. Gomez Morales  <hgomez_36@flashmail.com>

	* makefile.gnu: Added anonymous.cs to the compiler sources.

2003-05-28  Miguel de Icaza  <miguel@ximian.com>

	* iterators.cs: Change the name of the proxy class to include two
	underscores.

	* cs-parser.jay: Update grammar to include anonymous methods.

	* anonymous.cs: new file.

2003-05-27  Miguel de Icaza  <miguel@ximian.com>

	* class.cs (Field.Define): Add missing test for pointers and
	safety. 

2003-05-27  Ravi Pratap  <ravi@ximian.com>

	* expression.cs (ArrayAccess.GetStoreOpCode): For System.IntPtr,
	we use the stobj opcode.

	(ArrayCreation.EmitDynamicInitializers): Revert Miguel's patch
	since it wasn't the correct fix. 

	It still is puzzling that we are required to use stobj for IntPtr
	which seems to be a ValueType.

2003-05-26  Miguel de Icaza  <miguel@ximian.com>

	* ecore.cs (SimpleName.SimpleNameResolve): Consider using aliases
	during regular simple name resolution.   Now, the trick is that
	instead of returning for processing the simplename, we do a
	TypeManager.LookupType (ie, a rooted lookup as opposed to a
	contextual lookup type).   If a match is found, return that, if
	not, return for further composition.

	This fixes long-standing 30485.

	* expression.cs (ArrayCreation.EmitDynamicInitializers): When
	using the address to initialize an object, do an Stobj instead of
	using the regular Stelem.

	(IndexerAccess.Emit, IndexerAccess.EmitAssign):
	Pass `is_base_indexer' to Invocation.EmitCall instead of false.
	Because if we are a BaseIndexerAccess that value will be true.
	Fixes 43643.

	* statement.cs (GotoCase.Resolve): Return after reporting an
	error, do not attempt to continue. 

	* expression.cs (PointerArithmetic.Emit): If our operand is a
	long, convert our constants to match the operand before
	multiplying.  Convert to I type before adding.   Fixes 43670.

2003-05-14  Ravi Pratap  <ravi@ximian.com>

	* enum.cs (ImplicitConversionExists) : Rename to
	ImplicitEnumConversionExists to remove ambiguity. 

	* ecore.cs (NullCast): New type of cast expression class which
	basically is very similar to EmptyCast with the difference being
	it still is a constant since it is used only to cast a null to
	something else
	(eg. (string) null)

	* convert.cs (ImplicitReferenceConversion): When casting a null
	literal, we return a NullCast.

	* literal.cs (NullLiteralTyped): Remove - I don't see why this
	should be around anymore.

	The renaming (reported was slightly wrong). Corrections:

	ConvertImplicitStandard -> ImplicitConversionStandard
	ConvertExplicitStandard -> ExplicitConversionStandard

	* expression.cs (StaticCallExpr.MakeSimpleCall): Resolve arguments
	before passing them in !

	* convert.cs (ImplicitConversionStandard): When comparing for
	equal expr and target types, ensure that expr is not a
	NullLiteral.

	In general, we must not be checking (expr_type ==
	target_type) in the top level conversion methods
	(ImplicitConversion, ExplicitConversion etc). This checking is
	done in the methods that they delegate to.

2003-05-20  Miguel de Icaza  <miguel@ximian.com>

	* convert.cs: Move Error_CannotConvertType,
	ImplicitReferenceConversion, ImplicitReferenceConversionExists,
	ImplicitNumericConversion, ImplicitConversionExists,
	ImplicitUserConversionExists, StandardConversionExists,
	FindMostEncompassedType, FindMostSpecificSource,
	FindMostSpecificTarget, ImplicitUserConversion,
	ExplicitUserConversion, GetConversionOperators,
	UserDefinedConversion, ConvertImplicit, ConvertImplicitStandard,
	TryImplicitIntConversion, Error_CannotConvertImplicit,
	ConvertImplicitRequired, ConvertNumericExplicit,
	ExplicitReferenceConversionExists, ConvertReferenceExplicit,
	ConvertExplicit, ConvertExplicitStandard from the ecore.cs into
	its own file.

	Perform the following renames:

	StandardConversionExists -> ImplicitStandardConversionExists
	ConvertImplicit -> ImplicitConversion
	ConvertImplicitStandard -> ImplicitStandardConversion
	TryImplicitIntConversion -> ImplicitIntConversion
	ConvertImplicitRequired -> ImplicitConversionRequired
	ConvertNumericExplicit -> ExplicitNumericConversion
	ConvertReferenceExplicit -> ExplicitReferenceConversion
	ConvertExplicit -> ExplicitConversion
	ConvertExplicitStandard -> ExplicitStandardConversion

2003-05-19  Martin Baulig  <martin@ximian.com>

	* statement.cs (TypeInfo.StructInfo): Made this type protected.
	(TypeInfo): Added support for structs having structs as fields.

	* ecore.cs (FieldExpr): Implement IVariable.
	(FieldExpr.DoResolve): Call VariableInfo.GetSubStruct() to get the
	VariableInfo for the field.

2003-05-18  Martin Baulig  <martin@ximian.com>

	* expression.cs (This.DoResolve): Report a CS0027 if we're
	emitting a field initializer.

2003-05-18  Martin Baulig  <martin@ximian.com>

	* expression.cs (This.ResolveBase): New public function.
	(This.DoResolve): Check for CS0188.

	* codegen.cs (EmitContext.This): Just call This.ResolveBase(), not
	This.Resolve().

	* ecore.cs (MethodGroupExpr.DoResolve): Set the
	`instance_expression' to null if we don't have any non-static
	methods.

2003-05-18  Martin Baulig  <martin@ximian.com>

	Reworked the way how local variables and parameters are handled by
	the flow analysis code.

	* statement.cs (TypeInfo, VariableMap): New public classes.
	(VariableInfo): New public class.  This is now responsible for
	checking whether a variable has been assigned.  It is used for
	parameters and local variables.
	(Block.EmitMeta): Take the InternalParameters as argument; compute
	the layout of the flow vectors here.
	(Block.LocalMap, Block.ParameterMap): New public properties.
	(FlowBranching): The .ctor doesn't get the InternalParameters
	anymore since Block.EmitMeta() now computes the layout of the flow
	vector.
	(MyStructInfo): This class is now known as `StructInfo' and nested
	in `TypeInfo'; we don't access this directly anymore.

	* ecore.cs (IVariable): Added `VariableInfo VariableInfo'
	property and removed IsAssigned(), IsFieldAssigned(),
	SetAssigned() and SetFieldAssigned(); we now call them on the
	VariableInfo so we don't need to duplicate this code everywhere.

	* expression.cs (ParameterReference): Added `Block block' argument
	to the .ctor.
	(LocalVariableReference, ParameterReference, This): The new
	VariableInfo class is now responsible for all the definite
	assignment stuff.

	* codegen.cs (EmitContext.IsVariableAssigned, SetVariableAssigned,
	IsParameterAssigned, SetParameterAssigned): Removed.

2003-05-18  Martin Baulig  <martin@ximian.com>

	* typemanager.cs (InitCoreTypes): Try calling
	SetCorlibTypeBuilders() with 4 args; if that fails, fall back to
	the 3-args-version.  Corlib now also needs our `void_type'.
	(GetMethod): Added overloaded version which takes an optional
	`bool report_errors' to allow lookups of optional methods.

2003-05-12  Martin Baulig  <martin@ximian.com>

	* statement.cs (VariableInfo): Renamed to LocalInfo since it's
	only used for locals and not for parameters.

2003-05-12  Miguel de Icaza  <miguel@ximian.com>

	* support.cs (InternalParameters.ParameterType): Return the
	ExternalType of the parameter.

	* parameter.cs (Parameter.ExternalType): drop the two arguments,
	they were unused.

2003-05-11  Miguel de Icaza  <miguel@ximian.com>

	* class.cs (MethodData.Define): Do not set the `newslot' on
	interface members, if they are also flagged as "override".

	* expression.cs (UnaryMutator.EmitCode): Simple workaround to emit
	better code for ++i and i++.  This only works for static fields
	and local variables.

	* typemanager.cs (LookupDeclSpace): Add new method, sometimes we
	want to pull the DeclSpace out of the builder_to_declspace instead
	of the TypeBuilder (like in TypeContainer.FindMembers).

	* class.cs (TypeContainer.FindMembers): Use LookupDeclSpace
	instead of LookupTypeContainer.  Fixes the crash on .NET for
	looking up interface members.

	* const.cs: Create our own emit context during the Definition
	stage, so that constants are evaluated in the proper context, when
	a recursive definition happens.

2003-05-11  Martin Baulig  <martin@ximian.com>

	* statement.cs (Block.CreateSwitchBlock): New method.  Creates a
	new block for a switch section.
	(Block.AddLabel, Block.LookupLabel): If we're a switch section, do
	the adding/lookup in the switch block.  Fixes #39828.

2003-05-09  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (UnaryMutator.LoadOneAndEmitOp): Missing
	functionality: I needed to convert the data after I had performed
	the add/sub operation into the operands type size.

	* ecore.cs (ImplicitReferenceConversion): When boxing an interface
	pass the type for the box operation, otherwise the resulting
	object would have been of type object.

	(BoxedCast): Add constructor to specify the type to box as.

2003-05-07  Miguel de Icaza  <miguel@ximian.com>

	* iterators.cs: I was reusing the `count' variable inadvertently,
	take steps to not allow this to happen.

2003-05-06  Miguel de Icaza  <miguel@ximian.com>

	* attribute.cs (Attribute.Resolve): Params attributes are encoded
	by creating an array at the point where the params starts and
	putting all those arguments there, then adjusting the size of the
	array.

2003-05-05  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (New.AddressOf): Implement interface
	IMemoryLocation.  This is used when the `new' operator is used in
	the context of an invocation to a method on a value type.

	See http://bugzilla.ximian.com/show_bug.cgi?id=#42390 for an
	example. 

	* namespace.cs: Also check the using aliases here.

	* driver.cs: Move the test for using validity after the types have
	been entered, so we do a single pass that also includes the using
	aliases. 

	* statement.cs (Try.Resolve): Avoid crashing if there is a failure
	in the regular case.   CreateSiblingForFinally is doing extra
	error checking.

	* attribute.cs (GetAttributeArgumentExpression): Store the result
	on an out value, and use the return value to indicate failure
	instead of using null (which is a valid return for Constant.GetValue).

	* statement.cs: Perform the analysis flow for the increment
	portion after the statement, because this will be the real flow of
	execution.  Fixes #42385

	* codegen.cs (EmitContext.EmitArgument,
	EmitContext.EmitStoreArgument): New helper functions when the
	RemapToProxy flag is set.

	* expression.cs (ParameterReference.EmitLdarg): Expose this useful
	function.

	Add support for remapping parameters. 

	* iterators.cs: Propagate parameter values;  Store parameter
	values in the proxy classes.

2003-05-04  Miguel de Icaza  <miguel@ximian.com>

	* ecore.cs (FieldExpr): Fix an obvious bug.  static fields do not
	need a proxy reference;  I do not know what I was thinking

	* cs-parser.jay (constructor_initializer): catch another error,
	and display nice message.

	(field_declaration): catch void field declaration
	to flag a better error. 

	* class.cs (MemberBase.CheckBase): Report an error instead of a
	warning if a new protected member is declared in a struct. 
	(Field.Define): catch the error of readonly/volatile.

	* ecore.cs (FieldExpr.EmitAssign): reuse the field lookup.

	(FieldExpr.AddressOf): ditto.  Catch error where the address of a
	volatile variable is taken

2003-05-02  Miguel de Icaza  <miguel@ximian.com>

	* statement.cs (Fixed.Resolve): Report an error if we are not in
	an unsafe context.

2003-05-01  Miguel de Icaza  <miguel@ximian.com>

	* typemanager.cs: reuse the code that handles type clashes for
	delegates and enumerations.

	* class.cs (Report28): Always report.

	* expression.cs (EncodeAsAttribute): Allow nulls here.

2003-04-28  Miguel de Icaza  <miguel@ximian.com>

	* attribute.cs (Attribute.GetAttributeArgumentExpression): Moved
	the functionality for testing whether an expression is valid for
	an attribute here.  Also handle the case of arrays of elements
	being stored. 

	* expression.cs (ArrayCreation.EncodeAsAttribute): Add support for
	encoding a linear array into an array of objects that are suitable
	to be passed to an CustomAttributeBuilder.

	* delegate.cs: Check unsafe types being used outside of an Unsafe context.

	* ecore.cs: (FieldExpr): Handle field remapping here.

	* iteratators.cs: Pass the instance variable (if the method is an
	instance method) to the constructors, so we can access the field
	variables on the class.

	TODO: Test this with structs.  I think the THIS variable on
	structs might have to be a pointer, and not a refenrece

2003-04-27  Miguel de Icaza  <miguel@ximian.com>

	* codegen.cs (EmitContext.Mapvariable): Adds a mechanism to map
	local variables to fields in a proxy class.

	* iterators.cs (PopulateProxy): Rename our internal fields to
	<XXX>.  
	Create a <THIS> field if we are an instance method, so we can
	reference our parent container variables.
	(MapVariable): Called back from the EmitContext code to enter a
	new variable to field mapping into the proxy class (we just create
	a FieldBuilder).

	* expression.cs
	(LocalVariableReference.{Emit,EmitAssign,AddressOf}): Add support
	for using the remapped locals to fields.

	I placed the code here, because that gives the same semantics to
	local variables, and only changes the Emit code.

	* statement.cs (Fixed.Resolve): it is not allowed to have fixed
	statements inside iterators.
	(VariableInfo): Add a FieldBuilder for the cases when we are
	remapping local variables to fields in a proxy class

	* ecore.cs (SimpleNameResolve): Avoid testing two times for
	current_block != null.

	* statement.cs (Swithc.SimpleSwitchEmit): Removed code that did
	not cope with strings, as it has been moved to the
	TableSwitchEmit.  Fixed bug in switch generation.

	* expression.cs (New.DoResolve): Provide more context for the user
	when reporting an error.

	* ecore.cs (Expression.LoadFromPtr): Use ldind_i when loading
	pointers. 

	* expression.cs (MemberAccess.DoResolve): When we get a type back,
	check the permissions for it.  Note than in a type-resolution
	context the check was already present in DeclSpace.ResolveType,
	but was missing from the MemberAccess.

	(ArrayCreation.CheckIndices): warn if the user has
	more nested levels of expressions, but there are no more
	dimensions specified.  Avoids crash on bug 41906.

2003-04-26  Miguel de Icaza  <miguel@ximian.com>

	* statement.cs (Block): replace Implicit bool, for a generic
	flags.   
	New flag: `Unchecked'.  This is used during the EmitMeta phase
	(which is out-of-line with the regular Resolve/Emit process for a
	statement, as this is done ahead of time, but still gets a chance
	to call constant resolve).

	(Block.Flags): new enum for adding a new flag.

	(Block.EmitMeta): track the state of unchecked.

	(Unchecked): Set the "UnChecked" flags on any blocks we enclose,
	to enable constant resolution to work there as well.

2003-04-22  Miguel de Icaza  <miguel@ximian.com>

	* typemanager.cs (ienumerable_type): Also look up
	System.Collections.IEnumerable. 

2003-04-21  Miguel de Icaza  <miguel@ximian.com>

	TODO: Test more than one conditional per method.

	* class.cs (Indexer.Define): Report the location where the user is
	referencing the unsupported feature.

	(MethodData): Overload the use of `conditionals' to
	minimize the creation of needless ArrayLists.   This saves roughly
	212kb on my machine.

	(Method): Implement the new IIteratorContainer interface.
	(Method.SetYields): Implement the method by setting the ModFlags
	to contain METHOD_YIELDS.

	* expression.cs (Unary.ResolveOperator): Use expr_type, not Expr,
	which just got set to null.

	* iterators.cs: New file.

	(Yield, YieldBreak): New statements.

	* statement.cs (Return.Resolve): Flag an error if we are used in
	an iterator method.

	* codegen.cs (InIterator): New flag set if the code is being
	compiled in an iterator method.

	* modifiers.cs: New flag METHOD_YIELDS.  This modifier is an
	internal modifier, and we just use it to avoid adding extra
	fields, as this is seldom used.  

	* cs-parser.jay: Add yield_statement (yield and yield break).

	* driver.cs: New flag -v2 to turn on version 2 features. 

	* cs-tokenizer.cs (Tokenizer): Add yield and __yield to the
	hashtable when v2 is enabled.

2003-04-20  Miguel de Icaza  <miguel@ximian.com>

	* typemanager.cs (TypeManager.NamespaceClash): Use to check if
	there is already a namespace defined with this name.

	(TypeManager.InitCoreTypes): Remove the temporary workaround, as
	people upgraded their corlibs.

	(TypeManager.CoreLookupType): Use LookupTypeDirect, as we
	always use fully qualified types, no need to use the compiler
	front end.

	(TypeManager.IsNamespace): Use binarysearch.

	* class.cs (AddClass, AddStruct, AddInterface, AddEvent,
	AddDelegate): I did not quite use the new IsValid API properly: I
	have to pass the short-name and the fullname.  I was passing only
	the basename instead of the fullname sometimes. 

	(TypeContainer.DefineType): call NamespaceClash.

	* interface.cs (Interface.DefineType): use NamespaceClash before
	defining the type.

	* delegate.cs (Delegate.DefineType): use NamespaceClash before
	defining the type.

	* enum.cs: (Enum.DefineType): use NamespaceClash before
	defining the type.

	* typemanager.cs (: 3-line patch that gives us some tasty 11%
	speed increase.  First, use the negative_hits cache when we get a
	negative.  Second, add the type with its full original name
	instead of the new . and + encoded name (reflection uses + to
	separate type from a nested type).  Use LookupTypeReflection
	directly which bypasses the type->name hashtable (that we already
	know does not contain the type.

	* decl.cs (DeclSpace.ResolveTypeExpr): track the
	location/container type. 

	* driver.cs: When passing utf8, use directly the UTF8Encoding.

2003-04-19  Miguel de Icaza  <miguel@ximian.com>

	* decl.cs (ResolveTypeExpr): Mirror check acess here too.

	* delegate.cs (NewDelegate.Resolve): Test whether an instance
	method is being referenced in the method group from a static
	context, and report error 120 if so.

	* expression.cs, ecore.cs (Error_UnexpectedKind): New name for
	Error118. 

	* typemanager.cs: Add intermediate namespaces (if a namespace A.B
	is created, we create the A namespace).

	* cs-parser.jay: A namespace also introduces a DeclarationFound.
	Fixes #41591

2003-04-18  Miguel de Icaza  <miguel@ximian.com>

	* typemanager.cs (GetReferenceType, GetPointerType): In .NET each
	invocation to ModuleBuilder.GetType with the same values will
	return a new type instance, so we need to cache its return
	values. 

	* expression.cs (Binary.ResolveOperator): Only allow the compare
	operators on enums if they are of the same type.

	* ecore.cs (Expression.ImplicitReferenceConversion): handle target
	types of ValueType on their own case.  Before we were giving them
	the same treatment as objects.

	* decl.cs (DeclSpace.IsValid): IsValid takes the short name and
	fullname.  Short name is used to compare against container name.
	Fullname is used to check against defined namespace names.

	* class.cs (AddProperty, AddField, AddClass, AddStruct, AddEnum,
	AddDelegate, AddEvent): Pass new parameter to DeclSpace.IsValid

	(Method.CheckBase): Call parent.
	(MemberBase.CheckBase): Check for protected members on sealed
	classes.
	(PropertyBase.CheckBase): Call parent.
	(Field.Define): Call parent.

	* report.cs: Negative error codes are now mapped to 8000 - code,
	so that the display is render more nicely.

	* typemanager.cs: Do not use try/catch, instead report a regular
	error. 

	(GetPointerType, GetReferenceType): These methods provide
	mechanisms to obtain the T* and T& from a T.  We had the code
	previously scattered around the code base, and it also used
	TypeManager.LookupType that would go through plenty of caches.
	This one goes directly to the type source.

	In some places we did the Type.GetType followed by
	ModuleBuilder.GetType, but not in others, so this unifies the
	processing as well.

	* namespace.cs (VerifyUsing): Perform a non-lazy approach to using
	statements now that we have namespace information.

	* typemanager.cs (IsNamespace): New method, returns whether the
	string presented is a namespace or not.

	(ComputeNamespaces): New public entry point, computes the list of
	available namespaces, using the GetNamespaces API call in Mono, or
	the slower version in MS.NET.   

	Now before we start the semantic analysis phase, we have a
	complete list of namespaces including everything that the user has
	provided.

	Deleted old code to cache namespaces in .nsc files.

2003-04-17  Miguel de Icaza  <miguel@ximian.com>

	* class.cs: (TypeContainer.DefineDefaultConstructor): Use the
	class/struct location definition Location for the implicit
	constructor location.

	(Operator.Define): Use the location of the operator for the
	implicit Method definition.

	(Constructor.Emit): use the constructor location for the implicit
	base initializer constructor.

	* ecore.cs: Remove ITypeExpression.  This interface is now gone,
	and the Expression class now contains two new methods:

	ResolveAsTypeStep and ResolveAsTypeTerminal.  This is used to
	isolate type lookup from the rest of the resolution process.

	Since we use Expressions to hold type definitions due to the way
	we parse the input we have historically overloaded Resolve to
	perform the Type lookups if a special flag is passed.  Now this is
	eliminated and two methods take their place. 

	The differences in the two methods between xStep and xTerminal is
	that xStep is involved in our current lookup system that uses
	SimpleNames to compose a name, while xTerminal is used just to
	catch the case where the simplename lookup failed.

2003-04-16  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (ResolveMemberAccess): Remove redundant code.
	TypeExpr expressions are always born fully resolved.

	* interface.cs (PopulateMethod): Do not lookup the types twice.
	We were doing it once during SemanticAnalysis and once during
	PopulateMethod.

	* cs-parser.jay: Due to our hack in the grammar, things like A.B[]
	in local variable type definitions, were being returned as a
	SimpleName (we decomposed everything into a string), that is
	because primary_expression was being used instead of a type in the
	grammar (reduce/reduce conflicts).

	The part that was wrong is that we converted the expression into a
	string (an oversimplification in one hand, compounded with primary
	expressions doing string concatenation).

	So things like:

	A.B.C [] x;

	Would return "A.B.C[]" as a SimpleName.  This stopped things like
	using clauses from working on this particular context.  And a type
	was being matched directly against "A.B.C[]".

	We now use the correct approach, and allow for ComposedCast to be
	part of the unary expression.  So the "A.B.C []" become a composed
	cast of "A.B.C" (as a nested group of MemberAccess with a
	SimpleName at the end) plus the rank composition "[]". 

	Also fixes 35567

2003-04-10  Miguel de Icaza  <miguel@ximian.com>

	* decl.cs (CheckAccessLevel): Implement the NestedPrivate rules
	for the access level checking.

	* class.cs: Cosmetic changes.  Renamed `TypeContainer parent' to
	`TypeContainer container', because I kept getting confused when I
	was debugging this code.

	* expression.cs (Indexers): Instead of tracking getters/setters,
	we now track them in parallel.  We create one arraylist less, but
	most importantly it is possible now for the LValue code to find a
	matching get for a set.

	(IndexerAccess.DoResolveLValue): Update the code.
	GetIndexersForType has been modified already to extract all the
	indexers from a type.  The code assumed it did not.

	Also make the code set the correct return type for the indexer.
	This was fixed a long time ago for properties, but was missing for
	indexers.  It used to be void_type.

	(Binary.Emit): Test first for doubles instead of
	floats, as they are more common.

	(Binary.EmitBranchable): Use the .un version of the branch opcodes
	when dealing with floats and the <=, >= operators.  This fixes bug
	#39314 

	* statement.cs (Foreach.EmitArrayForeach): bug fix: The code used
	to load the array value by emitting a load on the foreach variable
	type.  This was incorrect.  

	We now emit the code to load an element using the the array
	variable type, and then we emit the conversion operator.

	Fixed #40176

2003-04-10  Zoltan Varga  <vargaz@freemail.hu>

	* attribute.cs: Avoid allocation of ArrayLists in the common case.

2003-04-09  Miguel de Icaza  <miguel@ximian.com>

	* class.cs (MethodSignature.InheritableMemberSignatureCompare):
	test for protection before we test for signatures. 

	(MethodSignature.ToString): implement.

	* expression.cs (Unary.TryReduceNegative): Add missing minus sign
	to the case where we reduced into a LongConstant.

	* decl.cs (CheckAccessLevel): If the type is an array, we can not
	depend on whether the information is acurrate, because the
	Microsoft runtime will always claim that the array type is public,
	regardless of the real state.

	If the type is a pointer, another problem happens: the type is
	reported as non-public in Microsoft.  

	In both cases we have to call CheckAccessLevel recursively with
	the underlying type as the argument to be tested.

2003-04-08  Miguel de Icaza  <miguel@ximian.com>

	* assign.cs (Assign.Emit): If we are dealing with a compound
	assignment expression, we should use the code path that stores the
	intermediate result in a temporary value.  This fixes #40903.

	*expression.cs (Indirection.ToString): Provide ToString method for
	debugging. 

2003-04-08  Zoltan Varga  <vargaz@freemail.hu>

	* class.cs: Null out fields holding references to Block objects so
	they can be garbage collected.

	* expression.cs (OverloadResolve): Remove unused local.

2003-04-07  Martin Baulig  <martin@ximian.com>

	* codegen.cs (EmitContext.CurrentFile): New public field.
	(EmitContext.Mark): Use the CurrentFile to check whether the
	location is in the correct file.
	(EmitContext.EmitTopBlock): Initialize CurrentFile here.

2003-04-07  Martin Baulig  <martin@ximian.com>

	* ecore.cs (Expression.ResolveBoolean): Don't call ec.Mark().

	* codegen.cs (EmitContext.EmitTopBlock): Don't call Mark() on the
	location.  [FIXME: The location argument which gets passed to this
	method is sometimes wrong!]

2003-04-07  Nick Drochak <ndrochak@gol.com>

	* codegen.cs: Be more verbose when we can't find the symbol writer dll.

2003-04-07  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (Indirection.EmitAssign): We were using the
	temporary, but returning immediately instead of continuing the
	EmitAssing flow.

2003-04-06  Martin Baulig  <martin@ximian.com>

	* ecore.cs (SimpleName.SimpleNameResolve): Don't report an error
	if it's a nested child, but also deriving from the outer class.
	See test 190.cs.

	* typemanager.cs (IsNestedChildOf): Make this work if it's a
	nested child, but also deriving from the outer class.  See
	test-190.cs.
	(FilterWithClosure): We may access private members of the outer
	class if we're a nested child and deriving from the outer class.
	(RealMemberLookup): Only set `closure_private_ok' if the
	`original_bf' contained BindingFlags.NonPublic.

2003-04-05  Martin Baulig  <martin@ximian.com>

	* statement.cs (FlowBranching.UsageVector.MergeChildren): Fix bug #40670.

2003-04-02  Miguel de Icaza  <miguel@ximian.com>

	* class.cs (Event.Define): Do not allow abstract events to have
	initializers. 

2003-04-01  Miguel de Icaza  <miguel@ximian.com>

	* cs-parser.jay: Add error productions for ADD/REMOVE missing a
	block in event declarations.

	* ecore.cs (FieldExpr.AddressOf): If our instance expression is a
	value type, get its address.

	* expression.cs (Is.Emit): For action `LeaveOnStack' we were
	leaving a class on the stack instead of a boolean value (int
	0/1).  Change the code so we compare against null, and then the
	result against zero.

	* class.cs (TypeContainer.GetClassBases): We were checking for the
	parent class being sealed too late.

	* expression.cs (Binary.Emit): For <= and >= when dealing with
	floating point values, use cgt.un and clt.un instead of cgt and
	clt alone.

2003-04-01  Zoltan Varga  <vargaz@freemail.hu>

	* statement.cs: Apply the same optimization as MS: skip the 
	GetEnumerator returning an IEnumerator, and use the one returning a 
	CharEnumerator instead. This allows us to avoid the try-finally block 
	and the boxing.

2003-03-31  Gaurav Vaish <gvaish_mono@lycos.com>

	* cs-parser.jay: Attributes cannot be applied to
	                 namespaces. Fixes #40473

2003-03-31  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* class.cs:
	(Add*): check if the name is valid using the full name for constants,
	fields, properties and events.

2003-03-28  Miguel de Icaza  <miguel@ximian.com>

	* enum.cs (Enum.DefineType, Enum.IsValidEnumConstant): Also allow
	char constants to be part of the enumeration.

	* expression.cs (Conditional.DoResolve): Add support for operator
	true. Implements the missing functionality from 14.12

	* class.cs (TypeContainer.CheckPairedOperators): Report error for missmatch on
	operator true/false as required by the spec.

	* expression.cs (Unary.ResolveOperator): In LogicalNot, do an
	implicit conversion to boolean.

	* statement.cs (Statement.ResolveBoolean): A boolean expression is
	also one where the type implements `operator true'. 

	* ecore.cs (Expression.GetOperatorTrue): New helper routine to
	get an expression that will invoke operator true based on an
	expression.  

	(GetConversionOperators): Removed the hack that called op_True
	here.  

	(Expression.ResolveBoolean): Move this from Statement.

2003-03-17  Miguel de Icaza  <miguel@ximian.com>

	* ecore.cs (FieldExpr): do not allow initialization of initonly
	fields on derived classes

2003-03-13  Martin Baulig  <martin@ximian.com>

	* statement.cs (Block.Emit): Call ig.BeginScope() and
	ig.EndScope() when compiling with debugging info; call
	LocalBuilder.SetLocalSymInfo _after_ opening the scope.

2003-03-08  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (Indexers): Do not construct immediately, allow
	for new members to be appended as we go.  Fixes 38143

2003-03-07  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* expression.cs: save/restore context when resolving an unchecked
	expression.

2003-03-05  Miguel de Icaza  <miguel@ximian.com>

	* cfold.cs: Catch division by zero in modulus operator during
	constant folding.

2003-03-03  Miguel de Icaza  <miguel@ximian.com>

	* interface.cs (Interface.DefineMembers): Avoid defining members
	twice. 

2003-02-27  Miguel de Icaza  <miguel@ximian.com>

	* driver.cs: handle the +/- options for -noconfig

	* statement.cs (Unckeched.Resolve): Also track the state of
	unchecked in the Resolve phase.

2003-02-27  Martin Baulig  <martin@ximian.com>

	* ecore.cs (Expression.MemberLookup): Don't create a
	MethodGroupExpr for something which is not a method.  Fixes #38291.

2003-02-25  Miguel de Icaza  <miguel@ximian.com>

	* class.cs (MemberBase.CheckParameters): Also check that the type
	is unmanaged if it is a pointer.

	* expression.cs (SizeOf.Resolve): Add location information.

	* statement.cs (Block.EmitMeta): Flag error (208) if a pointer to
	a managed type is declared.

	* expression.cs (Invocation.VerifyArgumentsCompat): Check for the
	parameter modifiers as well.  Fixes bug 38606

	* class.cs: Very sad.  Am backing out the speed up changes
	introduced by the ArrayList -> Array in the TypeContainer, as they
	were not actually that much faster, and introduced a bug (no error
	reports on duplicated methods).

	* assign.cs (CompoundAssign.DoLResolve): Resolve the original
	source first, this will guarantee that we have a valid expression
	before calling in lower levels functions that will require a
	resolved object.  Then use this original_source in the
	target.ResolveLValue instead of the original source that was
	passed to us.

	Another change.  Use target.Resolve instead of LValueResolve.
	Although we are resolving for LValues, we will let the Assign code
	take care of that (it will be called again from Resolve).  This
	basically allows code like this:

	class X { X operator + (X x, object o) {} X this [int idx] { get; set; } }
	class Y { void A (X x) { x [0] += o; }

	The problem was that the indexer was trying to resolve for
	set_Item (idx, object o) and never finding one.  The real set_Item
	was set_Item (idx, X).  By delaying the process we get the right
	semantics. 

	Fixes bug 36505

2003-02-23  Martin Baulig  <martin@ximian.com>

	* statement.cs (Block.Emit): Override this and set ec.CurrentBlock
	while calling DoEmit ().

	* codegen.cs (EmitContext.Mark): Don't mark locations in other
	source files; if you use the #line directive inside a method, the
	compiler stops emitting line numbers for the debugger until it
	reaches the end of the method or another #line directive which
	restores the original file.

2003-02-23  Martin Baulig  <martin@ximian.com>

	* statement.cs (FlowBranching.UsageVector.MergeChildren): Fix bug #37708.

2003-02-23  Martin Baulig  <martin@ximian.com>

	* statement.cs (Block.AddChildVariableNames): We need to call this
	recursively, not just for our immediate children.

2003-02-23  Martin Baulig  <martin@ximian.com>

	* class.cs (Event.Define): Always make the field private, like csc does.

	* typemanager.cs (TypeManager.RealMemberLookup): Make events
	actually work, fixes bug #37521.

2003-02-23  Miguel de Icaza  <miguel@ximian.com>

	* delegate.cs: When creating the various temporary "Parameters"
	classes, make sure that we call the ComputeAndDefineParameterTypes
	on those new parameters (just like we do with the formal ones), to
	allow them to be resolved in the context of the DeclSpace.

	This fixes the bug that Dick observed in Bugzilla #38530.

2003-02-22  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (ResolveMemberAccess): When resolving a constant,
	do not attempt to pull a constant if the value was not able to
	generate a valid constant.

	* const.cs (LookupConstantValue): Do not report more errors than required.

2003-02-19  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* expression.cs: fixes bug #38328.

2003-02-18  Miguel de Icaza  <miguel@ximian.com>

	* class.cs: Changed all the various members that can be part of a
	class from being an ArrayList to be an Array of the right type.
	During the DefineType type_list, interface_list, delegate_list and
	enum_list are turned into types, interfaces, delegates and enums
	arrays.  

	And during the member population, indexer_list, event_list,
	constant_list, field_list, instance_constructor_list, method_list,
	operator_list and property_list are turned into their real arrays.

	Although we could probably perform this operation earlier, for
	good error reporting we need to keep the lists and remove the
	lists for longer than required.

	This optimization was triggered by Paolo profiling the compiler
	speed on the output of `gen-sample-program.pl' perl script. 

	* decl.cs (DeclSpace.ResolveType): Set the ContainerType, so we do
	not crash in methods like MemberLookupFailed that use this field.  

	This problem arises when the compiler fails to resolve a type
	during interface type definition for example.

2003-02-18  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (Indexers.GetIndexersForType): Interfaces do not
	inherit from System.Object, so we have to stop at null, not only
	when reaching System.Object.

2003-02-17  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs: (Indexers.GetIndexersForType): Martin's fix used
	DeclaredOnly because the parent indexer might have had a different
	name, but did not loop until the top of the hierarchy was reached.

	The problem this one fixes is 35492: when a class implemented an
	indexer from an interface, we were getting the interface method
	(which was abstract) and we were flagging an error (can not invoke
	abstract method).

	This also keeps bug 33089 functioning, and test-148 functioning.

	* typemanager.cs (IsSpecialMethod): The correct way of figuring
	out if a method is special is to see if it is declared in a
	property or event, or whether it is one of the predefined operator
	names.   This should fix correctly #36804.

2003-02-15  Miguel de Icaza  <miguel@ximian.com>

	The goal here is to remove the dependency on EmptyCast.Peel ().
	Killing it completely.

	The problem is that currently in a number of places where
	constants are expected, we have to "probe" for an EmptyCast, and
	Peel, which is not the correct thing to do, as this will be
	repetitive and will likely lead to errors. 

	The idea is to remove any EmptyCasts that are used in casts that
	can be reduced to constants, so we only have to cope with
	constants. 

	This bug hunt was triggered by Bug 37363 and the desire to remove
	the duplicate pattern where we were "peeling" emptycasts to check
	whether they were constants.  Now constants will always be
	constants.

	* ecore.cs: Use an enumconstant here instead of wrapping with
	EmptyCast.  

	* expression.cs (Cast.TryReduce): Ah, the tricky EnumConstant was
	throwing me off.  By handling this we can get rid of a few hacks.

	* statement.cs (Switch): Removed Peel() code.

2003-02-14  Miguel de Icaza  <miguel@ximian.com>

	* class.cs: Location information for error 508

	* expression.cs (New.DoResolve): Add a guard against double
	resolution of an expression.  

	The New DoResolve might be called twice when initializing field
	expressions (see EmitFieldInitializers, the call to
	GetInitializerExpression will perform a resolve on the expression,
	and later the assign will trigger another resolution

	This leads to bugs (#37014)

	* delegate.cs: The signature for EndInvoke should contain any ref
	or out parameters as well.  We were not doing this in the past. 

	* class.cs (Field.Define): Do not overwrite the type definition
	inside the `volatile' group.  Turns out that volatile enumerations
	were changing the type here to perform a validity test, which
	broke conversions. 

2003-02-12  Miguel de Icaza  <miguel@ximian.com>

	* ecore.cs (FieldExpr.AddressOf): In the particular case of This
	and structs, we do not want to load the instance variable

	(ImplicitReferenceConversion, ImplicitReferenceConversionExists):
	enum_type has to be handled like an object reference (implicit
	conversions exists from this to object), but the regular IsClass
	and IsValueType tests will never return true for this one.

	Also we use TypeManager.IsValueType instead of type.IsValueType,
	just for consistency with the rest of the code (this is only
	needed if we ever use the construct exposed by test-180.cs inside
	corlib, which we dont today).

2003-02-12  Zoltan Varga  <vargaz@freemail.hu>

	* attribute.cs (ApplyAttributes): apply all MethodImplAttributes, not
	just InternalCall.

2003-02-09  Martin Baulig  <martin@ximian.com>

	* namespace.cs (Namespace..ctor): Added SourceFile argument.
	(Namespace.DefineNamespaces): New static public method; this is
	called when we're compiling with debugging to add all namespaces
	to the symbol file.

	* tree.cs (Tree.RecordNamespace): Added SourceFile argument and
	pass it to the Namespace's .ctor.

	* symbolwriter.cs (SymbolWriter.OpenMethod): Added TypeContainer
	and MethodBase arguments; pass the namespace ID to the symwriter;
	pass the MethodBase instead of the token to the symwriter.
	(SymbolWriter.DefineNamespace): New method to add a namespace to
	the symbol file.

2003-02-09  Martin Baulig  <martin@ximian.com>

	* symbolwriter.cs: New file.  This is a wrapper around
	ISymbolWriter with a cleaner API.  We'll dynamically Invoke()
	methods here in near future.

2003-02-09  Martin Baulig  <martin@ximian.com>

	* codegen.cs (EmitContext.Mark): Just pass the arguments to
	ILGenerator.MarkSequencePoint() which are actually used by the
	symbol writer.

2003-02-09  Martin Baulig  <martin@ximian.com>

	* location.cs (SourceFile): New public sealed class.  This
	contains the name and an index which is used in the location's token.
	(Location): Reserve an appropriate number of bits in the token for
	the source file instead of walking over that list, this gives us a
	really huge performance improvement when compiling with debugging.

	* driver.cs (Driver.parse, Driver.tokenize_file): Take a
	`SourceFile' argument instead of a string.
	(Driver.ProcessFile): Add all the files via Location.AddFile(),
	but don't parse/tokenize here, we need to generate the list of all
	source files before we do that.
	(Driver.ProcessFiles): New static function.  Parses/tokenizes all
	the files.

	* cs-parser.jay (CSharpParser): Take a `SourceFile' argument
	instead of a string.

	* cs-tokenizer.cs (Tokenizer): Take `SourceFile' argument instead
	of a string.

2003-02-09  Martin Baulig  <martin@ximian.com>

	* cs-tokenizer.cs (Tokenizer.PreProcessLine): Also reset the
	filename on `#line default'.

Sat Feb 8 17:03:16 CET 2003 Paolo Molaro <lupus@ximian.com>

	* statement.cs: don't clear the pinned var when the fixed statement
	returns from the method (fixes bug#37752).

Sat Feb 8 12:58:06 CET 2003 Paolo Molaro <lupus@ximian.com>

	* typemanager.cs: fix from mathpup@mylinuxisp.com (Marcus Urban) 
	to IsValueType.

2003-02-07  Martin Baulig  <martin@ximian.com>

	* driver.cs: Removed the `--debug-args' command line argument.

	* codegen.cs (CodeGen.SaveSymbols): Removed, this is now done
	automatically by the AsssemblyBuilder.
	(CodeGen.InitializeSymbolWriter): We don't need to call any
	initialization function on the symbol writer anymore.  This method
	doesn't take any arguments.

2003-02-03  Miguel de Icaza  <miguel@ximian.com>

	* driver.cs: (AddAssemblyAndDeps, LoadAssembly): Enter the types
	from referenced assemblies as well.

2003-02-02  Martin Baulig  <martin@ximian.com>

	* class.cs (MethodData.Emit): Generate debugging info for external methods.

2003-02-02  Martin Baulig  <martin@ximian.com>

	* class.cs (Constructor.Emit): Open the symbol writer before
	emitting the constructor initializer.
	(ConstructorInitializer.Emit): Call ec.Mark() to allow
	single-stepping through constructor initializers.

2003-01-30  Miguel de Icaza  <miguel@ximian.com>

	* class.cs: Handle error 549: do not allow virtual methods in
	sealed classes. 

2003-02-01 Jackson Harper <jackson@latitudegeo.com>

	* decl.cs: Check access levels when resolving types

2003-01-31 Jackson Harper <jackson@latitudegeo.com>

	* statement.cs: Add parameters and locals set in catch blocks that might 
	return to set vector

2003-01-29  Miguel de Icaza  <miguel@ximian.com>

	* class.cs (Operator): Set the SpecialName flags for operators.

	* expression.cs (Invocation.DoResolve): Only block calls to
	accessors and operators on SpecialName methods.

	(Cast.TryReduce): Handle conversions from char constants.


Tue Jan 28 17:30:57 CET 2003 Paolo Molaro <lupus@ximian.com>

	* statement.cs: small memory and time optimization in FlowBranching.

2003-01-28  Pedro Mart  <yoros@wanadoo.es>

	* expression.cs (IndexerAccess.DoResolveLValue): Resolve the same
	problem that the last fix but in the other sid (Set).

	* expression.cs (IndexerAccess.DoResolve): Fix a problem with a null
	access when there is no indexer in the hierarchy.

2003-01-27 Jackson Harper <jackson@latitudegeo.com>

	* class.cs: Combine some if statements.

2003-01-27  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* driver.cs: fixed bug #37187.

2003-01-27  Pedro Martinez Juliá  <yoros@wanadoo.es>

	* expression.cs (IndexerAccess.DoResolve): Before trying to resolve
	any indexer, it's needed to build a list with all the indexers in the
	hierarchy (AllGetters), else we have problems. Fixes #35653.

2003-01-23  Miguel de Icaza  <miguel@ximian.com>

	* class.cs (MethodData.Define): It is wrong for an interface
	implementation to be static in both cases: explicit and implicit.
	We were only handling this in one case.

	Improve the if situation there to not have negations.

	* class.cs (Field.Define): Turns out that we do not need to check
	the unsafe bit on field definition, only on usage.  Remove the test.

2003-01-22  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* driver.cs: use assembly.Location instead of Codebase (the latest
	patch made mcs fail when using MS assemblies).

2003-01-21  Tim Haynes <thaynes@openlinksw.com>

	* driver.cs: use DirectorySeparatorChar instead of a hardcoded "/" to
	get the path to *corlib.dll.

2003-01-21  Nick Drochak <ndrochak@gol.com>

	* cs-tokenizer.cs:
	* pending.cs:
	* typemanager.cs: Remove compiler warnings

2003-01-20  Duncan Mak  <duncan@ximian.com>

	* AssemblyInfo.cs: Bump the version number to 0.19.

2003-01-20  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* cs-tokenizer.cs: little fixes to line numbering when #line is used.

2003-01-18  Zoltan Varga  <vargaz@freemail.hu>

	* class.cs (Constructor::Emit): Emit debugging info for constructors.

2003-01-17  Miguel de Icaza  <miguel@ximian.com>

	* cs-parser.jay: Small fix: we were not comparing the constructor
	name correctly.   Thanks to Zoltan for the initial pointer.

2003-01-16 Jackson Harper <jackson@latitudegeo.com>

	* cs-tokenizer.cs: Set file name when specified with #line

2003-01-15  Miguel de Icaza  <miguel@ximian.com>

	* cs-parser.jay: Only perform the constructor checks here if we
	are named like the class;  This will help provider a better
	error.  The constructor path is taken when a type definition is
	not found, but most likely the user forgot to add the type, so
	report that rather than the constructor error.

Tue Jan 14 10:36:49 CET 2003 Paolo Molaro <lupus@ximian.com>

	* class.cs, rootcontext.cs: small changes to avoid unnecessary memory
	allocations.

2003-01-13 Jackson Harper <jackson@latitudegeo.com>

	* cs-parser.jay: Add cleanup call.

2003-01-13  Duncan Mak  <duncan@ximian.com>

	* cs-tokenizer.cs (Cleanup): Rename to 'cleanup' to make it more
	consistent with other methods.

2003-01-13 Jackson Harper <jackson@latitudegeo.com>

	* cs-tokenizer.cs: Add Cleanup method, also fix #region error messages.

Sun Jan 12 19:58:42 CET 2003 Paolo Molaro <lupus@ximian.com>

	* attribute.cs: only set GuidAttr to true when we have a
	GuidAttribute.

2003-01-09  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* ecore.cs:
	* expression.cs:
	* typemanager.cs: fixes to allow mcs compile corlib with the new
	Type.IsSubclassOf fix.

2003-01-08  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (LocalVariableReference.DoResolve): Classify a
	constant as a value, not as a variable.   Also, set the type for
	the variable.

	* cs-parser.jay (fixed_statement): take a type instead of a
	pointer_type, so we can produce a better error message later.

	* statement.cs (Fixed.Resolve): Flag types that are not pointers
	as an error.  

	(For.DoEmit): Make inifinite loops have a
	non-conditional branch back.

	(Fixed.DoEmit): First populate the pinned variables, then emit the
	statement, then clear the variables.  Before I was emitting the
	code once for each fixed piece.


2003-01-08  Martin Baulig  <martin@ximian.com>

	* statement.cs (FlowBranching.MergeChild): A break in a
	SWITCH_SECTION does not leave a loop.  Fixes #36155.

2003-01-08  Martin Baulig  <martin@ximian.com>

	* statement.cs (FlowBranching.CheckOutParameters): `struct_params'
	lives in the same number space than `param_map'.  Fixes #36154.

2003-01-07  Miguel de Icaza  <miguel@ximian.com>

	* cs-parser.jay (constructor_declaration): Set the
	Constructor.ModFlags before probing for it.  This makes the
	compiler report 514, 515 and 132 (the code was there, but got
	broken). 

	* statement.cs (Goto.Resolve): Set `Returns' to ALWAYS.
	(GotoDefault.Resolve): Set `Returns' to ALWAYS.
	(GotoCase.Resolve): Set `Returns' to ALWAYS.

Tue Jan 7 18:32:24 CET 2003 Paolo Molaro <lupus@ximian.com>

	* enum.cs: create the enum static fields using the enum type.

Tue Jan 7 18:23:44 CET 2003 Paolo Molaro <lupus@ximian.com>

	* class.cs: don't try to create the ParamBuilder for the return
	type if it's not needed (and handle it breaking for the ms runtime
	anyway).

2003-01-06 Jackson Harper <jackson@latitudegeo.com>

	* cs-tokenizer.cs: Add REGION flag to #region directives, and add checks to make sure that regions are being poped correctly

2002-12-29  Miguel de Icaza  <miguel@ximian.com>

	* cs-tokenizer.cs (get_cmd_arg): Fixups to allow \r to terminate
	the command.   This showed up while compiling the JANET source
	code, which used \r as its only newline separator.

2002-12-28  Miguel de Icaza  <miguel@ximian.com>

	* class.cs (Method.Define): If we are an operator (because it
	reuses our code), then set the SpecialName and HideBySig.  #36128

2002-12-22  Miguel de Icaza  <miguel@ximian.com>

	* ecore.cs (FieldExpr.DoResolve): Instead of throwing an
	exception, report error 120 `object reference required'.

	* driver.cs: Add --pause option, used during to measure the size
	of the process as it goes with --timestamp.

	* expression.cs (Invocation.DoResolve): Do not allow methods with
	SpecialName to be invoked.

2002-12-21  Miguel de Icaza  <miguel@ximian.com>

	* cs-tokenizer.cs: Small fix to the parser: compute the ascii
	number before adding it.

2002-12-21  Ravi Pratap  <ravi@ximian.com>

	* ecore.cs (StandardImplicitConversion): When in an unsafe
	context, we allow conversion between void * to any other pointer
	type. This fixes bug #35973.

2002-12-20 Jackson Harper <jackson@latitudegeo.com>

	* codegen.cs: Use Path.GetFileNameWithoutExtension so an exception
	is not thrown when extensionless outputs are used 

2002-12-20  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* rootcontext.cs: fixed compilation of corlib.

2002-12-19  Miguel de Icaza  <miguel@ximian.com>

	* attribute.cs (Attributes.Contains): Add new method.

	* class.cs (MethodCore.LabelParameters): if the parameter is an
	`out' parameter, check that no attribute `[In]' has been passed.

	* enum.cs: Handle the `value__' name in an enumeration.

2002-12-14  Jaroslaw Kowalski <jarek@atm.com.pl>

	* decl.cs: Added special case to allow overrides on "protected
	internal" methods

2002-12-18  Ravi Pratap  <ravi@ximian.com>

	* attribute.cs (Attributes.AddAttributeSection): Rename to this
	since it makes much more sense.

	(Attributes.ctor): Don't require a Location parameter.

	* rootcontext.cs (AddGlobalAttributeSection): Rename again.

	* attribute.cs (ApplyAttributes): Remove extra Location parameters
	since we already have that information per attribute.

	* everywhere : make appropriate changes.

	* class.cs (LabelParameters): Write the code which actually
	applies attributes to the return type. We can't do this on the MS
	.NET runtime so we flag a warning in the case an exception is
	thrown.

2002-12-18  Miguel de Icaza  <miguel@ximian.com>

	* const.cs: Handle implicit null conversions here too.

2002-12-17  Ravi Pratap  <ravi@ximian.com>

	* class.cs (MethodCore.LabelParameters): Remove the extra
	Type [] parameter since it is completely unnecessary. Instead
	pass in the method's attributes so that we can extract
	the "return" attribute.

2002-12-17  Miguel de Icaza  <miguel@ximian.com>

	* cs-parser.jay (parse): Use Report.Error to flag errors instead
	of ignoring it and letting the compile continue.

	* typemanager.cs (ChangeType): use an extra argument to return an
	error condition instead of throwing an exception.

2002-12-15  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (Unary.TryReduce): mimic the code for the regular
	code path.  Perform an implicit cast in the cases where we can
	implicitly convert to one of the integral types, and then reduce
	based on that constant.   This fixes bug #35483.

2002-12-14  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* typemanager.cs: fixed cut & paste error in GetRemoveMethod.

2002-12-13  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* namespace.cs: fixed bug #35489.

2002-12-12  Miguel de Icaza  <miguel@ximian.com>

	* class.cs: Remove some dead code.

	* cs-parser.jay: Estimate the number of methods needed
	(RootContext.MethodCount);

	* cs-tokenizer.cs: Use char arrays for parsing identifiers and
	numbers instead of StringBuilders.

	* support.cs (PtrHashtable): Add constructor with initial size;
	We can now reduce reallocations of the method table.

2002-12-10  Ravi Pratap  <ravi@ximian.com>

	* attribute.cs (ApplyAttributes): Keep track of the emitted
	attributes on a per-target basis. This fixes bug #35413.

2002-12-10  Miguel de Icaza  <miguel@ximian.com>

	* driver.cs (MainDriver): On rotor encoding 28591 does not exist,
	default to the Windows 1252 encoding.

	(UnixParseOption): Support version, thanks to Alp for the missing
	pointer. 

	* AssemblyInfo.cs: Add nice assembly information.

	* cs-tokenizer.cs: Add fix from Felix to the #if/#else handler
	(bug 35169).

	* cs-parser.jay: Allow a trailing comma before the close bracked
	in the attribute_section production.

	* ecore.cs (FieldExpr.AddressOf): Until I figure out why the
	address of the instance was being taken, I will take this out,
	because we take the address of the object immediately here.

2002-12-09  Ravi Pratap  <ravi@ximian.com>

	* typemanager.cs (AreMultipleAllowed): Take care of the most
	obvious case where attribute type is not in the current assembly -
	stupid me ;-)

2002-12-08  Miguel de Icaza  <miguel@ximian.com>

	* ecore.cs (SimpleName.DoResolve): First perform lookups on using
	definitions, instead of doing that afterwards.  

	Also we use a nice little hack, depending on the constructor, we
	know if we are a "composed" name or a simple name.  Hence, we
	avoid the IndexOf test, and we avoid 

	* codegen.cs: Add code to assist in a bug reporter to track down
	the source of a compiler crash. 

2002-12-07  Ravi Pratap  <ravi@ximian.com>

	* attribute.cs (Attribute.ApplyAttributes) : Keep track of which attribute
	types have been emitted for a given element and flag an error
	if something which does not have AllowMultiple set is used more
	than once.

	* typemanager.cs (RegisterAttributeAllowMultiple): Keep track of
	attribute types and their corresponding AllowMultiple properties

	(AreMultipleAllowed): Check the property for a given type.

	* attribute.cs (Attribute.ApplyAttributes): Register the AllowMultiple
	property in the case we have a TypeContainer.

	(Attributes.AddAttribute): Detect duplicates and just skip on
	adding them. This trivial fix catches a pretty gross error in our
	attribute emission - global attributes were being emitted twice!

	Bugzilla bug #33187 is now fixed.

2002-12-06  Miguel de Icaza  <miguel@ximian.com>

	* cs-tokenizer.cs (pp_expr): Properly recurse here (use pp_expr
	instead of pp_and).

	* expression.cs (Binary.ResolveOperator): I can only use the
	Concat (string, string, string) and Concat (string, string,
	string, string) if the child is actually a concatenation of
	strings. 

2002-12-04  Miguel de Icaza  <miguel@ximian.com>

	* cs-tokenizer.cs: Small fix, because decimal_digits is used in a
	context where we need a 2-character lookahead.

	* pending.cs (PendingImplementation): Rework so we can keep track
	of interface types all the time, and flag those which were
	implemented by parents as optional.

2002-12-03  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (Binary.ResolveOperator): Use
	String.Concat(string,string,string) or
	String.Concat(string,string,string,string) when possible. 

	* typemanager: More helper methods.


Tue Dec 3 19:32:04 CET 2002 Paolo Molaro <lupus@ximian.com>

	* pending.cs: remove the bogus return from GetMissingInterfaces()
	(see the 2002-11-06 entry: the mono runtime is now fixed in cvs).

2002-12-02  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* namespace.cs: avoid duplicated 'using xxx' being added to
	using_clauses. This prevents mcs from issuing and 'ambiguous type' error
	when we get more than one 'using' statement for the same namespace.
	Report a CS0105 warning for it.

2002-11-30  Miguel de Icaza  <miguel@ximian.com>

	* cs-tokenizer.cs (consume_identifier): use read directly, instead
	of calling getChar/putback, uses internal knowledge of it.    

	(xtoken): Reorder tokenizer so most common patterns are checked
	first.  This reduces the compilation time in another 5% (from 8.11s
	average to 7.73s for bootstrapping mcs on my Mobile p4/1.8ghz).

	The parsing time is 22% of the compilation in mcs, and from that
	64% is spent on the tokenization process.  

	I tried using a binary search for keywords, but this is slower
	than the hashtable.  Another option would be to do a couple of
	things:

		* Not use a StringBuilder, instead use an array of chars,
		  with a set value.  Notice that this way we could catch
		  the 645 error without having to do it *afterwards*.

		* We could write a hand-parser to avoid the hashtable
		  compares altogether.

	The identifier consumption process takes 37% of the tokenization
	time.  Another 15% is spent on is_number.  56% of the time spent
	on is_number is spent on Int64.Parse:

		* We could probably choose based on the string length to
		  use Int32.Parse or Int64.Parse and avoid all the 64-bit
		  computations. 

	Another 3% is spend on wrapping `xtoken' in the `token' function.

	Handle 0xa0 as whitespace (#34752)

2002-11-26  Miguel de Icaza  <miguel@ximian.com>

	* typemanager.cs (IsCLRType): New routine to tell whether a type
	is one of the builtin types.  

	Maybe it needs to use TypeCodes to be faster.  Maybe we could use
	typecode in more places instead of doing pointer comparissions.
	We could leverage some knowledge about the way the typecodes are
	laid out.

	New code to cache namespaces in assemblies, it is currently not
	invoked, to be used soon.

	* decl.cs (DeclSpace.MakeFQN): Simple optimization.

	* expression.cs (Binary.ResolveOperator): specially handle
	strings, and do not perform user-defined operator overloading for
	built-in types.

2002-11-24  Miguel de Icaza  <miguel@ximian.com>

	* cs-tokenizer.cs: Avoid calling Char.IsDigit which is an
	internalcall as it is a pretty simple operation;  Avoid whenever
	possible to call Char.IsLetter.

	(consume_identifier): Cut by half the number of
	hashtable calls by merging the is_keyword and GetKeyword behavior.

	Do not short-circuit, because if we do, we
	report errors (ie, #if false && true would produce an invalid
	directive error);


2002-11-24  Martin Baulig  <martin@ximian.com>

	* expression.cs (Cast.TryReduce): If we're in checked syntax,
	check constant ranges and report a CS0221.  Fixes #33186.

2002-11-24  Martin Baulig  <martin@ximian.com>

	* cs-parser.jay: Make this work for uninitialized variable
	declarations in the `for' initializer.  Fixes #32416.

2002-11-24  Martin Baulig  <martin@ximian.com>

	* ecore.cs (Expression.ConvertExplicit): Make casting from/to
	System.Enum actually work.  Fixes bug #32269, added verify-6.cs.

2002-11-24  Martin Baulig  <martin@ximian.com>

	* expression.cs (Binary.DoNumericPromotions): Added `check_user_conv'
	argument; if true, we also check for user-defined conversions.
	This is only needed if both arguments are of a user-defined type.
	Fixes #30443, added test-175.cs.
	(Binary.ForceConversion): Pass the location argument to ConvertImplicit.

	* ecore.cs (Expression.ImplicitUserConversionExists): New method.

2002-11-24  Martin Baulig  <martin@ximian.com>

	* expression.cs (ArrayAccess.GetStoreOpcode): New public static
	function to get the store opcode.
	(Invocation.EmitParams): Call ArrayAccess.GetStoreOpcode() and
	only emit the Ldelema if the store opcode is Stobj.  You must run
	both test-34 and test-167 to test this.  Fixes #34529.

2002-11-23  Martin Baulig  <martin@ximian.com>

	* ecore.cs (Expression.MemberLookup): Added additional
	`qualifier_type' argument which is used when we're being called
	from MemberAccess.DoResolve() and null if we're called from a
	SimpleName lookup.
	(Expression.MemberLookupFailed): New method to report errors; this
	does the CS1540 check and reports the correct error message.

	* typemanager.cs (MemberLookup): Added additional `qualifier_type'
	argument for the CS1540 check and redone the way how we're dealing
	with private members.  See the comment in the source code for details.
	(FilterWithClosure): Reverted this back to revision 1.197; renamed
	`closure_start_type' to `closure_qualifier_type' and check whether
	it's not null.  It was not this filter being broken, it was just
	being called with the wrong arguments.

	* expression.cs (MemberAccess.DoResolve): use MemberLookupFinal()
	and pass it the correct `qualifier_type'; this also does the error
	handling for us.

2002-11-22  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (Invocation.EmitParams): If the we are dealing
	with a non-built-in value type, load its address as well.

	(ArrayCreation): Use a a pretty constant instead
	of the hardcoded value 2.   Use 6 instead of 2 for the number of
	static initializers.  

	(ArrayCreation.EmitDynamicInitializers): Peel enumerations,
	because they are not really value types, just glorified integers. 

	* driver.cs: Do not append .exe, the CSC compiler does not do it.

	* ecore.cs: Remove redundant code for enumerations, make them use
	the same code path as everything else, fixes the casting issue
	with enumerations in Windows.Forms.

	* attribute.cs: Do only cast to string if it is a string, the
	validation happens later.

	* typemanager.cs: Temproary hack to avoid a bootstrap issue until
	people upgrade their corlibs.

	* ecore.cs: Oops, enumerations were not following the entire code path

2002-11-21  Miguel de Icaza  <miguel@ximian.com>

	* typemanager.cs (FilterWithClosure): Commented out the test for
	1540 in typemanager.cs, as it has problems when accessing
	protected methods from a parent class (see test-174.cs). 

	* attribute.cs (Attribute.ValidateGuid): new method.
	(Attribute.Resolve): Use above.

2002-11-19  Miguel de Icaza  <miguel@ximian.com>

	* enum.cs: In FindMembers, perform a recursive lookup for values. (34308)

	* ecore.cs (SimpleName.SimpleNameResolve): Remove the special
	handling for enumerations, as we only needed the TypeContainer
	functionality to begin with (this is required for the fix below to
	work for enums that reference constants in a container class for
	example). 

	* codegen.cs (EmitContext): Make TypeContainer a DeclSpace.

	* enum.cs (Enum.Define): Use `this' instead of parent, so we have
	a valid TypeBuilder to perform lookups on.o

	* class.cs (InheritableMemberSignatureCompare): Use true in the
	call to GetGetMethod and GetSetMethod, because we are comparing
	the signature, and we need to get the methods *even* if they are
	private. 

	(PropertyBase.CheckBase): ditto.

	* statement.cs (Switch.ResolveAndReduce, Block.EmitMeta,
	GotoCase.Resolve): Use Peel on EmpytCasts.

	* ecore.cs (EmptyCast): drop child, add Peel method.

2002-11-17  Martin Baulig  <martin@ximian.com>

	* ecore.cs (EmptyCast.Child): New public property.

	* statement.cs (SwitchLabel.ResolveAndReduce): Check whether the
	label resolved to an EmptyCast.  Fixes #34162.
	(GotoCase.Resolve): Likewise.
	(Block.EmitMeta): Likewise.

2002-11-17  Martin Baulig  <martin@ximian.com>

	* expression.cs (Invocation.BetterConversion): Prefer int over
	uint; short over ushort; long over ulong for integer literals.
	Use ImplicitConversionExists instead of StandardConversionExists
	since we also need to check for user-defined implicit conversions.
	Fixes #34165.  Added test-173.cs.

2002-11-16  Martin Baulig  <martin@ximian.com>

	* expression.cs (Binary.EmitBranchable): Eliminate comparisions
	with the `true' and `false' literals.  Fixes #33151.

2002-11-16  Martin Baulig  <martin@ximian.com>

	* typemanager.cs (RealMemberLookup): Reverted Miguel's patch from
	October 22nd; don't do the cs1540 check for static members.

	* ecore.cs (PropertyExpr.ResolveAccessors): Rewrote this; we're
	now using our own filter here and doing the cs1540 check again.

2002-11-16  Martin Baulig  <martin@ximian.com>

	* support.cs (InternalParameters): Don't crash if we don't have
	any fixed parameters.  Fixes #33532.

2002-11-16  Martin Baulig  <martin@ximian.com>

	* decl.cs (MemberCache.AddMethods): Use BindingFlags.FlattenHierarchy
	when looking up static methods to make this work on Windows.
	Fixes #33773.

2002-11-16  Martin Baulig  <martin@ximian.com>

	* ecore.cs (PropertyExpr.VerifyAssignable): Check whether we have
	a setter rather than using PropertyInfo.CanWrite.

2002-11-15  Nick Drochak  <ndrochak@gol.com>

	* class.cs: Allow acces to block member by subclasses. Fixes build
	breaker.

2002-11-14  Martin Baulig  <martin@ximian.com>

	* class.cs (Constructor.Emit): Added the extern/block check.
	Fixes bug #33678.

2002-11-14  Martin Baulig  <martin@ximian.com>

	* expression.cs (IndexerAccess.DoResolve): Do a DeclaredOnly
	iteration while looking for indexers, this is needed because the
	indexer may have a different name in our base classes.  Fixed the
	error reporting (no indexers at all, not get accessor, no
	overloaded match).  Fixes bug #33089.
	(IndexerAccess.DoResolveLValue): Likewise.

2002-11-14  Martin Baulig  <martin@ximian.com>

	* class.cs (PropertyBase.CheckBase): Make this work for multiple
	indexers.  Fixes the first part of bug #33089.
	(MethodSignature.InheritableMemberSignatureCompare): Added support
	for properties.

2002-11-13  Ravi Pratap  <ravi@ximian.com>

	* attribute.cs (Attribute.Resolve): Catch the
	NullReferenceException and report it since it isn't supposed to
	happen. 

2002-11-12  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (Binary.EmitBranchable): Also handle the cases for
	LogicalOr and LogicalAnd that can benefit from recursively
	handling EmitBranchable.  The code now should be nice for Paolo.

2002-11-08  Miguel de Icaza  <miguel@ximian.com>

	* typemanager.cs (LookupType): Added a negative-hit hashtable for
	the Type lookups, as we perform quite a number of lookups on
	non-Types.  This can be removed once we can deterministically tell
	whether we have a type or a namespace in advance.

	But this might require special hacks from our corlib.

	* TODO: updated.

	* ecore.cs (TryImplicitIntConversion): Handle conversions to float
	and double which avoids a conversion from an integer to a double.

	* expression.cs: tiny optimization, avoid calling IsConstant,
	because it effectively performs the lookup twice.

2002-11-06  Miguel de Icaza  <miguel@ximian.com>

	But a bogus return here to keep the semantics of the old code
	until the Mono runtime is fixed.

	* pending.cs (GetMissingInterfaces): New method used to remove all
	the interfaces that are already implemented by our parent
	classes from the list of pending methods. 

	* interface.cs: Add checks for calls after ResolveTypeExpr.

2002-11-05  Miguel de Icaza  <miguel@ximian.com>

	* class.cs (Class.Emit): Report warning 67: event not used if the
	warning level is beyond 3.

	* ecore.cs (Expression.ConvertExplicit): Missed a check for expr
	being a NullLiteral.

	* cs-parser.jay: Fix, Gonzalo reverted the order of the rank
	specifiers. 

	* class.cs (TypeContainer.GetClassBases): Cover a missing code
	path that might fail if a type can not be resolved.

	* expression.cs (Binary.Emit): Emit unsigned versions of the
	operators. 

	* driver.cs: use error 5.

2002-11-02  Gonzalo Paniagua Javier <gonzalo@gnome-db.org>

	* cs-parser.jay: simplified a rule and 5 SR conflicts dissapeared.

2002-11-01  Miguel de Icaza  <miguel@ximian.com>

	* cs-parser.jay (switch_section): A beautiful patch from Martin
	Baulig that fixed 33094.

2002-10-31  Miguel de Icaza  <miguel@ximian.com>

	* ecore.cs (PropertyExpr.DoResolveLValue, PropertyExpr.DoResolve):
	Check whether the base is abstract and report an error if so.

	* expression.cs (IndexerAccess.DoResolveLValue,
	IndexerAccess.DoResolve): ditto. 

	(Invocation.DoResolve): ditto.

	(Invocation.FullMethodDesc): Improve the report string.

	* statement.cs (Block): Eliminate IsVariableDefined as it is
	basically just a wrapper for GetVariableInfo.

	* ecore.cs (SimpleName): Use new 

	* support.cs (ReflectionParamter.ParameterType): We unwrap the
	type, as we return the actual parameter ref/unref state on a
	different call.

2002-10-30  Miguel de Icaza  <miguel@ximian.com>

	* support.cs: Return proper flags REF/OUT fixing the previous
	commit.  

	* expression.cs: Reverted last patch, that was wrong.  Is_ref is
	not used to mean `ref' but `ref or out' in ParameterReference

	* delegate.cs (FullDelegateDesc): use ParameterDesc to get the
	full type signature instead of calling TypeManger.CSharpName
	ourselves. 

	* support.cs (InternalParameters.ParameterDesc): Do not compare
	directly to the modflags, because REF/OUT will actually be bitsets
	if set. 

	* delegate.cs (VerifyMethod): Check also the modifiers.

	* cs-tokenizer.cs: Fix bug where floating point values with an
	exponent where a sign was missing was ignored.

	* driver.cs: Allow multiple assemblies to be specified in a single
	/r: argument

2002-10-28  Miguel de Icaza  <miguel@ximian.com>

	* cs-parser.jay: Ugly.  We had to add a multiplicative_expression,
	because identifiers after a parenthesis would end up in this kind
	of production, and we needed to desamiguate it for having casts
	like:

		(UserDefinedType *) xxx

2002-10-24  Miguel de Icaza  <miguel@ximian.com>

	* typemanager.cs (RealMemberLookup): when we deal with a subclass,
	we should set on the Bindingflags.NonPublic, but not turn on
	private_ok.  private_ok controls whether a Private member is
	returned (this is chekced on the filter routine), while the
	BindingFlags.NonPublic just controls whether private/protected
	will be allowed.   This fixes the problem part of the problem of
	private properties being allowed to be used in derived classes.

	* expression.cs (BaseAccess): Provide an DoResolveLValue method,
	so we can call the children DoResolveLValue method (this will
	properly signal errors on lvalue assignments to base properties)

	* ecore.cs (PropertyExpr.ResolveAccessors): If both setter and
	getter are null, and we have a property info, we know that this
	happened because the lookup failed, so we report an error 122 for
	protection level violation.

	We also silently return if setter and getter are null in the
	resolve functions, this condition only happens if we have flagged
	the error before.  This is the other half of the problem. 

	(PropertyExpr.ResolveAccessors): Turns out that PropertyInfo does
	not have accessibility information, that is why we were returning
	true in the filter function in typemanager.cs.

	To properly report 122 (property is inaccessible because of its
	protection level) correctly, we report this error in ResolveAccess
	by failing if both the setter and the getter are lacking (ie, the
	lookup failed). 

	DoResolve and DoLResolve have been modified to check for both
	setter/getter being null and returning silently, the reason being
	that I did not want to put the knowledge about this error in upper
	layers, like:

	int old = Report.Errors;
	x = new PropertyExpr (...);
	if (old != Report.Errors)
		return null;
	else
	        return x;

	So the property expr is returned, but it is invalid, so the error
	will be flagged during the resolve process. 

	* class.cs: Remove InheritablePropertySignatureCompare from the
	class, as we no longer depend on the property signature to compute
	whether it is possible to implement a method or not.

	The reason is that calling PropertyInfo.GetGetMethod will return
	null (in .NET, in Mono it works, and we should change this), in
	cases where the Get Method does not exist in that particular
	class.

	So this code:

	class X { public virtual int A { get { return 1; } } }
	class Y : X { }
	class Z : Y { public override int A { get { return 2; } } }

	Would fail in Z because the parent (Y) would not have the property
	defined.  So we avoid this completely now (because the alternative
	fix was ugly and slow), and we now depend exclusively on the
	method names.

	(PropertyBase.CheckBase): Use a method-base mechanism to find our
	reference method, instead of using the property.

	* typemanager.cs (GetPropertyGetter, GetPropertySetter): These
	routines are gone now.

	* typemanager.cs (GetPropertyGetter, GetPropertySetter): swap the
	names, they were incorrectly named.

	* cs-tokenizer.cs: Return are more gentle token on failure. 

	* pending.cs (PendingImplementation.InterfaceMethod): This routine
	had an out-of-sync index variable, which caused it to remove from
	the list of pending methods the wrong method sometimes.

2002-10-22  Miguel de Icaza  <miguel@ximian.com>

	* ecore.cs (PropertyExpr): Do not use PropertyInfo.CanRead,
	CanWrite, because those refer to this particular instance of the
	property, and do not take into account the fact that we can
	override single members of a property.

	Constructor requires an EmitContext.  The resolution process does
	not happen here, but we need to compute the accessors before,
	because the resolution does not always happen for properties.

	* typemanager.cs (RealMemberLookup): Set private_ok if we are a
	subclass, before we did not update this flag, but we did update
	bindingflags. 

	(GetAccessors): Drop this routine, as it did not work in the
	presence of partially overwritten set/get methods. 

	Notice that this broke the cs1540 detection, but that will require
	more thinking. 

2002-10-22  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* class.cs:
	* codegen.cs:
	* driver.cs: issue a warning instead of an error if we don't support
	debugging for the platform. Also ignore a couple of errors that may
	arise when trying to write the symbols. Undo my previous patch.

2002-10-22  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* driver.cs: ignore /debug switch except for Unix platforms.

2002-10-23  Nick Drochak  <ndrochak@gol.com>

	* makefile: Remove mcs2.exe and mcs3.exe on 'make clean'

2002-10-21  Miguel de Icaza  <miguel@ximian.com>

	* driver.cs: Do not make mcs-debug conditional, so we do not break
	builds that use it.

	* statement.cs (UsageVector.MergeChildren): I would like Martin to
	review this patch.  But basically after all the children variables
	have been merged, the value of "Breaks" was not being set to
	new_breaks for Switch blocks.  I think that it should be set after
	it has executed.  Currently I set this to the value of new_breaks,
	but only if new_breaks is FlowReturn.ALWAYS, which is a bit
	conservative, but I do not understand this code very well.

	I did not break anything in the build, so that is good ;-)

	* cs-tokenizer.cs: Also allow \r in comments as a line separator.

2002-10-20  Mark Crichton  <crichton@gimp.org>

	* cfold.cs: Fixed compile blocker.  Really fixed it this time.

2002-10-20  Nick Drochak  <ndrochak@gol.com>

	* cfold.cs: Fixed compile blocker.

2002-10-20  Miguel de Icaza  <miguel@ximian.com>

	* driver.cs: I was chekcing the key, not the file.

2002-10-19  Ravi Pratap  <ravi@ximian.com>

	* ecore.cs (UserDefinedConversion): Get rid of the bogus error
	message that we were generating - we just need to silently return
	a null.

2002-10-19  Miguel de Icaza  <miguel@ximian.com>

	* class.cs (Event.Define): Change my previous commit, as this
	breaks the debugger.  This is a temporary hack, as it seems like
	the compiler is generating events incorrectly to begin with.

	* expression.cs (Binary.ResolveOperator): Added support for 
	"U operator - (E x, E y)"

	* cfold.cs (BinaryFold): Added support for "U operator - (E x, E
	y)".

	* ecore.cs (FieldExpr.AddressOf): We had a special code path for
	init-only variables, but this path did not take into account that
	there might be also instance readonly variables.  Correct this
	problem. 

	This fixes bug 32253

	* delegate.cs (NewDelegate.DoResolve): Catch creation of unsafe
	delegates as well.

	* driver.cs: Change the extension for modules to `netmodule'

	* cs-parser.jay: Improved slightly the location tracking for
	the debugger symbols.

	* class.cs (Event.Define): Use Modifiers.FieldAttr on the
	modifiers that were specified instead of the hardcoded value
	(FamAndAssem).  This was basically ignoring the static modifier,
	and others.  Fixes 32429.

	* statement.cs (Switch.SimpleSwitchEmit): Simplified the code, and
	fixed a bug in the process (32476)

	* expression.cs (ArrayAccess.EmitAssign): Patch from
	hwang_rob@yahoo.ca that fixes bug 31834.3

2002-10-18  Miguel de Icaza  <miguel@ximian.com>

	* driver.cs: Make the module extension .netmodule.

2002-10-16  Miguel de Icaza  <miguel@ximian.com>

	* driver.cs: Report an error if the resource file is not found
	instead of crashing.

	* ecore.cs (PropertyExpr.EmitAssign): Pass IsBase instead of
	false, like Emit does.

2002-10-16  Nick Drochak  <ndrochak@gol.com>

	* typemanager.cs: Remove unused private member.  Also reported mcs
	bug to report this as a warning like csc.

2002-10-15  Martin Baulig  <martin@gnome.org>

	* statement.cs (Statement.Emit): Made this a virtual method; emits
	the line number info and calls DoEmit().
	(Statement.DoEmit): New protected abstract method, formerly knows
	as Statement.Emit().

	* codegen.cs (EmitContext.Mark): Check whether we have a symbol writer.

2002-10-11  Miguel de Icaza  <miguel@ximian.com>

	* class.cs: Following the comment from 2002-09-26 to AddMethod, I
	have fixed a remaining problem: not every AddXXXX was adding a
	fully qualified name.  

	Now everyone registers a fully qualified name in the DeclSpace as
	being defined instead of the partial name.  

	Downsides: we are slower than we need to be due to the excess
	copies and the names being registered this way.  

	The reason for this is that we currently depend (on the corlib
	bootstrap for instance) that types are fully qualified, because
	we dump all the types in the namespace, and we should really have
	types inserted into the proper namespace, so we can only store the
	basenames in the defined_names array.

2002-10-10  Martin Baulig  <martin@gnome.org>

	* expression.cs (ArrayAccess.EmitStoreOpcode): Reverted the patch
	from bug #31834, see the bug report for a testcase which is
	miscompiled.

2002-10-10  Martin Baulig  <martin@gnome.org>

	* codegen.cs (EmitContext.Breaks): Removed, we're now using the
	flow analysis code for this.

	* statement.cs (Do, While, For): Tell the flow analysis code about
	infinite loops.
	(FlowBranching.UsageVector): Added support for infinite loops.
	(Block.Resolve): Moved the dead code elimination here and use flow
	analysis to do it.

2002-10-09  Miguel de Icaza  <miguel@ximian.com>

	* class.cs (Field.Define): Catch cycles on struct type
	definitions. 

	* typemanager.cs (IsUnmanagedtype): Do not recursively check
	fields if the fields are static.  We only need to check instance
	fields. 

	* expression.cs (As.DoResolve): Test for reference type.

	* statement.cs (Using.ResolveExpression): Use
	ConvertImplicitRequired, not ConvertImplicit which reports an
	error on failture
	(Using.ResolveLocalVariableDecls): ditto.

	* expression.cs (Binary.ResolveOperator): Report errors in a few
	places where we had to.

	* typemanager.cs (IsUnmanagedtype): Finish implementation.

2002-10-08  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs: Use StoreFromPtr instead of extracting the type
	and then trying to use Stelem.  Patch is from hwang_rob@yahoo.ca

	* ecore.cs (ImplicitReferenceConversion): It is possible to assign
	an enumeration value to a System.Enum, but System.Enum is not a
	value type, but an class type, so we need to box.

	(Expression.ConvertExplicit): One codepath could return
	errors but not flag them.  Fix this.  Fixes #31853

	* parameter.cs (Resolve): Do not allow void as a parameter type.

2002-10-06  Martin Baulig  <martin@gnome.org>

	* statemenc.cs (FlowBranching.SetParameterAssigned): Don't crash
	if it's a class type and not a struct.  Fixes #31815.

2002-10-06  Martin Baulig  <martin@gnome.org>

	* statement.cs: Reworked the flow analysis code a bit to make it
	usable for dead code elimination.

2002-10-06  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* cs-parser.jay: allow empty source files. Fixes bug #31781.

2002-10-04  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (ComposedCast.DoResolveType): A quick workaround
	to fix the test 165, will investigate deeper.

2002-10-04  Martin Baulig  <martin@gnome.org>

	* statement.cs (FlowBranching.UsageVector.MergeChildren): Make
	finally blocks actually work.
	(Try.Resolve): We don't need to create a sibling for `finally' if
	there is no finally block.

2002-10-04  Martin Baulig  <martin@gnome.org>

	* class.cs (Constructor.Define): The default accessibility for a
	non-default constructor is private, not public.

2002-10-04  Miguel de Icaza  <miguel@ximian.com>

	* class.cs (Constructor): Make AllowedModifiers public, add
	EXTERN.

	* cs-parser.jay: Perform the modifiers test here, as the
	constructor for the Constructor class usually receives a zero
	because of the way we create it (first we create, later we
	customize, and we were never checking the modifiers).

	* typemanager.cs (Typemanager.LookupTypeDirect): This new function
	is a version of LookupTypeReflection that includes the type-name
	cache.  This can be used as a fast path for functions that know
	the fully qualified name and are only calling into *.GetType() to
	obtain a composed type.

	This is also used by TypeManager.LookupType during its type
	composition.

	(LookupType): We now also track the real type name, as sometimes
	we can get a quey for the real type name from things like
	ComposedCast.  This fixes bug 31422.

	* expression.cs (ComposedCast.Resolve): Since we are obtaining a
	complete type fullname, it does not have to go through the type
	resolution system to obtain the composed version of the type (for
	obtaining arrays or pointers).

	(Conditional.Emit): Use the EmitBoolExpression to
	generate nicer code, as requested by Paolo.

	(ArrayCreation.CheckIndices): Use the patch from
	hwang_rob@yahoo.ca to validate the array initializers. 

2002-10-03  Miguel de Icaza  <miguel@ximian.com>

	* class.cs (ConstructorInitializer.Emit): simplify code by using
	Invocation.EmitCall, and at the same time, fix the bugs in calling
	parent constructors that took variable arguments. 

	* ecore.cs (Expression.ConvertNumericExplicit,
	Expression.ImplicitNumericConversion): Remove the code that
	manually wrapped decimal (InternalTypeConstructor call is now gone
	as well).

	* expression.cs (Cast.TryReduce): Also handle decimal types when
	trying to perform a constant fold on the type.

	* typemanager.cs (IsUnmanagedtype): Partially implemented.

	* parameter.cs: Removed ResolveAndDefine, as it was not needed, as
	that only turned off an error report, and did nothing else. 

2002-10-02  Miguel de Icaza  <miguel@ximian.com>

	* driver.cs: Handle and ignore /fullpaths

2002-10-01  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (Binary.ResolveOperator): Catch the case where
	DoNumericPromotions returns true, 

	(Binary.DoNumericPromotions): Simplify the code, and the tests.

2002-09-27  Miguel de Icaza  <miguel@ximian.com>

	* ecore.cs (EventExpr.Emit): Instead of emitting an exception,
	report error 70.

2002-09-26  Miguel de Icaza  <miguel@ximian.com>

	* ecore.cs (ConvertNumericExplicit): It is not enough that the
	conversion exists, but it is also required that the conversion be
	performed.  This manifested in "(Type64Enum) 2".  

	* class.cs (TypeManager.AddMethod): The fix is not to change
	AddEnum, because that one was using a fully qualified name (every
	DeclSpace derivative does), but to change the AddMethod routine
	that was using an un-namespaced name.  This now correctly reports
	the duplicated name.

	Revert patch until I can properly fix it.  The issue
	is that we have a shared Type space across all namespaces
	currently, which is wrong.

	Options include making the Namespace a DeclSpace, and merge
	current_namespace/current_container in the parser.

2002-09-25  Miguel de Icaza  <miguel@ximian.com>

	* cs-parser.jay: Improve error reporting when we get a different
	kind of expression in local_variable_type and
	local_variable_pointer_type. 

	Propagate this to avoid missleading errors being reported.

	* ecore.cs (ImplicitReferenceConversion): treat
	TypeManager.value_type as a target just like object_type.   As
	code like this:

	ValueType v = 1;

	Is valid, and needs to result in the int 1 being boxed before it
	is assigned to the value type v.

	* class.cs (TypeContainer.AddEnum): Use the basename, not the name
	to validate the enumeration name.

	* expression.cs (ArrayAccess.EmitAssign): Mimic the same test from
	EmitDynamicInitializers for the criteria to use Ldelema.  Thanks
	to hwang_rob@yahoo.ca for finding the bug and providing a patch.

	* ecore.cs (TryImplicitIntConversion): When doing an
	implicit-enumeration-conversion, check if the type is 64-bits and
	perform a conversion before passing to EnumConstant.

2002-09-23  Miguel de Icaza  <miguel@ximian.com>

	* decl.cs (Error_AmbiguousTypeReference); New routine used to
	report ambiguous type references.  Unlike the MS version, we
	report what the ambiguity is.   Innovation at work ;-)

	(DeclSpace.FindType): Require a location argument to
	display when we display an ambiguous error.

	* ecore.cs: (SimpleName.DoResolveType): Pass location to FindType.

	* interface.cs (GetInterfaceTypeByName): Pass location to FindType.

	* expression.cs (EmitDynamicInitializers): Apply patch from
	hwang_rob@yahoo.ca that fixes the order in which we emit our
	initializers. 

2002-09-21  Martin Baulig  <martin@gnome.org>

	* delegate.cs (Delegate.VerifyApplicability): Make this work if the
	delegate takes no arguments.

2002-09-20  Miguel de Icaza  <miguel@ximian.com>

	* constant.cs: Use Conv_U8 instead of Conv_I8 when loading longs
	from integers.

	* expression.cs: Extract the underlying type.

	* ecore.cs (StoreFromPtr): Use TypeManager.IsEnumType instad of IsEnum

	* decl.cs (FindType): Sorry about this, fixed the type lookup bug.

2002-09-19  Miguel de Icaza  <miguel@ximian.com>

	* class.cs (TypeContainer.DefineType): We can not use the nice
	PackingSize with the size set to 1 DefineType method, because it
	will not allow us to define the interfaces that the struct
	implements.

	This completes the fixing of bug 27287

	* ecore.cs (Expresion.ImplicitReferenceConversion): `class-type S'
	means also structs.  This fixes part of the problem. 
	(Expresion.ImplicitReferenceConversionExists): ditto.

	* decl.cs (DeclSparce.ResolveType): Only report the type-not-found
	error if there were no errors reported during the type lookup
	process, to avoid duplicates or redundant errors.  Without this
	you would get an ambiguous errors plus a type not found.  We have
	beaten the user enough with the first error.  

	(DeclSparce.FindType): Emit a warning if we have an ambiguous
	reference. 

	* ecore.cs (SimpleName.DoResolveType): If an error is emitted
	during the resolution process, stop the lookup, this avoids
	repeated error reports (same error twice).

	* rootcontext.cs: Emit a warning if we have an ambiguous reference.

	* typemanager.cs (LookupType): Redo the type lookup code to match
	the needs of System.Reflection.  

	The issue is that System.Reflection requires references to nested
	types to begin with a "+" sign instead of a dot.  So toplevel
	types look like: "NameSpace.TopLevelClass", and nested ones look
	like "Namespace.TopLevelClass+Nested", with arbitrary nesting
	levels. 

2002-09-19  Martin Baulig  <martin@gnome.org>

	* codegen.cs (EmitContext.EmitTopBlock): If control flow analysis
	says that a method always returns or always throws an exception,
	don't report the CS0161.

	* statement.cs (FlowBranching.UsageVector.MergeChildren): Always
	set `Returns = new_returns'.

2002-09-19  Martin Baulig  <martin@gnome.org>

	* expression.cs (MemberAccess.ResolveMemberAccess): When resolving
	to an enum constant, check for a CS0176.

2002-09-18  Miguel de Icaza  <miguel@ximian.com>

	* class.cs (TypeContainer.CheckPairedOperators): Now we check
	for operators that must be in pairs and report errors.

	* ecore.cs (SimpleName.DoResolveType): During the initial type
	resolution process, when we define types recursively, we must
	check first for types in our current scope before we perform
	lookups in the enclosing scopes.

	* expression.cs (MakeByteBlob): Handle Decimal blobs.

	(Invocation.VerifyArgumentsCompat): Call
	TypeManager.TypeToCoreType on the parameter_type.GetElementType.
	I thought we were supposed to always call this, but there are a
	few places in the code where we dont do it.

2002-09-17  Miguel de Icaza  <miguel@ximian.com>

	* driver.cs: Add support in -linkres and -resource to specify the
	name of the identifier.

2002-09-16  Miguel de Icaza  <miguel@ximian.com>

	* ecore.cs (StandardConversionExists): Sync with the conversion
	code: allow anything-* to void* conversions.

	(FindMostSpecificSource): Use an Expression argument
	instead of a Type, because we might be handed over a Literal which
	gets a few more implicit conversions that plain types do not.  So
	this information was being lost.

	Also, we drop the temporary type-holder expression when not
	required.

2002-09-17  Martin Baulig  <martin@gnome.org>

	* class.cs (PropertyBase.CheckBase): Don't check the base class if
	this is an explicit interface implementation.

2002-09-17  Martin Baulig  <martin@gnome.org>

	* class.cs (PropertyBase.CheckBase): Make this work for indexers with
	different `IndexerName' attributes.

	* expression.cs (BaseIndexerAccess): Rewrote this class to use IndexerAccess.
	(IndexerAccess): Added special protected ctor for BaseIndexerAccess and
	virtual CommonResolve().

2002-09-16  Miguel de Icaza  <miguel@ximian.com>

	* enum.cs (LookupEnumValue): Use the EnumConstant declared type,
	and convert that to the UnderlyingType.

	* statement.cs (Foreach.Resolve): Indexers are just like variables
	or PropertyAccesses.

	* cs-tokenizer.cs (consume_string): Track line numbers and columns
	inside quoted strings, we were not doing this before.

2002-09-16  Martin Baulig  <martin@gnome.org>

	* ecore.cs (MethodGroupExpr.DoResolve): If we have an instance expression,
	resolve it.  This is needed for the definite assignment check of the
	instance expression, fixes bug #29846.
	(PropertyExpr.DoResolve, EventExpr.DoResolve): Likewise.

2002-09-16  Nick Drochak  <ndrochak@gol.com>

	* parameter.cs: Fix compile error.  Cannot reference static member
	from an instance object.  Is this an mcs bug?

2002-09-14  Martin Baulig  <martin@gnome.org>

	* decl.cs (MemberCache.SetupCacheForInterface): Don't add an interface
	multiple times.  Fixes bug #30295, added test-166.cs.

2002-09-14  Martin Baulig  <martin@gnome.org>

	* statement.cs (Block.Emit): Don't emit unreachable code.
	(Switch.SimpleSwitchEmit, Switch.TableSwitchEmit): Check for missing
	`break' statements.
	(Goto.Emit, Continue.Emit): Set ec.Breaks = true.

2002-09-14  Martin Baulig  <martin@gnome.org>

	* parameter.cs (Parameter.Attributes): Make this work if Modifier.ISBYREF
	is set.

2002-09-14  Martin Baulig  <martin@gnome.org>

	* typemanager.cs (TypeManager.IsNestedChildOf): This must return false
	if `type == parent' since in this case `type.IsSubclassOf (parent)' will
	be false on the ms runtime.

2002-09-13  Martin Baulig  <martin@gnome.org>

	* ecore.cs (SimpleName.SimpleNameResolve): Include the member name in
	the CS0038 error message.

2002-09-12  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (CheckedExpr, UnCheckedExpr): If we have a
	constant inside, return it.

2002-09-12  Martin Baulig  <martin@gnome.org>

	* cfold.cs (ConstantFold.DoConstantNumericPromotions): Check whether an
	implicit conversion can be done between enum types.

	* enum.cs (Enum.LookupEnumValue): If the value is an EnumConstant,
	check whether an implicit conversion to the current enum's UnderlyingType
	exists and report an error if not.

	* codegen.cs (CodeGen.Init): Delete the symbol file when compiling
	without debugging support.

	* delegate.cs (Delegate.CloseDelegate): Removed, use CloseType instead.
	Fixes bug #30235.  Thanks to Ricardo Fernández Pascual.

2002-09-12  Martin Baulig  <martin@gnome.org>

	* typemanager.cs (TypeManager.IsNestedChildOf): New method.

	* ecore.cs (IMemberExpr.DeclaringType): New property.
	(SimpleName.SimpleNameResolve): Check whether we're accessing a
	nonstatic member of an outer type (CS0038).

2002-09-11  Miguel de Icaza  <miguel@ximian.com>

	* driver.cs: Activate the using-error detector at warning level
	4 (at least for MS-compatible APIs).

	* namespace.cs (VerifyUsing): Small buglett fix.

	* pending.cs (PendingImplementation): pass the container pointer. 

	* interface.cs (GetMethods): Allow for recursive definition.  Long
	term, I would like to move every type to support recursive
	definitions, not the current ordering mechanism that we have right
	now.

	The situation is this: Attributes are handled before interfaces,
	so we can apply attributes to interfaces.  But some attributes
	implement interfaces, we will now handle the simple cases
	(recursive definitions will just get an error).  

	* parameter.cs: Only invalidate types at the end if we fail to
	lookup all types.  

2002-09-09  Martin Baulig  <martin@gnome.org>

	* ecore.cs (PropertyExpr.Emit): Also check for
	TypeManager.system_int_array_get_length so this'll also work when
	compiling corlib.  Fixes #30003.

2002-09-09  Martin Baulig  <martin@gnome.org>

	* expression.cs (ArrayCreation.MakeByteBlob): Added support for enums
	and throw an exception if we can't get the type's size.  Fixed #30040,
	added test-165.cs.

2002-09-09  Martin Baulig  <martin@gnome.org>

	* ecore.cs (PropertyExpr.DoResolve): Added check for static properies.

	* expression.cs (SizeOf.DoResolve): Sizeof is only allowed in unsafe
	context.  Fixes bug #30027.

	* delegate.cs (NewDelegate.Emit): Use OpCodes.Ldvirtftn for
	virtual functions.  Fixes bug #30043, added test-164.cs.

2002-09-08  Ravi Pratap  <ravi@ximian.com>

	* attribute.cs : Fix a small NullRef crash thanks to my stupidity.

2002-09-08  Nick Drochak  <ndrochak@gol.com>

	* driver.cs: Use an object to get the windows codepage since it's not a
	static property.

2002-09-08  Miguel de Icaza  <miguel@ximian.com>

	* statement.cs (For.Emit): for infinite loops (test == null)
	return whether there is a break inside, not always "true".

	* namespace.cs (UsingEntry): New struct to hold the name of the
	using definition, the location where it is defined, and whether it
	has been used in a successful type lookup.

	* rootcontext.cs (NamespaceLookup): Use UsingEntries instead of
	strings.

	* decl.cs: ditto.

2002-09-06  Ravi Pratap  <ravi@ximian.com>

	* attribute.cs : Fix incorrect code which relied on catching
	a NullReferenceException to detect a null being passed in
	where an object was expected.

2002-09-06  Miguel de Icaza  <miguel@ximian.com>

	* statement.cs (Try): flag the catch variable as assigned

	* expression.cs (Cast): Simplified by using ResolveType instead of
	manually resolving.

	* statement.cs (Catch): Fix bug by using ResolveType.

2002-09-06  Ravi Pratap  <ravi@ximian.com>

	* expression.cs (BetterConversion): Special case for when we have
	a NullLiteral as the argument and we have to choose between string
	and object types - we choose string the way csc does.

	* attribute.cs (Attribute.Resolve): Catch the
	NullReferenceException and report error #182 since the Mono
	runtime no more has the bug and having this exception raised means
	we tried to select a constructor which takes an object and is
	passed a null.

2002-09-05  Ravi Pratap  <ravi@ximian.com>

	* expression.cs (Invocation.OverloadResolve): Flag a nicer error
	message (1502, 1503) when we can't locate a method after overload
	resolution. This is much more informative and closes the bug
	Miguel reported.

	* interface.cs (PopulateMethod): Return if there are no argument
	types. Fixes a NullReferenceException bug.

	* attribute.cs (Attribute.Resolve): Ensure we allow TypeOf
	expressions too. Previously we were checking only in one place for
	positional arguments leaving out named arguments.

	* ecore.cs (ImplicitNumericConversion): Conversion from underlying
	type to the enum type is not allowed. Remove code corresponding to
	that.

	(ConvertNumericExplicit): Allow explicit conversions from
	the underlying type to enum type. This precisely follows the spec
	and closes a bug filed by Gonzalo.

2002-09-04  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* compiler.csproj:
	* compiler.csproj.user: patch from Adam Chester (achester@bigpond.com).

2002-09-03  Miguel de Icaza  <miguel@ximian.com>

	* statement.cs (SwitchLabel.ResolveAndReduce): In the string case,
	it was important that we stored the right value after the
	reduction in `converted'.

2002-09-04  Martin Baulig  <martin@gnome.org>

	* location.cs (Location.SymbolDocument): Use full pathnames for the
	source files.

2002-08-30  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (ComposedCast): Use DeclSparce.ResolveType instead
	of the expression resolve mechanism, because that will catch the
	SimpleName error failures.

	(Conditional): If we can not resolve the
	expression, return, do not crash.

2002-08-29  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* cs-tokenizer.cs:
	(location): display token name instead of its number.

2002-08-28  Martin Baulig  <martin@gnome.org>

	* expression.cs (Binary.ResolveOperator): Don't silently return
	but return an error if an operator cannot be applied between two
	enum types.

2002-08-28  Martin Baulig  <martin@gnome.org>

	* class.cs (Constructor.Define): Set the permission attributes
	correctly instead of making all constructors public.

2002-08-28  Martin Baulig  <martin@gnome.org>

	* ecore.cs (Expression.DoResolve): Do a TypeManager.MemberLook
	for private members before reporting a CS0103; if we find anything,
	it's a CS0122.

2002-08-28  Martin Baulig  <martin@gnome.org>

	* typemanager.cs (TypeManager.FilterWithClosure): It's not enough
	to check whether `closure_start_type == closure_invocation_type',
	we also need to check whether `m.DeclaringType == closure_invocation_type'
	before bypassing the permission checks.  We might be accessing
	protected/private members from the base class.
	(TypeManager.RealMemberLookup): Only set private_ok if private
	members were requested via BindingFlags.NonPublic.

	* ecore.cs (MethodGroupExpr.IsExplicitImpl): New property.

	* expression.cs (MemberAccess.ResolveMemberAccess): Set
	MethodGroupExpr.IsExplicitImpl if appropriate.
	(Invocation.DoResolve): Don't report the CS0120 for explicit
	interface implementations.

2002-08-27  Martin Baulig  <martin@gnome.org>

	* expression.cs (Invocation.DoResolve): If this is a static
	method and we don't have an InstanceExpression, we must report
	a CS0120.

2002-08-25  Martin Baulig  <martin@gnome.org>

	* expression.cs (Binary.ResolveOperator): Don't allow `!=' and
	`==' between a valuetype and an object.

2002-08-25  Miguel de Icaza  <miguel@ximian.com>

	* ecore.cs (TypeExpr): Provide a ToString method.

2002-08-24  Martin Baulig  <martin@gnome.org>

	* codegen.cs (CodeGen.InitMonoSymbolWriter): The symbol file is
	now called proggie.dbg and it's a binary file.

2002-08-23  Martin Baulig  <martin@gnome.org>

	* decl.cs (MemberCache.AddMethods): Ignore varargs methods.

2002-08-23  Martin Baulig  <martin@gnome.org>

	* struct.cs (MyStructInfo.ctor): Make this work with empty
	structs; it's not allowed to use foreach() on null.

2002-08-23  Martin Baulig  <martin@gnome.org>

	* codegen.cs (CodeGen.InitMonoSymbolWriter): Tell the symbol
	writer the full pathname of the generated assembly.

2002-08-23  Martin Baulig  <martin@gnome.org>

	* statements.cs (FlowBranching.UsageVector.MergeChildren):
	A `finally' block never returns or breaks; improved handling of
	unreachable code.

2002-08-23  Martin Baulig  <martin@gnome.org>

	* statement.cs (Throw.Resolve): Allow `throw null'.

2002-08-23  Martin Baulig  <martin@gnome.org>

	* expression.cs (MemberAccess.ResolveMemberAccess): If this is an
	EventExpr, don't do a DeclaredOnly MemberLookup, but check whether
	`ee.EventInfo.DeclaringType == ec.ContainerType'.  The
	MemberLookup would return a wrong event if this is an explicit
	interface implementation and the class has an event with the same
	name.

2002-08-23  Martin Baulig  <martin@gnome.org>

	* statement.cs (Block.AddChildVariableNames): New public method.
	(Block.AddChildVariableName): Likewise.
	(Block.IsVariableNameUsedInChildBlock): Likewise.
	(Block.AddVariable): Check whether a variable name has already
	been used in a child block.

	* cs-parser.jay (declare_local_variables): Mark all variable names
	from the current block as being used in a child block in the
	implicit block.

2002-08-23  Martin Baulig  <martin@gnome.org>

	* codegen.cs (CodeGen.InitializeSymbolWriter): Abort if we can't
	find the symbol writer.

	* driver.cs: csc also allows the arguments to /define being
	separated by commas, not only by semicolons.

2002-08-23  Martin Baulig  <martin@gnome.org>

	* interface.cs (Interface.GetMembers): Added static check for events.

2002-08-15  Martin Baulig  <martin@gnome.org>

	* class.cs (MethodData.EmitDestructor): In the Expression.MemberLookup
	call, use ec.ContainerType.BaseType as queried_type and invocation_type.

	* ecore.cs (Expression.MemberLookup): Added documentation and explained
	why the MethodData.EmitDestructor() change was necessary.

2002-08-20  Martin Baulig  <martin@gnome.org>

	* class.cs (TypeContainer.FindMembers): Added static check for events.

	* decl.cs (MemberCache.AddMembers): Handle events like normal members.

	* typemanager.cs (TypeHandle.GetMembers): When queried for events only,
	use Type.GetEvents(), not Type.FindMembers().

2002-08-20  Martin Baulig  <martin@gnome.org>

	* decl.cs (MemberCache): Added a special method cache which will
	be used for method-only searched.  This ensures that a method
	search will return a MethodInfo with the correct ReflectedType for
	inherited methods.	

2002-08-20  Martin Baulig  <martin@gnome.org>

	* decl.cs (DeclSpace.FindMembers): Made this public.

2002-08-20  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* delegate.cs: fixed build on windows.
	[FIXME:  Filed as bug #29150: MCS must report these errors.]

2002-08-19  Ravi Pratap  <ravi@ximian.com>

	* ecore.cs (StandardConversionExists): Return a false
	if we are trying to convert the void type to anything else
	since that is not allowed.

	* delegate.cs (DelegateInvocation.DoResolve): Ensure that
	we flag error 70 in the event an event is trying to be accessed
	directly from outside the declaring type.

2002-08-20  Martin Baulig  <martin@gnome.org>

	* typemanager.cs, decl.cs: Moved MemberList, IMemberContainer and
	MemberCache from typemanager.cs to decl.cs.

2002-08-19  Martin Baulig  <martin@gnome.org>

	* class.cs (TypeContainer): Implement IMemberContainer.
	(TypeContainer.DefineMembers): Create the MemberCache.
	(TypeContainer.FindMembers): Do better BindingFlags checking; only
	return public members if BindingFlags.Public was given, check
	whether members are static.

2002-08-16  Martin Baulig  <martin@gnome.org>

	* decl.cs (DeclSpace.Define): Splitted this in Define and
	DefineMembers.  DefineMembers is called first and initializes the
	MemberCache.

	* rootcontext.cs (RootContext.DefineMembers): New function.  Calls
	DefineMembers() on all our DeclSpaces.

	* class.cs (TypeContainer.Define): Moved all code to DefineMembers(),
	but call DefineMembers() on all nested interfaces.  We call their
	Define() in our new Define() function.

	* interface.cs (Interface): Implement IMemberContainer.
	(Interface.Define): Moved all code except the attribute stuf to
	DefineMembers().
	(Interface.DefineMembers): Initialize the member cache.

	* typemanager.cs (IMemberFinder): Removed this interface, we don't
	need this anymore since we can use MemberCache.FindMembers directly.

2002-08-19  Martin Baulig  <martin@gnome.org>

	* typemanager.cs (MemberCache): When creating the cache for an
	interface type, add all inherited members.
	(TypeManager.MemberLookup_FindMembers): Changed `ref bool searching'
	to `out bool used_cache' and documented it.
	(TypeManager.MemberLookup): If we already used the cache in the first
	iteration, we don't need to do the interfaces check.

2002-08-19  Martin Baulig  <martin@gnome.org>

	* decl.cs (DeclSpace.FindMembers): New abstract method.  Moved this
	here from IMemberFinder and don't implement this interface anymore.
	(DeclSpace.MemberCache): Moved here from IMemberFinder.

	* typemanager.cs (IMemberFinder): This interface is now only used by
	classes which actually support the member cache.
	(TypeManager.builder_to_member_finder): Renamed to builder_to_declspace
	since we only put DeclSpaces into this Hashtable.
	(MemberLookup_FindMembers): Use `builder_to_declspace' if the type is
	a dynamic type and TypeHandle.GetTypeHandle() otherwise.

2002-08-16  Martin Baulig  <martin@gnome.org>

	* typemanager.cs (ICachingMemberFinder): Removed.
	(IMemberFinder.MemberCache): New property.
	(TypeManager.FindMembers): Merged this with RealFindMembers().
	This function will never be called from TypeManager.MemberLookup()
	so we can't use the cache here, just the IMemberFinder.
	(TypeManager.MemberLookup_FindMembers): Check whether the
	IMemberFinder has a MemberCache and call the cache's FindMembers
	function.
	(MemberCache): Rewrote larger parts of this yet another time and
	cleaned it up a bit.

2002-08-15  Miguel de Icaza  <miguel@ximian.com>

	* driver.cs (LoadArgs): Support quoting.

	(Usage): Show the CSC-like command line arguments.

	Improved a few error messages.

2002-08-15  Martin Baulig  <martin@gnome.org>

	* typemanager.cs (IMemberContainer.Type): New property.
	(IMemberContainer.IsInterface): New property.

	The following changes are conditional to BROKEN_RUNTIME, which is
	defined at the top of the file.

	* typemanager.cs (MemberCache.MemberCache): Don't add the base
	class'es members, but add all members from TypeHandle.ObjectType
	if we're an interface.
	(MemberCache.AddMembers): Set the Declared flag if member.DeclaringType
	is the current type.
	(MemberCache.CacheEntry.Container): Removed this field.
	(TypeHandle.GetMembers): Include inherited members.

2002-08-14  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* typemanager.cs: fixed compilation and added a comment on a field that
	is never used.

2002-08-15  Martin Baulig  <martin@gnome.org>

	* class.cs (ConstructorInitializer.Resolve): In the
	Expression.MemberLookup call, use the queried_type as
	invocation_type.

	* typemanager.cs (IMemberContainer.GetMembers): Removed the `bool
	declared' attribute, it's always true.
	(IMemberContainer.Parent, IMemberContainer.Name): New properties.
	(TypeManager.MemberLookup_FindMembers): [FIXME FIXME FIXME] Added
	temporary wrapper for FindMembers which tells MemberLookup whether
	members from the base classes are included in the return value.
	This will go away soon.
	(TypeManager.MemberLookup): Use this temporary hack here; once the
	new MemberCache is completed, we don't need to do the DeclaredOnly
	looping here anymore since the MemberCache will take care of this.
	(TypeManager.IsSubclassOrNestedChildOf): Allow `type == parent'.
	(MemberCache): When creating the MemberCache for a class, get
	members from the current class and all its base classes.
	(MemberCache.CacheEntry.Container): New field.  This is a
	temporary hack until the Mono runtime is fixed to distinguish
	between ReflectedType and DeclaringType.  It allows us to use MCS
	with both the MS runtime and the unfixed Mono runtime without
	problems and without accecting performance.
	(MemberCache.SearchMembers): The DeclaredOnly looping from
	TypeManager.MemberLookup is now done here.	

2002-08-14  Martin Baulig  <martin@gnome.org>

	* statement.cs (MyStructInfo.MyStructInfo): Don't call
	Type.GetFields on dynamic types but get the fields from the
	corresponding TypeContainer.
	(MyStructInfo.GetStructInfo): Added check for enum types.

	* typemanager.cs (MemberList.IsSynchronized): Implemented.
	(MemberList.SyncRoot): Implemented.
	(TypeManager.FilterWithClosure): No need to check permissions if
	closure_start_type == closure_invocation_type, don't crash if
	closure_invocation_type is null.

2002-08-13  Martin Baulig  <martin@gnome.org>

	Rewrote TypeContainer.FindMembers to use a member cache.  This
	gives us a speed increase of about 35% for the self-hosting MCS
	build and of about 15-20% for the class libs (both on GNU/Linux).

	* report.cs (Timer): New class to get enhanced profiling.  This
	whole class is "TIMER" conditional since it remarkably slows down
	compilation speed.

	* class.cs (MemberList): New class.  This is an IList wrapper
	which we're now using instead of passing MemberInfo[]'s around to
	avoid copying this array unnecessarily.
	(IMemberFinder.FindMember): Return a MemberList, not a MemberInfo [].
	(ICachingMemberFinder, IMemberContainer): New interface.
	(TypeManager.FilterWithClosure): If `criteria' is null, the name
	has already been checked, otherwise use it for the name comparision.
	(TypeManager.FindMembers): Renamed to RealMemberFinder and
	provided wrapper which tries to use ICachingMemberFinder.FindMembers
	if possible.  Returns a MemberList, not a MemberInfo [].
	(TypeHandle): New class, implements IMemberContainer.  We create
	one instance of this class per type, it contains a MemberCache
	which is used to do the member lookups.
	(MemberCache): New class.  Each instance of this class contains
	all members of a type and a name-based hash table.
	(MemberCache.FindMembers): This is our new member lookup
	function.  First, it looks up all members of the requested name in
	the hash table.  Then, it walks this list and sorts out all
	applicable members and returns them.

2002-08-13  Martin Baulig  <martin@gnome.org>

	In addition to a nice code cleanup, this gives us a performance
	increase of about 1.4% on GNU/Linux - not much, but it's already
	half a second for the self-hosting MCS compilation.

	* typemanager.cs (IMemberFinder): New interface.  It is used by
	TypeManager.FindMembers to call FindMembers on a TypeContainer,
	Enum, Delegate or Interface.
	(TypeManager.finder_to_member_finder): New PtrHashtable.
	(TypeManager.finder_to_container): Removed.
	(TypeManager.finder_to_delegate): Removed.
	(TypeManager.finder_to_interface): Removed.
	(TypeManager.finder_to_enum): Removed.

	* interface.cs (Interface): Implement IMemberFinder.

	* delegate.cs (Delegate): Implement IMemberFinder.

	* enum.cs (Enum): Implement IMemberFinder.

	* class.cs (TypeContainer): Implement IMemberFinder.

2002-08-12  Martin Baulig  <martin@gnome.org>

	* ecore.cs (TypeExpr.DoResolveType): Mark this as virtual.

2002-08-12  Martin Baulig  <martin@gnome.org>

	* ecore.cs (ITypeExpression): New interface for expressions which
	resolve to a type.
	(TypeExpression): Renamed to TypeLookupExpression.
	(Expression.DoResolve): If we're doing a types-only lookup, the
	expression must implement the ITypeExpression interface and we
	call DoResolveType() on it.
	(SimpleName): Implement the new ITypeExpression interface.
	(SimpleName.SimpleNameResolve): Removed the ec.OnlyLookupTypes
	hack, the situation that we're only looking up types can't happen
	anymore when this method is called.  Moved the type lookup code to
	DoResolveType() and call it.
	(SimpleName.DoResolveType): This ITypeExpression interface method
	is now doing the types-only lookup.
	(TypeExpr, TypeLookupExpression): Implement ITypeExpression.
	(ResolveFlags): Added MaskExprClass.

	* expression.cs (MemberAccess): Implement the ITypeExpression
	interface.
	(MemberAccess.DoResolve): Added support for a types-only lookup
	when we're called via ITypeExpression.DoResolveType().
	(ComposedCast): Implement the ITypeExpression interface.

	* codegen.cs (EmitContext.OnlyLookupTypes): Removed.  Call
	Expression.Resolve() with ResolveFlags.Type instead.

2002-08-12  Martin Baulig  <martin@gnome.org>

	* interface.cs (Interface.Define): Apply attributes.

	* attribute.cs (Attribute.ApplyAttributes): Added support for
	interface attributes.

2002-08-11  Martin Baulig  <martin@gnome.org>

	* statement.cs (Block.Emit): Only check the "this" variable if we
	do not always throw an exception.

	* ecore.cs (PropertyExpr.DoResolveLValue): Implemented, check
	whether the property has a set accessor.

2002-08-11  Martin Baulig  <martin@gnome.org>

	Added control flow analysis support for structs.

	* ecore.cs (ResolveFlags): Added `DisableFlowAnalysis' to resolve
	with control flow analysis turned off.
	(IVariable): New interface.
	(SimpleName.SimpleNameResolve): If MemberAccess.ResolveMemberAccess
	returns an IMemberExpr, call DoResolve/DoResolveLValue on it.
	(FieldExpr.DoResolve): Resolve the instance expression with flow
	analysis turned off and do the definite assignment check after the
	resolving when we know what the expression will resolve to.

	* expression.cs (LocalVariableReference, ParameterReference):
	Implement the new IVariable interface, only call the flow analysis
	code if ec.DoFlowAnalysis is true.
	(This): Added constructor which takes a Block argument.  Implement
	the new IVariable interface.
	(MemberAccess.DoResolve, MemberAccess.DoResolveLValue): Call
	DoResolve/DoResolveLValue on the result of ResolveMemberLookup().
	This does the definite assignment checks for struct members.

	* class.cs (Constructor.Emit): If this is a non-static `struct'
	constructor which doesn't have any initializer, call
	Block.AddThisVariable() to tell the flow analysis code that all
	struct elements must be initialized before control returns from
	the constructor.

	* statement.cs (MyStructInfo): New public class.
	(UsageVector.this [VariableInfo vi]): Added `int field_idx'
	argument to this indexer.  If non-zero, check an individual struct
	member, not the whole struct.
	(FlowBranching.CheckOutParameters): Check struct members.
	(FlowBranching.IsVariableAssigned, SetVariableAssigned): Added
	overloaded versions of these methods which take an additional
	`int field_idx' argument to check struct members.
	(FlowBranching.IsParameterAssigned, SetParameterAssigned): Added
	overloaded versions of these methods which take an additional
	`string field_name' argument to check struct member.s
	(VariableInfo): Implement the IVariable interface.
	(VariableInfo.StructInfo): New public property.  Returns the
	MyStructInfo instance of the variable if it's a struct or null.
	(Block.AddThisVariable): New public method.  This is called from
	Constructor.Emit() for non-static `struct' constructor which do
	not have any initializer.  It creates a special variable for the
	"this" instance variable which will be checked by the flow
	analysis code to ensure that all of the struct's fields are
	initialized before control returns from the constructor.
	(UsageVector): Added support for struct members.  If a
	variable/parameter is a struct with N members, we reserve a slot
	in the usage vector for each member.  A struct is considered fully
	initialized if either the struct itself (slot 0) or all its
	members are initialized.

2002-08-08  Martin Baulig  <martin@gnome.org>

	* driver.cs (Driver.MainDriver): Only report an error CS5001
	if there were no compilation errors.

	* codegen.cs (EmitContext.EmitContext): Use the DeclSpace's
	`UnsafeContext' property to determine whether the parent is in
	unsafe context rather than checking the parent's ModFlags:
	classes nested in an unsafe class are unsafe as well.

2002-08-08  Martin Baulig  <martin@gnome.org>

	* statement.cs (UsageVector.MergeChildren): Distinguish between
	`Breaks' and `Returns' everywhere, don't set `Breaks' anymore if
	we return.  Added test17() and test18() to test-154.cs.

2002-08-08  Martin Baulig  <martin@gnome.org>

	* typemanager.cs (TypeManager.FilterWithClosure): If we have
	Family access, make sure the invoking type isn't a subclass of the
	queried type (that'd be a CS1540).

	* ecore.cs (Expression.MemberLookup): Added overloaded version of
	this method which takes an additional `Type invocation_type'.

	* expression.cs (BaseAccess.DoResolve): Use the base type as
	invocation and query type.
	(MemberAccess.DoResolve): If the lookup failed and we're about to
	report a CS0122, try a lookup with the ec.ContainerType - if this
	succeeds, we must report a CS1540.

2002-08-08  Martin Baulig  <martin@gnome.org>

	* ecore.cs (IMemberExpr): Added `bool IsInstance' property.
	(MethodGroupExpr): Implement the IMemberExpr interface.

	* expression (MemberAccess.ResolveMemberAccess): No need to have
	any special code for MethodGroupExprs anymore, they're now
	IMemberExprs.	

2002-08-08  Martin Baulig  <martin@gnome.org>

	* typemanager.cs (TypeManager.FilterWithClosure): Check Assembly,
	Family, FamANDAssem and FamORAssem permissions.
	(TypeManager.IsSubclassOrNestedChildOf): New public method.

2002-08-08  Martin Baulig  <martin@gnome.org>

	* statement.cs (FlowBranchingType): Added LOOP_BLOCK.
	(UsageVector.MergeChildren): `break' breaks unless we're in a switch
	or loop block.

Thu Aug 8 10:28:07 CEST 2002 Paolo Molaro <lupus@ximian.com>

	* driver.cs: implemented /resource option to embed managed resources.

2002-08-07  Martin Baulig  <martin@gnome.org>

	* class.cs (FieldBase.Initializer): Renamed to `init' and made private.
	(FieldBase.HasFieldInitializer): New public property.
	(FieldBase.GetInitializerExpression): New public method.  Resolves and
	returns the field initializer and makes sure it is only resolved once.
	(TypeContainer.EmitFieldInitializers): Call
	FieldBase.GetInitializerExpression to get the initializer, this ensures
	that it isn't resolved multiple times.

	* codegen.cs (EmitContext): Added `bool IsFieldInitialier'.  This tells
	the resolving process (SimpleName/MemberLookup) that we're currently
	emitting a field initializer (which must not access any instance members,
	this is an error CS0236).

	* ecore.cs (SimpleName.Error_ObjectRefRequired): Added EmitContext
	argument, if the `IsFieldInitializer' flag is set, we must report and
	error CS0236 and not an error CS0120.	

2002-08-07  Martin Baulig  <martin@gnome.org>

	* ecore.cs (IMemberExpr): New public interface.
	(FieldExpr, PropertyExpr, EventExpr): Implement IMemberExpr.
	(SimpleName.SimpleNameResolve): Call MemberAccess.ResolveMemberAccess
	if the expression is an IMemberExpr.

	* expression.cs (MemberAccess.ResolveMemberAccess): Allow `left'
	to be null, implicitly default to `this' if we're non-static in
	this case.  Simplified the code a lot by using the new IMemberExpr
	interface.  Also fixed bug #28176 here.

2002-08-06  Martin Baulig  <martin@gnome.org>

	* cs-parser.jay (SimpleLookup): Removed.  We need to create
	ParameterReferences during semantic analysis so that we can do a
	type-only search when resolving Cast, TypeOf and SizeOf.
	(block): Pass the `current_local_parameters' to the Block's
	constructor.

	* class.cs (ConstructorInitializer): Added `Parameters parameters'
	argument to the constructor.
	(ConstructorInitializer.Resolve): Create a temporary implicit
	block with the parameters.

	* ecore.cs (SimpleName.SimpleNameResolve): Resolve parameter
	references here if we aren't doing a type-only search.

	* statement.cs (Block): Added constructor which takes a
	`Parameters parameters' argument.
	(Block.Parameters): New public property.

	* support.cs (InternalParameters.Parameters): Renamed `parameters'
	to `Parameters' and made it public readonly.

2002-08-06  Martin Baulig  <martin@gnome.org>

	* ecore.cs (Expression.Warning): Made this public as well.

	* report.cs (Report.Debug): Print the contents of collections.

2002-08-06  Martin Baulig  <martin@gnome.org>

	* ecore.cs (Expression.ResolveFlags): New [Flags] enum.  This is
	used to tell Resolve() which kinds of expressions it may return.
	(Expression.Resolve): Added overloaded version of this method which
	takes a `ResolveFlags flags' argument.  This can be used to tell
	Resolve() which kinds of expressions it may return.  Reports a
	CS0118 on error.
	(Expression.ResolveWithSimpleName): Removed, use Resolve() with
	ResolveFlags.SimpleName.
	(Expression.Error118): Added overloaded version of this method which
	takes a `ResolveFlags flags' argument.  It uses the flags to determine
	which kinds of expressions are allowed.

	* expression.cs (Argument.ResolveMethodGroup): New public method.
	Resolves an argument, but allows a MethodGroup to be returned.
	This is used when invoking a delegate.

	* TODO: Updated a bit.

2002-08-06  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	Fixed compilation with csc.

	* ecore.cs: Expression.Error made public. Is this correct? Should
	Warning be made public too?

	* expression.cs: use ea.Location instead of ea.loc.
	[FIXME:  Filed as bug #28607: MCS must report these errors.]

2002-08-06  Martin Baulig  <martin@gnome.org>

	* ecore.cs (Expression.loc): Moved the location here instead of
	duplicating it in all derived classes.
	(Expression.Location): New public property.
	(Expression.Error, Expression.Warning): Made them non-static and
	removed the location argument.
	(Expression.Warning): Added overloaded version which takes an
	`int level' argument.
	(Expression.Error118): Make this non-static and removed the
	expression and location arguments.
	(TypeExpr): Added location argument to the constructor.

	* expression.cs (StaticCallExpr): Added location argument to
	the constructor.
	(Indirection, PointerArithmetic): Likewise.
	(CheckedExpr, UnCheckedExpr): Likewise.
	(ArrayAccess, IndexerAccess, UserCast, ArrayPtr): Likewise.
	(StringPtr): Likewise.


2002-08-05  Martin Baulig  <martin@gnome.org>

	* expression.cs (BaseAccess.DoResolve): Actually report errors.

	* assign.cs (Assign.DoResolve): Check whether the source
	expression is a value or variable.

	* statement.cs (Try.Resolve): Set ec.InTry/InCatch/InFinally
	while resolving the corresponding blocks.

	* interface.cs (Interface.GetInterfaceTypeByName): Actually report
	an error, don't silently return null.

	* statement.cs (Block.AddVariable): Do the error reporting here
	and distinguish between CS0128 and CS0136.
	(Block.DoResolve): Report all unused labels (warning CS0164).
	(LabeledStatement): Pass the location to the constructor.
	(LabeledStatement.HasBeenReferenced): New property.
	(LabeledStatement.Resolve): Set it to true here.

	* statement.cs (Return.Emit): Return success even after reporting
	a type mismatch error (CS0126 or CS0127), this is what csc does and
	it avoids confusing the users with any consecutive errors.

2002-08-05  Martin Baulig  <martin@gnome.org>

	* enum.cs (Enum.LookupEnumValue): Catch circular definitions.

	* const.cs (Const.LookupConstantValue): Catch circular definitions.

	* expression.cs (MemberAccess.DoResolve): Silently return if an
	error has already been reported.

	* ecore.cs (Expression.MemberLookupFinal): Silently return if an
	error has already been reported.

2002-08-05  Martin Baulig  <martin@gnome.org>

	* statement.cs (UsageVector): Only initialize the `parameters'
	vector if we actually have any "out" parameters.

2002-08-05  Martin Baulig  <martin@gnome.org>

	* expression.cs (Binary.ResolveOperator): When combining delegates,
	they must have the same type.

2002-08-05  Martin Baulig  <martin@gnome.org>

	* typemanager.cs (TypeManager.GetArgumentTypes): Don't call
	PropertyInfo.GetIndexParameters() on dynamic types, this doesn't
	work with the ms runtime and we also don't need it: if we're a
	PropertyBuilder and not in the `indexer_arguments' hash, then we
	are a property and not an indexer.

	* class.cs (TypeContainer.AsAccessible): Use Type.IsArray,
	Type.IsPointer and Type.IsByRef instead of Type.HasElementType
	since the latter one doesn't work with the ms runtime.

2002-08-03  Martin Baulig  <martin@gnome.org>

	Fixed bugs #27998 and #22735.

	* class.cs (Method.IsOperator): New public field.
	(Method.CheckBase): Report CS0111 if there's already a method
	with the same parameters in the current class.  Report CS0508 when
	attempting to change the return type of an inherited method.
	(MethodData.Emit): Report CS0179 if a method doesn't have a body
	and it's not marked abstract or extern.
	(PropertyBase): New abstract base class for Property and Indexer.
	(PropertyBase.CheckBase): Moved here from Property and made it work
	for indexers.
	(PropertyBase.Emit): Moved here from Property.Emit, Indexer.Emit is
	the same so we can reuse it there.
	(Property, Indexer): Derive from PropertyBase.
	(MethodSignature.inheritable_property_signature_filter): New delegate
	to find properties and indexers.

	* decl.cs (MemberCore.CheckMethodAgainstBase): Added `string name'
	argument and improved error reporting.

	* parameter.cs (Parameters.GetEmptyReadOnlyParameters): Renamed to
	EmptyReadOnlyParameters and made it a property.

	* typemanager.cs (TypeManager.GetArgumentTypes): Added overloaded
	version of this method which takes a `PropertyInfo indexer'.
	(TypeManager.RegisterIndexer): New method.

	* class.cs: Added myself as author of this file :-)

2002-08-03  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* class.cs: fixed compilation on windoze.

2002-08-03  Martin Baulig  <martin@gnome.org>

	* interface.cs (Interface.GetInterfaceBases): Check whether all
	base interfaces are at least as accessible than the current one.

	* class.cs (TypeContainer.GetClassBases): Check whether base types
	are at least as accessible than the current type.
	(TypeContainer.AsAccessible): Implemented and made non-static.
	(MemberBase.CheckParameters): Report errors if the accessibility
	checks fail.

	* delegate.cs (Delegate.Delegate): The default visibility is
	internal for top-level types and private for nested types.
	(Delegate.Define): Report errors if the accessibility checks fail.

	* enum.cs (Enum.Enum): The default visibility is internal for
	top-level types and private for nested types.
	(Enum.DefineType): Compute the correct visibility.

	* modifiers.cs (Modifiers.TypeAttr): Added a version of this
	function which takes a `bool is_toplevel' instead of a TypeContainer.

	* typemanager.cs (TypeManager.IsBuiltinType): `void' is also a
	builtin type.

2002-08-02  Martin Baulig  <martin@gnome.org>

	* expression.cs (LocalVariableReferenc): Added constructor which
	takes additional `VariableInfo vi' and `bool is_readonly' arguments.
	(LocalVariableReference.IsReadOnly): New property.
	(LocalVariableReference.DoResolveLValue): Report a CS1604 if the
	variable is readonly, use our own readonly flag to do this; you can
	use the new constructor to get a writable reference to a read-only
	variable.

	* cs-parser.jay (foreach_statement, using_statement): Get a writable
	reference to the local variable.

2002-08-01  Miguel de Icaza  <miguel@ximian.com>

	* rootcontext.cs (ResolveCore): Also include System.Exception

	* statement.cs (Block.Emit): Do not emit the dead-code warnings if
	we reach an EmptyStatement.

	(Catch.DoResolve, Throw.DoResolve): Throwing the System.Exception
	is also fine.

	* expression.cs (Binary.ResolveOperator): Check error result in
	two places.

	use brtrue/brfalse directly and avoid compares to null.

2002-08-02  Martin Baulig  <martin@gnome.org>

	* class.cs (TypeContainer.Define): Define all nested interfaces here.
	Fixes bug #28407, added test-155.cs.

2002-08-01  Martin Baulig  <martin@gnome.org>

	* class.cs (Event.EmitDefaultMethod): Make this work with static
	events.  Fixes #28311, added verify-3.cs.

2002-08-01  Martin Baulig  <martin@gnome.org>

	* statement.cs (ForeachHelperMethods): Added `enumerator_type' and
	`is_disposable' fields.
	(Foreach.GetEnumeratorFilter): Set `hm.enumerator_type' and
	`hm.is_disposable' if we're using the collection pattern.
	(Foreach.EmitCollectionForeach): Use the correct type for the
	enumerator's local variable, only emit the try/finally block if
	necessary (fixes #27713).

2002-08-01  Martin Baulig  <martin@gnome.org>

	* ecore.cs (Expression.report118): Renamed to Error118 and made
	it public static.

	* statement.cs (Throw.Resolve): Check whether the expression is of
	the correct type (CS0118) and whether the type derives from
	System.Exception (CS0155).
	(Catch.Resolve): New method.  Do the type lookup here and check
	whether it derives from System.Exception (CS0155).
	(Catch.CatchType, Catch.IsGeneral): New public properties.

	* typemanager.cs (TypeManager.exception_type): Added.

2002-07-31  Miguel de Icaza  <miguel@ximian.com>

	* driver.cs: Updated About function.

2002-07-31  Martin Baulig  <martin@gnome.org>

	Implemented Control Flow Analysis.

	* codegen.cs (EmitContext.DoFlowAnalysis): New public variable.
	(EmitContext.CurrentBranching): Added.
	(EmitContext.StartFlowBranching): Added.
	(EmitContext.EndFlowBranching): Added.
	(EmitContext.KillFlowBranching): Added.
	(EmitContext.IsVariableAssigned): Added.
	(EmitContext.SetVariableAssigned): Added.
	(EmitContext.IsParameterAssigned): Added.
	(EmitContext.SetParameterAssigned): Added.
	(EmitContext.EmitTopBlock): Added `InternalParameters ip' argument.
	Added control flow analysis stuff here.

	* expression.cs (Unary.DoResolve): If the operator is Oper.AddressOf,
	resolve the expression as lvalue.
	(LocalVariableReference.DoResolve): Check whether the variable has
	already been assigned.
	(ParameterReference.DoResolveLValue): Override lvalue resolve to mark
	the parameter as assigned here.
	(ParameterReference.DoResolve): Check whether the parameter has already
	been assigned.
	(Argument.Resolve): If it's a `ref' or `out' argument, resolve the
	expression as lvalue.

	* statement.cs (FlowBranching): New class for the flow analysis code.
	(Goto): Resolve the label in Resolve, not in Emit; added flow analysis.
	(LabeledStatement.IsDefined): New public property.
	(LabeledStatement.AddUsageVector): New public method to tell flow
	analyis that the label may be reached via a forward jump.
	(GotoCase): Lookup and resolve the label in Resolve, not in Emit; added
	flow analysis.
	(VariableInfo.Number): New public field.  This is used by flow analysis
	to number all locals of a block.
	(Block.CountVariables): New public property.  This is the number of
	local variables in this block (including the locals from all parent
	blocks).
	(Block.EmitMeta): Number all the variables.

	* statement.cs: Added flow analysis support to all classes.

2002-07-31  Martin Baulig  <martin@gnome.org>

	* driver.cs: Added "--mcs-debug" argument if MCS_DEBUG is defined.
	To get debugging messages, compile mcs with /define:MCS_DEBUG and
	then use this argument.

	* report.cs (Report.Debug): Renamed to conditional to "MCS_DEBUG".

	* makefile.gnu (MCS_FLAGS): Include $(MCS_DEFINES), the user may
	use this to specify /define options.

2002-07-29  Martin Baulig  <martin@gnome.org>

	* statement.cs (Fixed): Moved all code that does variable lookups
	and resolvings from Emit to Resolve.

	* statement.cs (For): Moved all code that does variable lookups
	and resolvings from Emit to Resolve.

	* statement.cs (Using): Moved all code that does variable lookups
	and resolvings from Emit to Resolve.

2002-07-29  Martin Baulig  <martin@gnome.org>

	* attribute.cs (Attribute.Resolve): Explicitly catch a
	System.NullReferenceException when creating the
	CustromAttributeBuilder and report a different warning message.

2002-07-29  Martin Baulig  <martin@gnome.org>

	* support.cs (ParameterData.ParameterName): Added method to
	get the name of a parameter.

	* typemanager.cs (TypeManager.IsValueType): New public method.

2002-07-29  Martin Baulig  <martin@gnome.org>

	* parameter.cs (Parameter.Modifier): Added `ISBYREF = 8'.  This
	is a flag which specifies that it's either ref or out.
	(Parameter.GetParameterInfo (DeclSpace, int, out bool)): Changed
	the out parameter to `out Parameter.Modifier mod', also set the
	Parameter.Modifier.ISBYREF flag on it if it's either ref or out.

	* support.cs (InternalParameters.ParameterModifier): Distinguish
	between Parameter.Modifier.OUT and Parameter.Modifier.REF, set the
	Parameter.Modifier.ISBYREF flag if it's either ref or out.

	* expression.cs (Argument.GetParameterModifier): Distinguish
	between Parameter.Modifier.OUT and Parameter.Modifier.REF, set the
	Parameter.Modifier.ISBYREF flag if it's either ref or out.

2002-07-29  Martin Baulig  <martin@gnome.org>

	* expression.cs (ParameterReference.ParameterReference): Added
	`Location loc' argument to the constructor.

	* cs-parser.jay: Pass location to ParameterReference.

2002-07-28  Miguel de Icaza  <miguel@ximian.com>

	* statement.cs (Try): Initialize the location.

	* cs-parser.jay: pass location to Try.

	* expression.cs (Unary.Reduce): Change the prototype to return
	whether a constant fold could be performed or not.  The result is
	returned in an out parameters.  In the case of Indirection and
	AddressOf, we want to perform the full tests.

2002-07-26  Miguel de Icaza  <miguel@ximian.com>

	* statement.cs (Statement.Emit): Flag dead code.

2002-07-27  Andrew Birkett  <andy@nobugs.org>

	* expression.cs (Unary.Reduce): Handle AddressOf and Indirection.

2002-07-27  Martin Baulig  <martin@gnome.org>

	* class.cs (MethodData.Define): Put back call to
	TypeManager.AddMethod(), accidentally commented this out.

	* report.cs (Debug): New public method to print debugging information,
	this is `[Conditional ("DEBUG")]'.

2002-07-26  Martin Baulig  <martin@gnome.org>

	* cs-parser.jay (CSharpParser): Added `Stack switch_stack'.
	(switch_statement): Push the current_block to the switch_stack and
	pop it again when we're done with the switch.
	(switch_section): The new block is a child of the current_block.
	Fixes bug #24007, added test-152.cs.

2002-07-27  Martin Baulig  <martin@gnome.org>

	* expression.cs (Invocation.EmitArguments): When calling a varargs
	function with only its fixed arguments, we need to pass an empty
	array.

2002-07-27  Martin Baulig  <martin@gnome.org>

	Mono 0.13 has been released.

2002-07-25  Miguel de Icaza  <miguel@ximian.com>

	* driver.cs: Rename --resource to --linkres, because that is what
	we do currently, we dont support --resource yet.

	* cs-tokenizer.cs: Fix test for reporting endif mismatches.

2002-07-25  Martin Baulig  <martin@gnome.org>

	* class.cs (MethodData): New public class.  This is a `method builder'
	class for a method or one accessor of a Property/Indexer/Event.
	(MethodData.GetMethodFlags): Moved here from MemberBase.
	(MethodData.ApplyAttributes): Likewise.
	(MethodData.ApplyObsoleteAttribute): Likewise.
	(MethodData.ApplyConditionalAttribute): Likewise.
	(MethodData.ApplyDllImportAttribute): Likewise.
	(MethodData.CheckAbstractAndExternal): Likewise.
	(MethodData.Define): Formerly knows as MemberBase.DefineMethod().
	(MethodData.Emit): Formerly known as Method.Emit().
	(MemberBase): Moved everything which was specific to a single
	accessor/method to MethodData.
	(Method): Create a new MethodData and call Define() and Emit() on it.
	(Property, Indexer, Event): Create a new MethodData objects for each
	accessor and call Define() and Emit() on them.

2002-07-25  Martin Baulig  <martin@gnome.org>

	Made MethodCore derive from MemberBase to reuse the code from there.
	MemberBase now also checks for attributes.

	* class.cs (MethodCore): Derive from MemberBase, not MemberCore.
	(MemberBase.GetMethodFlags): Moved here from class Method and marked
	as virtual.
	(MemberBase.DefineAccessor): Renamed to DefineMethod(), added
	`CallingConventions cc' and `Attributes opt_attrs' arguments.
	(MemberBase.ApplyAttributes): New virtual method; applies the
	attributes to a method or accessor.
	(MemberBase.ApplyObsoleteAttribute): New protected virtual method.
	(MemberBase.ApplyConditionalAttribute): Likewise.
	(MemberBase.ApplyDllImportAttribute): Likewise.
	(MemberBase.CheckAbstractAndExternal): Likewise.
	(MethodCore.ParameterTypes): This is now a property instead of a
	method, it's initialized from DoDefineParameters().
	(MethodCore.ParameterInfo): Removed the set accessor.
	(MethodCore.DoDefineParameters): New protected virtual method to
	initialize ParameterTypes and ParameterInfo.
	(Method.GetReturnType): We can now simply return the MemberType.
	(Method.GetMethodFlags): Override the MemberBase version and add
	the conditional flags.
	(Method.CheckBase): Moved some code from Define() here, call
	DoDefineParameters() here.
	(Method.Define): Use DoDefine() and DefineMethod() from MemberBase
	here to avoid some larger code duplication.
	(Property.Emit, Indexer.Emit): Call CheckAbstractAndExternal() to
	ensure that abstract and external accessors don't declare a body.

	* attribute.cs (Attribute.GetValidPieces): Make this actually work:
	`System.Attribute.GetCustomAttributes (attr.Type)' does a recursive
	lookup in the attribute's parent classes, so we need to abort as soon
	as we found the first match.
	(Attribute.Obsolete_GetObsoleteMessage): Return the empty string if
	the attribute has no arguments.

	* typemanager.cs (TypeManager.AddMethod): Now takes a MemberBase instead
	of a Method.

2002-07-24  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* cs-parser.jay: reverted previous patch.

2002-07-24  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* cs-parser.jay: fixed bug #22119.

2002-07-24  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* attribute.cs: fixed compilation. The error was:
	"attribute.cs(571,17): error CS0177: The out parameter 'is_error' must 
	be assigned to before control leaves the current method."
	[FIXME:  Filed as bug #28186: MCS must report this error.]

2002-07-25  Martin Baulig  <martin@gnome.org>

	* attribute.cs (Attribute.Conditional_GetConditionName): New static
	method to pull the condition name ouf of a Conditional attribute.
	(Attribute.Obsolete_GetObsoleteMessage): New static method to pull
	the obsolete message and error flag out of an Obsolete attribute.

	* class.cs (Method.GetMethodFlags): New public method to get the
	TypeManager.MethodFlags for this method.
	(Method.ApplyConditionalAttribute, Method.ApplyObsoleteAttribute): New
	private methods.
	(Method.Define): Get and apply the Obsolete and Conditional attributes;
	if we're overriding a virtual function, set the new private variable
	`parent_method'; call the new TypeManager.AddMethod().

	* typemanager.cs (TypeManager.AddMethod): New static method.  Stores
	the MethodBuilder and the Method in a PtrHashtable.
	(TypeManager.builder_to_method): Added for this purpose.
	(TypeManager.MethodFlags): Added IsObsoleteError.
	(TypeManager.GetMethodFlags): Added `Location loc' argument.  Lookup
	Obsolete and Conditional arguments in MethodBuilders.  If we discover
	an Obsolete attribute, emit an appropriate warning 618 / error 619 with
	the message from the attribute.

2002-07-24  Martin Baulig  <martin@gnome.org>

	* cs-tokenizer.cs: Eat up trailing whitespaces and one-line comments in
	preprocessor directives, ensure that the argument to #define/#undef is
	exactly one identifier and that it's actually an identifier.

	Some weeks ago I did a `#define DEBUG 1' myself and wondered why this
	did not work ....

2002-07-24  Martin Baulig  <martin@gnome.org>

	* statement.cs (Foreach.ForeachHelperMethods): Added `Type element_type',
	initialize it to TypeManager.object_type in the constructor.
	(Foreach.GetEnumeratorFilter): Set `hm.element_type' to the return type
	of the `hm.get_current' method if we're using the collection pattern.
	(Foreach.EmitCollectionForeach): Use `hm.element_type' as the source type
	for the explicit conversion to make it work when we're using the collection
	pattern and the `Current' property has a different return type than `object'.
	Fixes #27713.

2002-07-24  Martin Baulig  <martin@gnome.org>

	* delegate.cs (Delegate.VerifyMethod): Simply return null if the method
	does not match, but don't report any errors.  This method is called in
	order for all methods in a MethodGroupExpr until a matching method is
	found, so we don't want to bail out if the first method doesn't match.
	(NewDelegate.DoResolve): If none of the methods in the MethodGroupExpr
	matches, report the 123.  Fixes #28070.

2002-07-24  Martin Baulig  <martin@gnome.org>

	* expression.cs (ArrayAccess.EmitStoreOpcode): Moved the
	TypeManager.TypeToCoreType() to the top of the method so the
	following equality checks will work.  Fixes #28107.

2002-07-24  Martin Baulig  <martin@gnome.org>

	* cfold.cs (ConstantFold.DoConstantNumericPromotions): "If either
	operand is of type uint, and the other operand is of type sbyte,
	short or int, the operands are converted to type long." -
	Actually do what this comment already told us.  Fixes bug #28106,
	added test-150.cs.

2002-07-24  Martin Baulig  <martin@gnome.org>

	* class.cs (MethodBase): New abstract class.  This is now a base
	class for Property, Indexer and Event to avoid some code duplication
	in their Define() and DefineMethods() methods.
	(MethodBase.DoDefine, MethodBase.DefineAccessor): Provide virtual
	generic methods for Define() and DefineMethods().
	(FieldBase): Derive from MemberBase, not MemberCore.
	(Property): Derive from MemberBase, not MemberCore.
	(Property.DefineMethod): Moved all the code from this method to the
	new MethodBase.DefineAccessor(), just call it with appropriate
	argumetnts.
	(Property.Define): Call the new Property.DoDefine(), this does some
	sanity checks and we don't need to duplicate the code everywhere.
	(Event): Derive from MemberBase, not MemberCore.
	(Event.Define): Use the new MethodBase.DefineAccessor() to define the
	accessors, this will also make them work with interface events.
	(Indexer): Derive from MemberBase, not MemberCore.
	(Indexer.DefineMethod): Removed, call MethodBase.DefineAccessor() insstead.
	(Indexer.Define): Use the new MethodBase functions.

	* interface.cs (InterfaceEvent.InterfaceEvent): Added `Location loc'
	argument to the constructor.
	(Interface.FindMembers): Added support for interface events.
	(Interface.PopluateEvent): Implemented.

	Added test-149.cs for this.  This also fixes bugs #26067 and #24256.

2002-07-22  Miguel de Icaza  <miguel@ximian.com>

	* class.cs (TypeContainer.AddMethod): Adding methods do not use IsValid,
	but this is required to check for a method name being the same as
	the containing class.  

	Handle this now.

2002-07-22  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* interface.cs: initialize variable.

2002-07-23  Martin Baulig  <martin@gnome.org>

	Implemented the IndexerName attribute in interfaces.

	* class.cs (TypeContainer.DefineIndexers): Don't set the indexer
	name if this is an explicit interface implementation.
	(Indexer.InterfaceIndexerName): New public variable.  If we're
	implementing an interface indexer, this is the IndexerName in that
	interface.  Otherwise, it's the IndexerName.
	(Indexer.DefineMethod): If we're implementing interface indexer,
	set InterfaceIndexerName.  Use the new Pending.IsInterfaceIndexer
	and Pending.ImplementIndexer methods.
	(Indexer.Define): Also define the PropertyBuilder if we're
	implementing an interface indexer and this is neither an explicit
	interface implementation nor do the IndexerName match the one in
	the interface.

	* pending.cs (TypeAndMethods): Added `MethodInfo [] need_proxy'.
	If a method is defined here, then we always need to create a proxy
	for it.  This is used when implementing interface indexers.
	(Pending.IsInterfaceIndexer): New public method.
	(Pending.ImplementIndexer): New public method.
	(Pending.InterfaceMethod): Added `MethodInfo need_proxy' argument.
	This is used when implementing interface indexers to define a proxy
	if necessary.
	(Pending.VerifyPendingMethods): Look in the `need_proxy' array and
	define a proxy if necessary.

	* interface.cs (Interface.IndexerName): New public variable.
	(Interface.PopulateIndexer): Set the IndexerName.
	(Interface.DefineIndexers): New private method.  Populate all the
	indexers and make sure their IndexerNames match.

	* typemanager.cs (IndexerPropertyName): Added support for interface
	indexers.

2002-07-22  Martin Baulig  <martin@gnome.org>

	* codegen.cs (EmitContext.HasReturnLabel): New public variable.
	(EmitContext.EmitTopBlock): Always mark the ReturnLabel and emit a
	ret if HasReturnLabel.
	(EmitContext.TryCatchLevel, LoopBeginTryCatchLevel): New public
	variables.

	* statement.cs (Do.Emit, While.Emit, For.Emit, Foreach.Emit): Save
	and set the ec.LoopBeginTryCatchLevel.
	(Try.Emit): Increment the ec.TryCatchLevel while emitting the block.
	(Continue.Emit): If the ec.LoopBeginTryCatchLevel is smaller than
	the current ec.TryCatchLevel, the branch goes out of an exception
	block.  In this case, we need to use Leave and not Br.

2002-07-22  Martin Baulig  <martin@gnome.org>

	* statement.cs (Try.Emit): Emit an explicit ret after the end of the
	block unless the block does not always return or it is contained in
	another try { ... } catch { ... } block.  Fixes bug #26506.
	Added verify-1.cs to the test suite.

2002-07-22  Martin Baulig  <martin@gnome.org>

	* statement.cs (Switch.TableSwitchEmit): If we don't have a default,
	then we do not always return.  Fixes bug #24985.

2002-07-22  Martin Baulig  <martin@gnome.org>

	* expression.cs (Invocation.OverloadedResolve): Do the BetterFunction()
	lookup on a per-class level; ie. walk up the class hierarchy until we
	found at least one applicable method, then choose the best among them.
	Fixes bug #24463 and test-29.cs.

2002-07-22  Martin Baulig  <martin@gnome.org>

	* typemanager.cs (TypeManager.ArrayContainsMethod): Don't check the
	return types of the methods.  The return type is not part of the
	signature and we must not check it to make the `new' modifier work.
	Fixes bug #27999, also added test-147.cs.
	(TypeManager.TypeToCoreType): Added TypeManager.type_type.

	* expression.cs (Invocation.DoResolve): Call TypeManager.TypeToCoreType()
	on the method's return type.

2002-07-21  Martin Baulig  <martin@gnome.org>

	* assign.cs: Make this work if the rightmost source is a constant and
	we need to do an implicit type conversion.  Also adding a few more tests
	to test-38.cs which should have caught this.

	* makefile.gnu: Disable debugging, there's already the mcs-mono2.exe
	target in the makefile for this.  The makefile.gnu is primarily intended
	for end-users who don't want to debug the compiler.

2002-07-21  Martin Baulig  <martin@gnome.org>

	* assign.cs: Improved the Assign class so it can now handle embedded
	assignments (X = Y = Z = something).  As a side-effect this'll now also
	consume less local variables.  test-38.cs now passes with MCS, added
	a few new test cases to that test.

2002-07-20  Martin Baulig  <martin@gnome.org>

	* expression.cs (Binary.EmitBranchable): Emit correct unsigned branch
	instructions.  Fixes bug #27977, also added test-146.cs.

2002-07-19  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* cs-tokenizer.cs: fixed getHex ().

2002-07-19  Martin Baulig  <martin@gnome.org>

	* expression.cs (Invocation.EmitParams): Use TypeManager.LookupType(),
	not Type.GetType() to lookup the array type.  This is needed when
	we're constructing an array of a user-defined type.
	(ArrayAccess.EmitDynamicInitializers): Only emit the Ldelema for
	single-dimensional arrays, but also for single-dimensial arrays of
	type decimal.

2002-07-19  Martin Baulig  <martin@gnome.org>

	* expression.cs (New.DoEmit): Create a new LocalTemporary each time
	this function is called, it's not allowed to share LocalBuilders
	among ILGenerators.

2002-07-19  Martin Baulig  <martin@gnome.org>

	* expression.cs (Argument.Resolve): Report an error 118 when trying
	to pass a type as argument.

2002-07-18  Martin Baulig  <martin@gnome.org>

	* ecore.cs (Expression.ImplicitNumericConversion): Don't emit a
	Conv_R_Un for the signed `long' type.

2002-07-15  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (MemberAccess.DoResolve): Do not reuse the field
	`expr' for the temporary result, as that will fail if we do
	multiple resolves on the same expression.

2002-07-05  Miguel de Icaza  <miguel@ximian.com>

	* ecore.cs (SimpleNameResolve): Use ec.DeclSpace instead of
	ec.TypeContainer for looking up aliases. 

	* class.cs (TypeContainer): Remove LookupAlias from here.

	* decl.cs (DeclSpace); Move here.

2002-07-01  Miguel de Icaza  <miguel@ximian.com>

	* class.cs (FindMembers): Only call filter if the constructor
	bulider is not null.

	Also handle delegates in `NestedTypes' now.  Now we will perform
	type lookups using the standard resolution process.  This also
	fixes a bug.

	* decl.cs (DeclSpace.ResolveType): New type resolution routine.
	This uses Expressions (the limited kind that can be parsed by the
	tree) instead of strings.

	* expression.cs (ComposedCast.ToString): Implement, used to flag
	errors since now we have to render expressions.

	(ArrayCreation): Kill FormElementType.  Use ComposedCasts in
	FormArrayType. 

	* ecore.cs (SimpleName.ToString): ditto.

	* cs-parser.jay: Instead of using strings to assemble types, use
	Expressions to assemble the type (using SimpleName, ComposedCast,
	MemberAccess).  This should fix the type lookups in declarations,
	because we were using a different code path for this.

	* statement.cs (Block.Resolve): Continue processing statements
	even when there is an error.

2002-07-17  Miguel de Icaza  <miguel@ximian.com>

	* class.cs (Event.Define): Also remove the `remove' method from
	the list of pending items.

	* expression.cs (ParameterReference): Use ldarg.N (0..3) to
	generate more compact code. 

2002-07-17  Martin Baulig  <martin@gnome.org>

	* const.cs (Const.LookupConstantValue): Add support for constant
	`unchecked' and `checked' expressions.
	Also adding test case test-140.cs for this.

2002-07-17  Martin Baulig  <martin@gnome.org>

	* statement.cs (Foreach.GetEnumeratorFilter): When compiling corlib,
	check whether mi.ReturnType implements the IEnumerator interface; the
	`==' and the IsAssignableFrom() will fail in this situation.

2002-07-16  Ravi Pratap  <ravi@ximian.com>

	* ecore.cs (SimpleName.SimpleNameResolve) : Apply Gonzalo's fix 
	here too.

2002-07-16  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* expression.cs: fixed bug #27811.

2002-07-14  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (ParameterReference.AddressOf): Patch from Paolo
	Molaro: when we are a ref, the value already contains a pointer
	value, do not take the address of it.

2002-07-14 Rafael Teixeira <rafaelteixeirabr@hotmail.com>
	* removed mb-parser.jay and mb-tokenizer.cs

Sat Jul 13 19:38:03 CEST 2002 Paolo Molaro <lupus@ximian.com>

	* expression.cs: check against the building corlib void type.

Sat Jul 13 19:35:58 CEST 2002 Paolo Molaro <lupus@ximian.com>

	* ecore.cs: fix for valuetype static readonly fields: when 
	initializing them, we need their address, not the address of a copy.

Sat Jul 13 17:32:53 CEST 2002 Paolo Molaro <lupus@ximian.com>

	* typemanager.cs: register also enum_type in corlib.

Sat Jul 13 15:59:47 CEST 2002 Paolo Molaro <lupus@ximian.com>

	* class.cs: allow calling this (but not base) initializers in structs.

Sat Jul 13 15:12:06 CEST 2002 Paolo Molaro <lupus@ximian.com>

	* ecore.cs: make sure we compare against the building base types
	in GetTypeSize ().

Sat Jul 13 15:10:32 CEST 2002 Paolo Molaro <lupus@ximian.com>

	* typemanager.cs: fix TypeToCoreType() to handle void and object
	(corlib gets no more typerefs after this change).

2002-07-12  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (ArrayCreation.EmitArrayArguments): use
	Conv.Ovf.U4 for unsigned and Conv.Ovf.I4 for signed.

	(ArrayAccess.LoadArrayAndArguments): Use Conv_Ovf_I and
	Conv_Ovf_I_Un for the array arguments.  Even if C# allows longs as
	array indexes, the runtime actually forbids them.

	* ecore.cs (ExpressionToArrayArgument): Move the conversion code
	for array arguments here.

	* expression.cs (EmitLoadOpcode): System.Char is a U2, use that
	instead of the default for ValueTypes.

	(New.DoEmit): Use IsValueType instead of
	IsSubclassOf (value_type)
	(New.DoResolve): ditto.
	(Invocation.EmitCall): ditto.

	* assign.cs (Assign): ditto.

	* statement.cs (Unsafe): Ok, so I got the semantics wrong.
	Statements *are* currently doing part of their resolution during
	Emit.  

	Expressions do always resolve during resolve, but statements are
	only required to propagate resolution to their children.

2002-07-11  Miguel de Icaza  <miguel@ximian.com>

	* driver.cs (CSCParseOption): Finish the /r: and /lib: support.

	(LoadAssembly): Do not add the dll if it is already specified

	(MainDriver): Add the System directory to the link path at the end,
	after all the other -L arguments. 

	* expression.cs (ArrayAccess.EmitLoadOpcode): I was using the
	wrong opcode for loading bytes and bools (ldelem.i1 instead of
	ldelem.u1) and using the opposite for sbytes.

	This fixes Digger, and we can finally run it.

	* driver.cs (UnixParseOption): Move the option parsing here.  
	(CSCParseOption): Implement CSC-like parsing of options.

	We now support both modes of operation, the old Unix way, and the
	new CSC-like way.  This should help those who wanted to make cross
	platform makefiles.

	The only thing broken is that /r:, /reference: and /lib: are not
	implemented, because I want to make those have the same semantics
	as the CSC compiler has, and kill once and for all the confussion
	around this.   Will be doing this tomorrow.

	* statement.cs (Unsafe.Resolve): The state is checked during
	resolve, not emit, so we have to set the flags for IsUnsfe here.

2002-07-10  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (MemberAccess.ResolveMemberAccess): Since we can
	not catch the Error_ObjectRefRequired in SimpleName (as it is
	possible to have a class/instance variable name that later gets
	deambiguated), we have to check this here. 	

2002-07-10  Ravi Pratap  <ravi@ximian.com>

	* class.cs (TypeContainer.GetFieldFromEvent): Move away from here,
	make static and put into Expression.

	(Event.Define): Register the private field of the event with the 
	TypeManager so that GetFieldFromEvent can get at it.

	(TypeManager.RegisterPrivateFieldOfEvent): Implement to
	keep track of the private field associated with an event which
	has no accessors.

	(TypeManager.GetPrivateFieldOfEvent): Implement to get at the
	private field.

	* ecore.cs (GetFieldFromEvent): RE-write to use the above methods.

2002-07-10  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (Binary.EmitBranchable): this routine emits the
	Binary expression in a branchable context.  This basically means:
	we need to branch somewhere, not just get the value on the stack.

	This works together with Statement.EmitBoolExpression.

	* statement.cs (Statement.EmitBoolExpression): Use
	EmitBranchable. 

2002-07-09  Miguel de Icaza  <miguel@ximian.com>

	* statement.cs (For): Reduce the number of jumps in loops.

	(For): Implement loop inversion for the For statement.

	(Break): We can be breaking out of a Try/Catch controlled section
	(foreach might have an implicit try/catch clause), so we need to
	use Leave instead of Br.

	* ecore.cs (FieldExpr.AddressOf): Fix for test-139 (augmented
	now).  If the instace expression supports IMemoryLocation, we use
	the AddressOf method from the IMemoryLocation to extract the
	address instead of emitting the instance.

	This showed up with `This', as we were emitting the instance
	always (Emit) instead of the Address of This.  Particularly
	interesting when This is a value type, as we dont want the Emit
	effect (which was to load the object).

2002-07-08  Miguel de Icaza  <miguel@ximian.com>

	* attribute.cs: Pass the entry point to the DefinePInvokeMethod

	* statement.cs (Checked): Set the CheckedState during the resolve
	process too, as the ConvCast operations track the checked state on
	the resolve process, and not emit.

	* cs-parser.jay (namespace_member_declaration): Flag that we have
	found a declaration when we do.  This is used to flag error 1529

	* driver.cs: Report ok when we display the help only.

2002-07-06  Andrew Birkett  <adb@tardis.ed.ac.uk>

	* cs-tokenizer.cs (xtoken): Improve handling of string literals.

2002-07-04  Miguel de Icaza  <miguel@ximian.com>

	* cs-tokenizer.cs (define): We also have to track locally the
	defines.  AllDefines is just used for the Conditional Attribute,
	but we also need the local defines for the current source code. 

2002-07-03  Miguel de Icaza  <miguel@ximian.com>

	* statement.cs (While, For, Do): These loops can exit through a
	Break statement, use this information to tell whether the
	statement is the last piece of code.

	(Break): Flag that we break.

	* codegen.cs (EmitContexts): New `Breaks' state variable.

2002-07-03  Martin Baulig  <martin@gnome.org>

	* class.cs (TypeContainer.MethodModifiersValid): Allow override
	modifiers in method declarations in structs.  Otherwise, you won't
	be able to override things like Object.Equals().

2002-07-02  Miguel de Icaza  <miguel@ximian.com>

	* class.cs (Method, Property, Indexer): Do not allow the public
	modifier to be used in explicit interface implementations.

	(TypeContainer.MethodModifiersValid): Catch virtual, abstract and
	override modifiers in method declarations in structs

2002-07-02   Andrew Birkett <adb@tardis.ed.ac.uk>

	* cs-tokenizer.cs (adjust_int, adjust_real): Do not abort on
	integer or real overflow, report an error

2002-07-02  Martin Baulig  <martin@gnome.org>

	* typemanager.cs (TypeManager.InitCoreTypes): When compiling
	corlib, dynamically call AssemblyBuilder.SetCorlibTypeBuilders()
	to tell the runtime about our newly created System.Object and
	System.ValueType types.

2002-07-02  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (This): Use Stobj/Ldobj when we are a member of a
	struct instead of Ldarg/Starg.

2002-07-02  Martin Baulig  <martin@gnome.org>

	* expression.cs (Indirection.Indirection): Call
	TypeManager.TypeToCoreType() on `expr.Type.GetElementType ()'.

2002-07-02  Martin Baulig  <martin@gnome.org>

	* expression.cs (ArrayAccess.EmitStoreOpcode): If the type is a
	ValueType, call TypeManager.TypeToCoreType() on it.
	(Invocations.EmitParams): Call TypeManager.TypeToCoreType() on
	the OpCodes.Newarr argument.

2002-07-02  Martin Baulig  <martin@gnome.org>

	* expression.cs (Invocation.EmitCall): When compiling corlib,
	replace all calls to the system's System.Array type to calls to
	the newly created one.

	* typemanager.cs (TypeManager.InitCodeHelpers): Added a few more
	System.Array methods.
	(TypeManager.InitCoreTypes): When compiling corlib, get the methods
	from the system's System.Array type which must be replaced.

Tue Jul 2 19:05:05 CEST 2002 Paolo Molaro <lupus@ximian.com>

	* typemanager.cs: load unverifiable_code_ctor so we can build
	corlib using the correct type. Avoid using GetTypeCode() with
	TypeBuilders.
	* rootcontext.cs: uses TypeManager.unverifiable_code_ctor and
	TypeManager.object_type to allow building corlib.

Tue Jul 2 19:03:19 CEST 2002 Paolo Molaro <lupus@ximian.com>

	* ecore.cs: handle System.Enum separately in LoadFromPtr().

2002-07-01  Martin Baulig  <martin@gnome.org>

	* class.cs: Make the last change actually work, we need to check
	whether `ifaces != null' to avoid a crash.

Mon Jul 1 16:15:03 CEST 2002 Paolo Molaro <lupus@ximian.com>

	* class.cs: when we build structs without fields that implement
	interfaces, we need to add the interfaces separately, since there is
	no API to both set the size and add the interfaces at type creation
	time.

Mon Jul 1 14:50:47 CEST 2002 Paolo Molaro <lupus@ximian.com>

	* expression.cs: the dimension arguments to the array constructors
	need to be converted if they are a long.

Mon Jul 1 12:26:12 CEST 2002 Paolo Molaro <lupus@ximian.com>

	* class.cs: don't emit ldarg.0 if there is no parent constructor
	(fixes showstopper for corlib).

2002-06-29  Martin Baulig  <martin@gnome.org>

	MCS now compiles corlib on GNU/Linux :-)

	* attribute.cs (Attribute.ApplyAttributes): Treat Accessors like Method,
	ie. check for MethodImplOptions.InternalCall.

	* class.cs (TypeContainer.DefineType): When compiling corlib, both parent
	and TypeManager.attribute_type are null, so we must explicitly check
	whether parent is not null to find out whether it's an attribute type.
	(Property.Emit): Always call Attribute.ApplyAttributes() on the GetBuilder
	and SetBuilder, not only if the property is neither abstract nor external.
	This is necessary to set the MethodImplOptions on the accessor methods.
	(Indexer.Emit): Call Attribute.ApplyAttributes() on the GetBuilder and
	SetBuilder, see Property.Emit().

	* rootcontext.cs (RootContext.PopulateTypes): When compiling corlib, don't
	populate "System.Object", "System.ValueType" and "System.Attribute" since
	they've already been populated from BootCorlib_PopulateCoreTypes().

2002-06-29  Martin Baulig  <martin@gnome.org>

	* ecore.cs (Expression.ImplicitReferenceConversionExists): If expr
	is the NullLiteral, we also need to make sure that target_type is not
	an enum type.	

2002-06-29  Martin Baulig  <martin@gnome.org>

	* rootcontext.cs (RootContext.ResolveCore): We must initialize
	`TypeManager.multicast_delegate_type' and `TypeManager.delegate_type'
	before calling BootstrapCorlib_ResolveDelegate ().

2002-06-27  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* statement.cs: fixed build-breaker. All tests passed ok.

2002-06-27  Martin Baulig  <martin@gnome.org>

	* typemanager.cs (TypeManager.VerifyUnManaged): Added explicit check
	for System.Decimal when compiling corlib.

2002-06-27  Martin Baulig  <martin@gnome.org>

	* statement.cs (Switch.TableSwitchEmit): Make this work with empty
	switch blocks which contain nothing but a default clause.

2002-06-26  Andrew  <adb@tardis.ed.ac.uk>

       * ../errors/cs1501-3.cs: Added new test for struct ctr typechecks.

2002-06-27  Martin Baulig  <martin@gnome.org>

	* ecore.cs (PropertyExpr.PropertyExpr): Call
	TypeManager.TypeToCoreType() on the `pi.PropertyType'.

	* typemanager.cs (TypeManager.TypeToCoreType): Return if the type
	is already a TypeBuilder.

2002-06-27  Martin Baulig  <martin@gnome.org>

	* ecore.cs (Expression.ImplicitReferenceConversionExists): Use
	`target_type == TypeManager.array_type', not IsAssignableFrom() in
	the "from an array-type to System.Array" case.  This makes it work
	when compiling corlib.

2002-06-27  Martin Baulig  <martin@gnome.org>

	* ecore.cs (Expression.SimpleNameResolve): If the expression is a
	non-static PropertyExpr, set its InstanceExpression.  This makes
	the `ICollection.Count' property work in System/Array.cs.

2002-06-25  Andrew Birkett  <adb@tardis.ed.ac.uk>

	* driver.cs: Made error handling more consistent.  Errors now
	tracked by Report class, so many methods which used to return int
	now return void.  Main() now prints success/failure and 
	errors/warnings message.

	Renamed '--probe' compiler argument to '--expect-error'.  Removed
	the magic number return values (123 and 124).  Now, if the
	expected error occurs, the compiler exits with success (exit value
	0).  If the compilation completes without seeing that particular
	error, the compiler exits with failure (exit value 1).  The
	makefile in mcs/errors has been changed to handle the new behaviour.

	* report.cs: Made 'expected error' number a property and renamed
	it from 'Probe' to 'ExpectedError'.

	* genericparser.cs: Removed error handling support, since it is
	now all done by Report class.

	* cs-parser.jay, mb-parser.jay: Errors are tracked by Report
	class, so parse() no longer returns an int.

	* namespace.cs: Use Report.Error instead of GenericParser.error

2002-06-22  Miguel de Icaza  <miguel@ximian.com>

	* class.cs (TypeContainer.AddMethod, TypeContainer.AddIndexer,
	TypeContainer.AddOperator): At the front of the list put the
	explicit implementations, so they get resolved/defined first. 

2002-06-21  Miguel de Icaza  <miguel@ximian.com>

	* class.cs (TypeContainer.VerifyImplements): Verifies that a given
	interface type is implemented by this TypeContainer.  Used during
	explicit interface implementation.

	(Property.Define, Indexer.Define, Method.Define): Validate that
	the given interface in the explicit implementation is one of the
	base classes for the containing type.

	Also if we are explicitly implementing an interface, but there is
	no match in the pending implementation table, report an error.

	(Property.Define): Only define the property if we are
	not explicitly implementing a property from an interface.  Use the
	correct name also for those properties (the same CSC uses,
	although that is really not needed).

	(Property.Emit): Do not emit attributes for explicitly implemented
	properties, as there is no TypeBuilder.

	(Indexer.Emit): ditto.

	Hiding then means that we do not really *implement* a pending
	implementation, which makes code fail.

2002-06-22  Martin Baulig  <martin@gnome.org>

	* ecore.cs (Expression.Constantify): Call TypeManager.TypeToCoreType() on
	the return value of Object.GetType().  [FIXME: we need to do this whenever
	we get a type back from the reflection library].

Fri Jun 21 13:37:57 CEST 2002 Paolo Molaro <lupus@ximian.com>

	* typemanager.cs: make ExpandInterfaces() slip duplicated interfaces.

2002-06-20  Miguel de Icaza  <miguel@ximian.com>

	* attribute.cs: Return null if we can not look up the type.

	* class.cs (TypeContainer.GetClassBases): Use ExpandInterfaces on
	the interface types found.

	* interface.cs (Interface.GetInterfaceBases): Use ExpandInterfaces on the
	interface types found.

	* typemanager.cs (GetInterfaces): Make this routine returns alll
	the interfaces and work around the lame differences between
	System.Type and System.Reflection.Emit.TypeBuilder in the results
	result for GetInterfaces.

	(ExpandInterfaces): Given an array of interface types, expand and
	eliminate repeated ocurrences of an interface.  This expands in
	context like: IA; IB : IA; IC : IA, IB; the interface "IC" to
	be IA, IB, IC.

2002-06-21  Martin Baulig  <martin@gnome.org>

	* typemanager.cs (TypeManager.EnumToUnderlying): It's now safe to call this function
	on System.Enum.

2002-06-21  Martin Baulig  <martin@gnome.org>

	* typemanager.cs (TypeManager.TypeToCoreType): New function.  When compiling corlib
	and called with one of the core types, return the corresponding typebuilder for
	that type.

	* expression.cs (ArrayAccess.DoResolve): Call TypeManager.TypeToCoreType() on the
	element type.

2002-06-21  Martin Baulig  <martin@gnome.org>

	* ecore.cs (Expression.ExplicitReferenceConversionExists): Use
	`target_type.IsArray' instead of `target_type.IsSubclassOf (TypeManager.array_type)'.
	(Expression.ConvertReferenceExplicit): Likewise.

	* expression.cs (ElementAccess.DoResolve): Likewise.
	(ElementAccess.DoResolveLValue): Likewise.

2002-06-10  Martin Baulig  <martin@gnome.org>

	* interface.cs (Interface.PopulateIndexer): When creating the setter, we need to
	add the "value" parameter to the parameter list.

	* statement.cs (Fixed.Emit): Pass the return value of the child block's Emit()
	to our caller.

2002-06-19  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (ArrayCreation.ExpressionToArrayArgument): Convert
	the argument to an int, uint, long or ulong, per the spec.  Also
	catch negative constants in array creation.

Thu Jun 20 17:56:48 CEST 2002 Paolo Molaro <lupus@ximian.com>

	* class.cs: do not allow the same interface to appear twice in
	the definition list.

Wed Jun 19 22:33:37 CEST 2002 Paolo Molaro <lupus@ximian.com>

	* ecore.cs: don't use ldlen with System.Array.

Wed Jun 19 20:57:40 CEST 2002 Paolo Molaro <lupus@ximian.com>

	* ecore.cs: stobj requires a type argument. Handle indirect stores on enums.

Wed Jun 19 20:17:59 CEST 2002 Paolo Molaro <lupus@ximian.com>

	* modifiers.cs: produce correct field attributes for protected
	internal. Easy fix so miguel can work on ther harder stuff:-)

2002-06-18  Miguel de Icaza  <miguel@ximian.com>

	* pending.cs: New file.  Move the code from class.cs here.
	Support clearning the pending flag for all methods (when not doing
	explicit interface implementation).

Tue Jun 18 10:36:22 CEST 2002 Paolo Molaro <lupus@ximian.com>

	* rootcontext.cs: added a couple more types needed to bootstrap.

2002-06-17  Miguel de Icaza  <miguel@ximian.com>

	* typemanager.cs (GetConstructor): Use DeclaredOnly to look the
	constructor in the type, instead of any constructor in the type
	hierarchy.  Thanks to Paolo for finding this bug (it showed up as
	a bug in the Mono runtime when applying the params attribute). 

2002-06-16  Rafael Teixeira  <rafaelteixeirabr@hotmail.com>
	* changed namespace.cs to use "GenericParser.error(...)" instead of "CSharpParser.error(...)"

2002-06-14  Rachel Hestilow  <hestilow@ximian.com>

	* expression.cs (Unary.ResolveOperator): Use TypeManager
	to resolve the type.

2002-06-13  Ravi Pratap  <ravi@ximian.com>

	* cs-parser.jay (enum_member_declaration): Pass in the attributes
	attached.

	* enum.cs (AddEnumMember): Add support to store the attributes associated 
	with each member too.

	* attribute.cs (CheckAttribute, ApplyAttributes): Update to handle
	field builders too - this takes care of the enum member case.

2002-06-10  Rachel Hestilow  <hestilow@ximian.com>

	* typemanager.cs (TypeManager.VerifyUnManaged): Allow
	address-of operator on both value types and pointers.

2002-06-10  Martin Baulig  <martin@gnome.org>

	* interface.cs (Interface.PopulateIndexer): Add the indexer's
	PropertyBuilder to the `property_builders' list.

	* expression.cs (Indexers.GetIndexersForTypeOrInterface): New private method.
	(Indexers.GetIndexersForType): Call GetIndexersForTypeOrInterface() on the
	`lookup_type' and all its interfaces.  Unfortunately, Type.FindMembers() won't
	find any indexers which are inherited from an interface.

2002-06-09  Martin Baulig  <martin@gnome.org>

	* const.cs (Const.LookupConstantValue): Convert `Expr' to a literal of
	the same type as the constant if necessary.  There's also a test-130.cs
	for this.

	* enum.cs (Enum.ChangeEnumType): Moved to typemanager.cs and made public.

	* typemanager.cs (TypeManager.ChangeType): Previously known as
	Enum.ChangeEnumType().

2002-06-09  Martin Baulig  <martin@gnome.org>

	* expression.cs (Cast.TryReduce): Added support for consts.

2002-06-08  Ravi Pratap  <ravi@ximian.com>

	* class.cs (Accessor): Hold attributes information so we can pass
	it along.

	* cs-parser.jay (get_accessor_declaration, set_accessor_declaration):
	Modify to pass in attributes attached to the methods.

	(add_accessor_declaration, remove_accessor_declaration): Ditto.

	* attribute.cs (ApplyAttributes, CheckAttribute): Update accordingly
	to handle the Accessor kind :-)

	* class.cs (Property.Emit, Event.Emit): Apply attributes to the accessors

2002-06-08  Martin Baulig  <martin@gnome.org>

	* expression.cs (Unary.TryReduceNegative): Added support for
	ULongConstants.

2002-06-08  Martin Baulig  <martin@gnome.org>

	* enum.cs (Enum.LookupEnumValue): Don't report an error if the
	name can't be found in the `defined_names' - the caller will do a
	MemberLookup in this case and thus find methods in System.Enum
	such as Enum.IsDefined().

2002-06-08  Martin Baulig  <martin@gnome.org>

	* enum.cs (Enum.ChangeEnumType): This is a custom version of
	Convert.ChangeType() which works with TypeBuilder created types.
	(Enum.LookupEnumValue, Enum.Define): Use it here.

	* class.cs (TypeContainer.RegisterRequiredImplementations): Added
	`TypeBuilder.BaseType != null' check.
	(TypeContainer.FindMembers): Only lookup parent members if we
	actually have a parent.
	(Method.EmitDestructor): Added `ec.ContainerType.BaseType != null' check.
	(ConstructorInitializer.Resolve): Likewise.

	* interface.cs (Interface.FindMembers): Added
	`TypeBuilder.BaseType != null' check.

	* rootcontext.cs (RootContext.ResolveCore): Added
	"System.Runtime.CompilerServices.IndexerNameAttribute" to
	classes_second_stage.

	* typemanager.cs (TypeManager.InitCoreTypes): Don't initialize
	debug_type and trace_type when compiling with --nostdlib.	

2002-06-07  Martin Baulig  <martin@gnome.org>

	* class.cs (TypeContainer): Added `have_nonstatic_fields' field.
	(AddField): Set it to true when adding a non-static field.
	(DefineType): Use `have_nonstatic_fields' to find out whether we
	have non-static fields, not `Fields != null'.

2002-06-02  Miguel de Icaza  <miguel@ximian.com>

	* ecore.cs (SimpleNameResolve): Removed simple bug (we were
	dereferencing a null on the static-field code path)

2002-05-30  Martin Baulig  <martin@gnome.org>

	* codegen.cs (InitMonoSymbolWriter): Added `string[] args' argument
	to take command line arguments.  Use reflection to call the new
	custom `Initialize' function on the symbol writer and pass it the
	command line arguments.

	* driver.cs (--debug-args): New command line argument to pass command
	line arguments to the symbol writer.

2002-05-28  Miguel de Icaza  <miguel@ximian.com>

	* assign.cs (DoResolve): Forgot to do the implicit conversion to
	the target type for indexers and properties.  Thanks to Joe for
	catching this.

2002-05-27  Miguel de Icaza  <miguel@ximian.com>

	* typemanager.cs (MethodFlags): returns the method flags
	(Obsolete/ShouldIgnore) that control warning emission and whether
	the invocation should be made, or ignored. 

	* expression.cs (Invocation.Emit): Remove previous hack, we should
	not do this on matching a base type, we should do this based on an attribute

	Only emit calls to System.Diagnostics.Debug and
	System.Diagnostics.Trace if the TRACE and DEBUG defines are passed
	on the command line.

	* rootcontext.cs: Global settings for tracing and debugging.

	* cs-tokenizer.cs (define): New utility function to track
	defines.   Set the global settings for TRACE and DEBUG if found.

2002-05-25  Ravi Pratap  <ravi@ximian.com>

	* interface.cs (Populate*): Pass in the TypeContainer as well as
	the DeclSpace as parameters so that we can create EmitContexts and
	then use that to apply attributes etc.

	(PopulateMethod, PopulateEvent, PopulateProperty)
	(PopulateIndexer): Apply attributes everywhere.

	* attribute.cs (CheckAttribute): Include InterfaceMethod, InterfaceEvent
	etc.

	(ApplyAttributes): Update accordingly.

	We now apply interface attributes for all members too.

2002-05-26  Miguel de Icaza  <miguel@ximian.com>

	* class.cs (Indexer.Define); Correctly check if we are explicit
	implementation (instead of checking the Name for a ".", we
	directly look up if the InterfaceType was specified).

	Delay the creation of the PropertyBuilder.

	Only create the PropertyBuilder if we are not an explicit
	interface implementation.   This means that explicit interface
	implementation members do not participate in regular function
	lookups, and hence fixes another major ambiguity problem in
	overload resolution (that was the visible effect).

	(DefineMethod): Return whether we are doing an interface
	implementation. 

	* typemanager.cs: Temporary hack until we get attributes in
	interfaces (Ravi is working on that) and we get IndexerName
	support in interfaces.

	* interface.cs: Register the indexers as properties.

	* attribute.cs (Attribute.Resolve): Catch the error, and emit a
	warning, I have verified that this is a bug in the .NET runtime
	(JavaScript suffers of the same problem).

	* typemanager.cs (MemberLookup): When looking up members for
	interfaces, the parent of an interface is the implicit
	System.Object (so we succeed in searches of Object methods in an
	interface method invocation.  Example:  IEnumerable x;  x.ToString
	()) 

2002-05-25  Miguel de Icaza  <miguel@ximian.com>

	* class.cs (Event): Events should also register if they do
	implement the methods that an interface requires.

	* typemanager.cs (MemberLookup); use the new GetInterfaces
	method. 

	(GetInterfaces): The code used to lookup interfaces for a type is
	used in more than one place, factor it here. 

	* driver.cs: Track the errors at the bottom of the file, we kept
	on going.

	* delegate.cs (NewDelegate.Emit): We have to emit a null as the
	instance if the method we are calling is static!

2002-05-24  Miguel de Icaza  <miguel@ximian.com>

	* attribute.cs (ApplyAttributes): Make this function filter out
	the IndexerName attribute (as that attribute in reality is never
	applied) and return the string constant for the IndexerName
	attribute. 

	* class.cs (TypeContainer.Emit): Validate that all the indexers
	have the same IndexerName attribute, and if so, set the
	DefaultName attribute on the class. 

	* typemanager.cs: The return value might contain other stuff (not
	only methods).  For instance, consider a method with an "Item"
	property and an Item method.

	* class.cs: If there is a problem with the parameter types,
	return. 

2002-05-24  Ravi Pratap  <ravi@ximian.com>

	* ecore.cs (ImplicitConversionExists): Wrapper function which also
	looks at user defined conversion after making a call to 
	StandardConversionExists - we need this for overload resolution.

	* expression.cs : Update accordingly the various method calls.

	This fixes 2 bugs filed against implicit user defined conversions 

2002-05-22  Miguel de Icaza  <miguel@ximian.com>

	* statement.cs: Track the result of the assignment.

2002-05-21  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (MemberAccess): Improved error reporting for
	inaccessible members.

2002-05-22  Martin Baulig  <martin@gnome.org>

	* makefile (mcs-mono2.exe): New target.  This is mcs compiled with
	itself with debugging support.

2002-05-22  Martin Baulig  <martin@gnome.org>

	* typemanager.cs ("System.Runtime.InteropServices.StructLayoutAttribute"):
	Removed, this isn't needed anymore.

2002-05-20  Martin Baulig  <martin@gnome.org>

	* typemanager.cs (InitEnumUnderlyingTypes): "System.Char" can't
	be underlying type for an enum.

2002-05-20  Miguel de Icaza  <miguel@ximian.com>

	* typemanager.cs (InitEnumUnderlyingTypes): New helper function
	that splits out the loading of just the core types.

	* rootcontext.cs (ResolveCore): Split the struct resolution in
	two, so we can load the enumeration underlying types before any
	enums are used.

	* expression.cs (Is): Bandaid until we fix properly Switch (see
	bug #24985 for details).

	* typemanager.cs (ImplementsInterface): The hashtable will contain
	a null if there are no interfaces implemented.

2002-05-18  Miguel de Icaza  <miguel@ximian.com>

	* cs-parser.jay (indexer_declarator): It is fine to have array
	parameters

2002-05-17  Miguel de Icaza  <miguel@ximian.com>

	* typemanager.cs: (RegisterBuilder): New function used to register
	TypeBuilders that implement interfaces.  Since
	TypeBuilder.GetInterfaces (as usual) does not work with lame
	Reflection.Emit. 
	(AddUserType): register interfaces.

	(ImplementsInterface): Use the builder_to_ifaces hash if we are
	dealing with TypeBuilder.  Also, arrays are showing up as
	SymbolTypes, which are not TypeBuilders, but whose GetInterfaces
	methods can not be invoked on them!

	* ecore.cs (ExplicitReferenceConversionExists): Made public.
	(ImplicitReferenceConversionExists): Split out from
	StandardConversionExists. 

	* expression.cs (As): We were only implementing one of the three
	cases for the as operator.  We now implement them all.
	(Is): Implement the various other cases for Is as well.

	* typemanager.cs (CACHE): New define used to control if we want or
	not the FindMembers cache.  Seems to have a negative impact on
	performance currently

	(MemberLookup): Nested types have full acess to
	enclosing type members

	Remove code that coped with instance/static returns for events, we
	now catch this in RealFindMembers.

	(RealFindMembers): only perform static lookup if the instance
	lookup did not return a type or an event.  

2002-05-17  Miguel de Icaza  <miguel@ximian.com>

	* assign.cs (CompoundAssign): We pass more semantic information
	now to Compound Assignments than we did before: now we have all
	the information at hand, and now we resolve the target *before* we
	do the expression expansion, which allows the "CacheValue" method
	to have the effect we intended (before, a [x] += 1 would generate
	two differen ArrayAccess expressions from the ElementAccess,
	during the resolution process).

	(CompoundAssign.DoResolve): Resolve target and original_source here.

2002-05-16  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (ArrayAccess): dropped debugging information. 

	* typemanager.cs: Small bug fix: I was always returning i_members,
	instead of one of i_members or s_members (depending on which had
	the content).

	* assign.cs (IAssignMethod.CacheTemporaries): New method.  This
	method is invoked before any code generation takes place, and it
	is a mechanism to inform that the expression will be invoked more
	than once, and that the method should use temporary values to
	avoid having side effects

	(Assign.Emit): Call CacheTemporaries in the IAssignMethod.

	* ecore.cs (Expression.CacheTemporaries): Provide empty default
	implementation.

	* expression.cs (Indirection, ArrayAccess): Add support for
	CacheTemporaries in these two bad boys. 

	* ecore.cs (LoadFromPtr): figure out on our own if we need to use
	ldobj or ldind_ref.  
	(StoreFromPtr): Handle stobj as well.

	* expression.cs (UnaryMutator): Share more code.

	* typemanager.cs (FindMembers): Thanks to Paolo for tracking this
	down: I was not tracking the Filter function as well, which
	was affecting the results of the cache.

2002-05-15  Miguel de Icaza  <miguel@ximian.com>

	* attribute.cs: Remove the hack to handle the CharSet property on
	StructLayouts. 

2002-05-14  Miguel de Icaza  <miguel@ximian.com>

	* attribute.cs (DoResolve): More uglyness, we now only try to
	resolve the attribute partially, to extract the CharSet
	information (only if we are a StructLayout attribute).  Otherwise 

	(GetExtraTypeInfo): Add some code to conditionally kill in the
	future this.   I am more and more convinced that the .NET
	framework has special code to handle the attribute setting on
	certain elements.

	* expression.cs (IsParamsMethodApplicable): Revert my previous
	foreach change here, it was wrong.

2002-05-13  Miguel de Icaza  <miguel@ximian.com>

	* cs-tokenizer.cs: (pp_primary): Eat the ')' at the end.
	(pp_expr): do not abort on unknown input, just return.
	(eval): abort if there are pending chars.

	* attribute.cs (Attribute.Resolve): Positional parameters are
	optional.  Deal with that case.

	* class.cs (DefineType): Call Attribute.GetExtraTypeInfo to fetch
	the Ansi/Unicode/Auto information for the type.

	(TypeContainer.DefineType): instantiate the EmitContext here, as
	we will be using it during the type definition (to resolve
	attributes) and during the emit phase.

	* attribute.cs (Attribute.GetExtraTypeInfo): This routine is used
	to pull type information out of the attributes

	(Attribute.Resolve): track the constructor builder, and allow for
	multiple invocations (structs and classes will use this).

	* ecore.cs (MemberLookupFinal): new version with all the
	parameters customizable.

	* expression.cs (New.DoResolve): Use MemberLookupFinal to locate
	constructors.  Return if the result value is null (as the error
	would have been flagged already by MemberLookupFinal)

	Do not allow instances of abstract classes or interfaces to be
	created.

	* class.cs: (MethodSignature.InheritableMemberSignatureCompare):
	We have to compare the assembly property here when dealing with
	FamANDAssem and Assembly access modifiers, because we might be
	creating an assembly from *modules* (that means that we are not
	getting TypeBuilders for types defined in other modules that are
	part of this assembly).

	(Method.Emit): If the method is marked abstract and has a body,
	emit an error. 

	(TypeContainer.DefineMembers): If both the defined member and the
	parent name match are methods, then do not emit any warnings: let
	the Method.Define routine take care of flagging warnings.  But if
	there is a mismatch (method overrides something else, or method is
	overriwritten by something, then emit warning).

	(MethodSignature.MemberSignatureCompare): If the sig.ret_type is
	set to null, this means `do not check for the return type on the
	signature'. 

	(Method.Define): set the return type for the method signature to
	null, so that we get methods with the same name and parameters and
	different return types.  This is used to flag warning 114 (you are
	hiding a method, and you probably want to use the new/override
	keywords instead).

	* typemanager.cs (MemberLookup): Implemented proper access
	control, closing a long standing set of bug reports.  The problem
	was that the Framework only has two bits: Public and NonPublic,
	and NonPublic includes private and protected methods, but we need
	to enforce the FamANDAssem, FamOrAssem and Family. 

2002-05-11  Miguel de Icaza  <miguel@ximian.com>

	* statement.cs (GotoCase): Return true: Ammounts to giving up
	knowledge on whether we return or not, and letting the other case
	be responsible for it.

2002-05-10  Miguel de Icaza  <miguel@ximian.com>

	* driver.cs: Do not load directories for each file processed, only
	do it if there is a pattern.

	* ecore.cs: Report readonly assigns here as well, as we might have
	been resolved only by MemberAccess.

	(SimpleName.SimpleNameResolve): Also be useful for LValue
	resolution.   We need this to propagate assign to local readonly variables

	* typemanager.cs: Use a ptrhashtable for the criteria, because we
	do not want to reuse potential criteria memory.

	* class.cs (MyEventBuilder): Set reflected_type;

	* ecore.cs (Constantify): Added support for constifying bools.

	(RootContext.LookupType): Added a cache for values looked up in
	the declaration space.

	* typemanager.cs (FindMembers): Now is a front-end to
	RealFindMembers, and provides a two-level hashtable-based cache to
	the request.  

	15% performance improvement: from 22.5 to 19.2 seconds.

	* expression.cs (IsParamsMethodApplicable): use foreach.
	(Invocation.DoResolve): ditto.
	(New.DoResolve): ditto.
	(ArrayCreation.DoResolve): ditto.

	* ecore.cs (FindMostEncompassingType): use foreach.

	* delegate.cs (NewDelegate.DoResolve): Use foreach

	* ecore.cs (Expression.FindMostSpecificSource): Use foreach.
	(RemoveMethods): use foreach.

	* expression.cs (Invocation.MakeUnionSet): Optimization: Use two
	nested foreach statements instead of for, and also break out of
	the inner loop once a match is found.

	(Invocation.OverloadResolve): Use foreach, simplify the code. 

2002-05-08  Miguel de Icaza  <miguel@ximian.com>

	* cfold.cs (BinaryFold): During an enumeration evaluation context,
	we actually unwrap the expression to allow for extra information
	to be extracted. 

	* expression.cs: Use Shr_Un on unsigned operations. 

2002-05-08  Ravi Pratap  <ravi@ximian.com>

	* ecore.cs (FindMostEncompass*): Fix trivial bug where the set of 
	applicable operators was not being considered correctly. This closes
	the bug Miguel reported.

Wed May 8 16:40:50 CEST 2002 Paolo Molaro <lupus@ximian.com>

	* attribute.cs: check that the type derives from System.Attribute
	and report the correct error in that case (moved the duplicate code to
	its own method, too).

Wed May 8 11:50:31 CEST 2002 Paolo Molaro <lupus@ximian.com>

	* attribute.cs: lookup attribute type name as the spec says: first the
	bare attribute name and then name + "Attribute" (nant compiles with
	mcs after this fix).

2002-05-07  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (Unary.TryReduceNegative): Ah!  Tricky!  Tricky!
	Because of the way we parse things, we should try to see if a
	UIntConstant can fit in an integer.

2002-05-07  Ravi Pratap  <ravi@ximian.com>

	* ecore.cs (GetConversionOperators): Do not pick up op_True operators
	when we are in an explicit context.

	(ConvertReferenceExplicit): When converting from Iface type S to Class
	T make sure the rules are implemented as an OR.

	* parameter.cs (ParameterType): Make it a property for now although the
	purpose really isn't anything immediate.

	* expression.cs (Is*Applicable): Do better checking on the parameter type
	of a ref/out parameter. The ones from the system assemblies are already 
	marked with the correct type so we don't need to do any correction.

	* ecore.cs (StandardConversionExists): Conversion from Interface types to 
	the object type is standard too so include that.

2002-05-06  Miguel de Icaza  <miguel@ximian.com>

	* ecore.cs (StandardConversionExists): Augment with missing code:
	deal with IntConstant, LongConstants and Enumerations.

	* assign.cs: Report the error, instead of failing silently

	* rootcontext.cs (AddGlobalAttributes): Track attributes on the
	typecontainer that they are declared, because the
	typecontainer/namespace will have the list of using clauses that
	need to be applied.

	Assembly Attributes were escaping the normal registration
	mechanism. 

	(EmitCode): Apply attributes within an EmitContext that represents
	the container they were declared on.

	* cs-parser.jay: Track bases for structs.  How did I get this wrong?

2002-05-06  Ravi Pratap  <ravi@ximian.com>

	* ecore.cs (FindMostEncompassingType, FindMostEncompassedType):
	Revamp completely - make much cleaner as we now operate only
	on a set of Types.

	(FindMostSpecificSource, FindMostSpecificTarget): New methods
	to implement the logic detailed in the spec more correctly.

	(UserDefinedConversion): Update accordingly.

2002-05-06  Miguel de Icaza  <miguel@ximian.com>

	* statement.cs: Return flow analysis information up.

	* cs-tokenizer.cs (adjust_real): Share code between LITERAL_DOUBLE
	and the default.

	(token): Do not consume an extra character before calling
	decimal_digits.

2002-05-06  Piers Haken	<piersh@friskit.com>

	* cs-parser.jay: add 'override' attribute to System.Object.Finalize

2002-05-06  Miguel de Icaza  <miguel@ximian.com>

	* class.cs (Constructor.Emit): Set the IsStatic flag in the
	EmitContext during the instance constructor initializer
	resolution, to stop access to instance variables.

	This is mandated by the spec, last paragraph of the `constructor
	initializers' section. 

2002-05-05  Miguel de Icaza  <miguel@ximian.com>

	* cs-parser.jay, class.cs (Accessor): new class used to represent
	an accessor (get or set).  In the past we used `null' to represent
	a missing accessor.  But this is ambiguous because there was no
	way to tell in abstract indexers/properties if one of them was
	specified.

	Now there is a way of addressing that.

	* expression.cs (Indexers.GetIndexersForType): Use TypeManager.MemberLookup
	instead of FindMembers.

	* class.cs (TypeContainer.EmitFieldInitializer): Do not typecast
	the result of Assign.Resolve as Assign, but rather as ExpressionStatement.

	* attribute.cs: Treat indexers and properties as the same in terms
	of applying attributes

	* ecore.cs (FindMostEncompassedType): Use statically initialized
	EmptyExpressions()s like we do elsewhere to avoid creating useless
	objects (and we take this out of the tight loop).

	(GetConversionOperators): Move the code to extract the actual
	operators to a separate routine to clean things up.

2002-05-04  Miguel de Icaza  <miguel@ximian.com>

	* ecore.cs (FieldExpr): Remove un-needed tests for null, since now
	events are always registered FieldBuilders.

	* class.cs (FieldBase): New class shared by Fields 

	* delegate.cs: If we are a toplevel delegate, use our full name.
	If we are a nested delegate, then only use our tail name.

2002-05-02  Ravi Pratap  <ravi@ximian.com>

	* expression.cs (IsApplicable): Ensure that we add the "&" to
	ref/out types before comparing it with the type of the argument.

	(IsParamsMethodApplicable): Ditto.

	(Argument.Type): Use TypeManager.LookupType instead of Type.GetType - 
	silly me ;-)

	* delegate.cs : Handle the case when we have more than one applicable
	method. Flag an error only when we finish checking all.

2002-05-02  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs: Add support for boolean static initializers.

2002-05-01  Miguel de Icaza  <miguel@ximian.com>

	* attribute.cs: Use proper cast for Events, since we use a MyEventBuilder.

	* parameter.cs (ComputeParameterTypes,
	ComputeAndDefineParameterTypes): Better error handling: now we
	clear the `types' cache if we fail during any of the type lookups.
	We also return the status code correctly to our caller

	* delegate.cs: If we fail to define a delegate, abort the extra
	steps. 

	* expression.cs (Binary.ResolveOperator): for
	operator==(object,object) and operator !=(object, object) we also
	have to verify that there is an implicit conversion from one to
	the other.

	(ArrayAccess.DoResolve): Array Access can operate on
	non-variables. 

2002-04-30  Miguel de Icaza  <miguel@ximian.com>

	* assign.cs (CompoundAssign): A new class used as a "flag" that
	the assignment actually is happening as part of a compound
	assignment operator.

	During compound assignment, a few new rules exist to enable things
	like:

	byte b |= 1 + 2

	From the spec:

	x op= y can be evaluated as x = (T) (x op y) (ie, an explicit cast
	to the type of x) if y is implicitly convertible to the type of x,
	and the operator is a builtin operator and the return type of the
	operator is explicitly convertible to the type of x. 

	* rootcontext.cs: Reset warning level to 2.  4 catches various
	"interesting" features in mcs, we must clean this up at some
	point, but currently am trying to kill other bugs ;-)

	* ecore.cs (SimpleName.SimpleNameResolve): Perform member lookups
	in container classes as well.  

	* expression.cs (Binary.ResolveOperator): Handle string case
	before anything else (as operator overloading does emit an error
	before doing anything else).

	This code could go away when we move to a table driven model, but
	i could not come up with a good plan last night.

2002-04-30  Lawrence Pit <loz@cable.a2000.nl>

	* typemanager.cs (CSharpName): reimplementation using regex.
	* class.cs: added null check for fields in Emit
	* rootcontext.cs: set warninglevel to 4

2002-04-29  Miguel de Icaza  <miguel@ximian.com>

	* typemanager.cs (CSharpName): reimplemented with Lupus
	suggestion.

2002-04-28  Miguel de Icaza  <miguel@ximian.com>

	* statement.cs (If): correclty implement Resolve, because we were
	not catching sem errors in there.  The same process is needed
	everywhere else. 
	(Return, StatementExpression, For, While, Do, Throw, Lock): Implement Resolve


	(Statement.Warning_DeadCodeFound): Factorize code.
	(While): Report dead code here too.

	(Statement): Added Resolve virtual method to allow
	for resolution split from the emit code.

2002-04-26  Miguel de Icaza  <miguel@ximian.com>

	* statement.cs (EmitBoolExpression): No longer try to resolve the
	expression here.    
	(MakeBoolean): New utility function that resolve, implicitly
	converts to boolean and tags the expression. 


	(If, Do): Implement dead code elimination.
	(While): Implement loop inversion

	(Do, While, For, If): Resolve the expression prior to calling our
	code generation.

2002-04-22  Lawrence Pit <loz@cable.a2000.nl>

	* class.cs:
	  - added method Report28 (warning: program has more than one entry point)
	  - added method IsEntryPoint, implements paragraph 10.1 of the spec
	  - modified method Method.Define, the part at the end of the method

	* rootcontext.cs: added static public Location EntryPointLocation;
	  
	* ../errors/cs0028.cs : Add test case for the above warning.		  

	* typemanager.cs:
	  - modified method CSharpName to allow arrays of primitive type to
	    be printed nicely (e.g. instead of System.Int32[][] it now prints
	    int[][])
	  - added method CSharpSignature: returns the signature of a method
	    in string format to be used in reporting errors, warnings, etc.

	* support.cs: InternalParameters.ParameterDesc variable tmp initialized
	with String.Empty.

2002-04-26  Ravi Pratap  <ravi@ximian.com>

	* delegate.cs (Define): Fix extremely silly bug where I was
	setting the type of the 'object' parameter of the BeginInvoke
	method to System.IAsyncResult instead of System.Object ;-)

2002-04-26  Miguel de Icaza  <miguel@ximian.com>

	* class.cs (ConstructorInitializer.Resolve): Also use DeclaredOnly
	here. 

	(Constructor.Emit): return if we fail to initialize the
	constructor.  Another door closed!  

	* expression.cs (New.DoResolve): Improve error message (from -6 to
	1501).  Use DeclaredOnly lookup to find the exact constructor.

	* typemanager.cs (MemberLookup): If DeclaredOnly is set, do not
	loop.  This is useful.

	* cs-parser.jay: Adjust the default parameters so that destructors
	have the proper signature.

2002-04-26  Martin Baulig  <martin@gnome.org>

	* driver.cs (LoadAssembly): If `assembly' contains any characters
	which are only valid in path names and not in assembly names
	(currently slash, backslash and point), use Assembly.LoadFrom ()
	instead of Assembly.Load () on the `assembly' (before iteration
	over the link_paths).

2002-04-26  Martin Baulig  <martin@gnome.org>

	* cs-tokenizer.cs (is_hex): Correctly handle lowercase chars.

2002-04-25  Miguel de Icaza  <miguel@ximian.com>

	* class.cs (Property): use the new typemanager.MemberLookup

	(TypeContainer.MemberLookup): Implement using the
	TypeManager.MemberLookup now. 

	* typemanager.cs: Make MemberLookup a function of the TypeManager,
	and return MemberInfos, so that these can be used without an
	EmitContext (what we had before).

2002-04-24  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs: Fix the case where the argument to params if the
	type of the params.  I omitted handling this before.   Fixed

2002-04-22  Miguel de Icaza  <miguel@ximian.com>

	* driver.cs: Call BootCorlib_PopulateCoreType

	* class.cs (Property.CheckBase): Check for properties only, not
	for all members. 

	* interface.cs: Temporary hack: try/catch around the
	CustomAttributeBuilder, because I am getting an exception that I
	do not understand.

	* rootcontext.cs (BootCorlib_PopulateCoreType): Populate some
	types whose definitions are required to be there (attributes are
	defined before standard types).

	Compute definitions as we boot the various types, as they are used
	immediately (value_type class will need object_type, but if we do
	not initialize object_type, we will pass a null, which will let
	the runtime pick the System.Object from the existing corlib, which
	is not what we want).

2002-04-22  Patrik Torstensson <totte@labs2.com>

	* cs-tokenizer.cs: fixed a number of trim() issues.

2002-04-22  Ravi Pratap  <ravi@ximian.com>

	* expression.cs (Argument.Type): Ensure that we return the correct
	type when we have out or ref parameters [in which case we 
	append a "&"].

2002-04-22  Miguel de Icaza  <miguel@ximian.com>

	* class.cs (Property, Indexer): Allow extern modifier in there. 

	* typemanager.cs (InitBaseTypes): Initializes object_type and
	value_type, since those will be used early on during the bootstrap
	process to compile corlib.

	(InitCoreTypes): Move code from here to InitBaseTypes.

2002-04-21  Miguel de Icaza  <miguel@ximian.com>

	* ecore.cs (PropertyExpr): Optimize calls to Array::get_Length on
	single-dimension arrays as using the ldlen opcode.  

	Daniel Lewis discovered this optimization.  

	* typemanager.cs: Add signature for System.Array::get_Length

2002-04-20  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* statement.cs: report the error when the foreach does not apply to an
	array nor a collection.

2002-04-19  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs: Add implicit conversions to the operator ~.

	* constant.cs (DecimalConstant.Emit): Emit decimal value.

	* typemanager.cs: Locate the decimal constructor.

2002-04-17  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* attribute.cs: use the new property of TypeOf.
	* expression.cs: added 'get' property around typearg.

	These changes fix a build breaker reported by NickD. Is this the
	correct way to fix?  If not, please, revert my changes and make it
	work :-).

2002-04-17  Miguel de Icaza  <miguel@ximian.com>

	* attribute.cs: Add support for typeof in attribute invocations.
	I am not sure that this is right though.

2002-04-14  Duncan Mak  <duncan@ximian.com>

	* cfold.cs (BinaryFold): Catch DivideByZeroException in the
	Binary.Operator.Division case.

2002-04-13  Ravi Pratap  <ravi@ximian.com>

	* class.cs (DefineType): Ensure that we do a proper check on
	attribute types and also register it with the TypeManager.

	(TypeContainer.Targets): The default for attribute types is
	AttributeTargets.All.

	* attribute.cs (ApplyAttributes): Registering the attribute type
	is done elsewhere, not when we discover we have a Usage attribute.

2002-04-12  Ravi Pratap  <ravi@ximian.com>

	* expression.cs (VerifyArgumentsCompat): Implement Miguel's suggestion
	and get rid of is_delegate parameter.

	* everywhere : update.

2002-04-12  Ravi Pratap  <ravi@ximian.com>

	* cs-parser.jay (compilation_unit): Revamp completely to use
	some new ideas that I got from Rhys' grammar to solve the problems
	with assembly level attributes.

	(outer_declaration): New grammar production.

	(attribute_sections): Add.

	(opt_attributes): Base on attribute_sections

	(namespace_declaration): Allow opt_attributes to tackle the case
	when we have assembly level attributes - we are clever in this
	regard now ;-)

	* attribute.cs (ApplyAttributes): Do not worry about assembly 
	attributes in the non-global context.

	* rootcontext.cs (AddGlobalAttributes): Go back to using this
	instead of SetGlobalAttributes.

	* class.cs, rootcontext.cs : Ensure we define and generate 
	attribute types before anything else.

	* attribute.cs (CheckAttribute and GetValidPlaces): Handle the exception
	and flag the new error -20 for the case when the attribute type
	does not have valid targets specified. csc does not catch this.

	* ../errors/errors.txt : update for error # -20

2002-04-11  Ravi Pratap  <ravi@ximian.com>

	* support.cs (InternalParameters.ParameterModifier): Do some null
	checking and return sane values.

	* class.cs (Method.Define): If we are a PInvoke method, ensure
	that we are static and extern. Report error # 601

	* ../errors/cs0601.cs : Add test case for the above error.

2002-04-07  Ravi Pratap  <ravi@ximian.com>

	* rootcontext.cs (attribute_types): We need to keep type of
	all attribute types separately and emit code for them first.

	(RegisterAttribute) : Implement.

	* class.cs (DefineType): Check if the current Type is a custom
	attribute type and register it accordingly.

	* rootcontext.cs (AddGlobalAttributes): Fix silly bug where we were
	adding the first attribute twice and rename to

	(SetGlobalAttributes): this.

	* rootcontext.cs (NamespaceLookup): Run through the aliases too and perform
	lookups.

	* attribute.cs (ApplyAttributes): Take an additional argument telling us
	if we are processing global arguments. Hmm, I am unsure of this.

2002-04-12  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* expression.cs: added static array of strings to avoid calling
	Enum.ToString () for Operator in Binary. Significant recover of
	performance.

2002-04-10  Miguel de Icaza  <miguel@ximian.com>

	* class.cs (FindMembers): Allow the Builders of the various
	members to be null.  If they are skip them.  This only happens
	during the PInvoke declaration.

2002-04-09  Miguel de Icaza  <miguel@ximian.com>

	* parameter.cs (Parameters.ComputeParameterTypes): Flag the
	failure, so we do not keep going afterwards.

	* expression.cs: (Invocation.OverloadResolve): I believe Ravi
	wanted to pass `false' as the `is_delegate' argument.  If this is
	the case, why not use delegate_type == null to mean `is_delegate =
	false' and anything else as is_delegate = true.

Tue Apr  9 05:40:12  2002 Piers Haken <piersh@friskit.com>

	* statement.cs: fixed SimpleSwitchEmit to make 'goto case' goto the
	code for the section, not the beginning of the tests.

2002-04-08  Miguel de Icaza  <miguel@ximian.com>

	* cfold.cs: Handle operator + (Enum x, Underlying x) 

	* expression.cs (Binary): same.  Warn about errors where we have
	Enum/Enum in operator + as well.

Mon Apr  8 06:29:03  2002 Piers Haken <piersh@friskit.com>

	* statement.cs:
		- added support for switch(bool)
		- optimize loading of I8/U8 constants (ldc.i4, iconv_i8)
		- add TableSwitchEmit() to handle table-based switch statements

2002-04-05  Ravi Pratap  <ravi@ximian.com>

	* expression.cs (Invocation.OverloadResolve): Factor out code which
	does parameter compatibility checking with arguments so that we can 
	re-use the code even from Delegate.VerifyApplicability

	(VerifyArgumentsCompat): Move above code here.

	* delegate.cs (VerifyApplicability): Get rid of duplicate code
	and instead make a call to the above method.

2002-03-31  Ravi Pratap  <ravi@ximian.com>

	* typemanager.cs (attribute_type): Corresponds to System.Attribute.
	We use it to keep track of classes which are attribute types.

2002-04-02  Miguel de Icaza  <miguel@ximian.com>

	* delegate.cs (Delegate.Define): Correctly define the types in the
	presence of fixed and array parameters.

	* class.cs (TypeContainers.FindMembers): Use NonPublic flag while
	doing FindMembers.

	* ecore.cs (Expression.MemberLookup): Reset binding flags to not
	include NonPublic after the first iteration.

	* class.cs (Indexer.CheckBase): Only check if both parents are
	non-null. 

	* cs-parser.jay (accessor_body): If empty, set to null.

	* ecore.cs (SimpleName.SimpleNameResolve): We did not have the
	same code path here to resolve constants names that we did have in
	MemberAccess.DoResolve.  There is too much code duplicated here.

2002-04-01  Miguel de Icaza  <miguel@ximian.com>

	* statement.cs, makefile: Drop Statementcollection and just use ArrayLists

	* ecore.cs: Optimize UserDefinedConversion by minimizing the calls
	to MakeUnionSet.

	* cs-tokenizer.cs: Reuse a single StringBuilder for assembling
	tokens, numbers and strings.

	* ecore.cs (MethodGroupExpr): Make Emit warn about missing
	parenthesis.

	* delegate.cs: Use ComputeAndDefineParameterTypes for both the
	asyncronous parameters and the regular parameters.  

	* codegen.cs (CodeGen.Init): Use the constructor that allows us to
	specify the target directory.

	* expression.cs: (This.DoResolve): Simplify
	(As.Emit): Optimize, do not generate IsInst if the expression is
	always of the given type.

	(Is.DoResolve): Bug fix, we were reporting both always/never for
	the is expression.

	* (Invocation.MakeUnionSet): Simplify vastly and optimize, we were
	creating too many unnecessary arrays.

2002-03-31  Miguel de Icaza  <miguel@ximian.com>

	* class.cs (EmitFieldInitializer): Use Assign expression to assign
	fields instead of rolling our own initializer.   Takes care of all
	implicit conversions, and drops unnecessary static checks/argument.

2002-03-31  Dick Porter  <dick@ximian.com>

	* driver.cs: use the GetDirectories() return values properly, and
	use "/" as path separator.

2002-03-30  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (Unary): Optimize - - expr into expr.
	(Binary): Optimize a + (-b) into a -b.

	* codegen.cs (CodeGen): Made all methods static.

2002-03-29  Miguel de Icaza  <miguel@ximian.com>

	* rootcontext.cs: 

	* decl.cs: Rename `definition' into `TypeBuilder' and drop the
	TypeBuilder property.

	* cs-parser.jay: Drop the use of RecordXXX and use RecordDecl
	instead. 

	* tree.cs: Removed the various RecordXXXX, and replaced with a
	single RecordDecl.  Removed all the accessor methods, and just
	left a single access point Type 

	* enum.cs: Rename DefineEnum to DefineType.

	* decl.cs: New abstract method `DefineType' used to unify the
	Defines for Enumerations, Interfaces, TypeContainers and
	Delegates.

	(FindType): Moved LookupInterfaceOrClass here.  Moved the
	LookupBaseClasses method that used to live in class.cs and
	interface.cs here, and renamed to FindType.

	* delegate.cs: Implement DefineType.  Take advantage of the
	refactored pattern for locating the parent builder without taking
	the parent_builder argument (which we know does not work if we are
	nested, and triggering a toplevel definition).

2002-03-28  Miguel de Icaza  <miguel@ximian.com>

	* decl.cs (MemberCore.CheckMethodAgainstBase): Test if the
	accessibility of a member has changed during override and report
	an error if so.

	* class.cs (Method.Define, Property.Define): Only complain on
	overrides if the method is private, any other accessibility is
	fine (and since we just checked the permission is the same, we are
	good to go).

	* cs-tokenizer.cs: only line, region, endregion, if, endif, else
	and elif are processed always.  The other pre-processing
	directives are only processed if we are "taking" the path

2002-03-29  Martin Baulig  <martin@gnome.org>

	* class.cs (Method.Emit): Only emit symbolic debugging info if the
	current location is not Null.

	* codegen.cs (CodeGen.SaveSymbols): Split out symbol writing code into
	a separate method so we can profile it.

	* driver.cs (ShowTime): We need to use `(int) span.TotalSeconds' since
	`span.Seconds' are just seconds, but no minutes or hours.
	(MainDriver): Profile the CodeGen.SaveSymbols calls.

2002-03-28  Miguel de Icaza  <miguel@ximian.com>

	* class.cs (Method.Define), (Property.Define), (Indexer.Define):
	Remove the gratuitous set of Final:

				// If an interface implementation, then we can set Final.
				if (((flags & MethodAttributes.Abstract) == 0) &&
				    implementing.DeclaringType.IsInterface)
					flags |= MethodAttributes.Final;

	I do not know what I was smoking when I used that.


	* cs-parser.jay, delegate.cs: Make Delegate be a DeclSpace, first
	step into fixing the name resolution issues for delegates and
	unifying the toplevel name resolution.

2002-03-28  Martin Baulig  <martin@gnome.org>

	* class.cs (Method.Emit): If we have a symbol writer, call its
	OpenMethod(), CloseMethod() and SetMethodSourceRange() methods to
	tell it about the current method.

	* codegen.cs (EmitContext.Mark): New public method. Tell the symbol
	writer that we're going to emit the first byte of IL code for a new
	statement (a new source line).
	(EmitContext.EmitTopBlock): If we have a symbol writer, call
	EmitContext.Mark() before emitting any code.

	* location.cs (SymbolDocument): Return null when we're Null.

	* statement.cs (Statement): Moved the `Location loc' variable here.
	(Statement.EmitBoolExpression): If we have a symbol writer, call
	ec.Mark() before emitting any code to tell it that we're at the
	beginning of a new statement.
	(StatementExpression): Added `Location' argument to the constructor.
	(Block): Added public readonly variable `StartLocation' and public
	variable `EndLocation'.  The latter is to be set using SetEndLocation().
	(Block): Added constructor which takes a start and end location.
	(Block.SetEndLocation): New method. This sets the end location.
	(Block.EmitMeta): If we have a symbol writer, tell it the names of the
	local variables we create.
	(Block.Emit): If we have a symbol writer, call ec.Mark() before emitting
	each statement and do also mark the begin and end of the block.

	* cs-parser.jay (block : OPEN_BRACE): Use the new `Block' constructor to
	tell it the current lexer.Location, use Location.Null for the end of the
	block.
	(block : OPEN_BRACE opt_statement_list CLOSE_BRACE): When closing the
	current block, set its end location using SetEndLocation().
	(statement_expression): StatementExpression constructor now takes the
	lexer.Location as additional argument.
	(for_statement, declare_local_variables): Likewise.
	(declare_local_variables): When creating a new implicit block, use the
	new Block constructor and pass it the lexer.Location.

2002-03-28  Miguel de Icaza  <miguel@ximian.com>

	* ecore.cs (Expression.MemberLookup): On interfaces, lookup
	members also on the parent interfaces recursively.

2002-03-27  Miguel de Icaza  <miguel@ximian.com>

	* report.cs: Use new formats, since Gonzalo finished the missing
	bits. 

	* expression.cs (Binary.ResolveOperator): added missing operator|
	operator& and operator^ for bool/bool.

	* cs-parser.jay: CheckDef now takes a Location argument that is
	used to report errors more precisly (instead of reporting the end
	of a definition, we try to track something which is a lot closer
	to the source of the problem).

	* cs-tokenizer.cs: Track global token use, so we can properly flag
	the use of #define/#undef after the first token has been seen.

	Also, rename the reportXXXX to Error_DescriptiveName

	* decl.cs (DeclSpace.IsTopLevel): Move property here from
	TypeContainer, so that Enum and Interface can use this too.

	* class.cs (TypeContainer.LookupInterfaceOrClass,
	GetInterfaceOrClass, GetClassBases, DefineType): Drop the
	`builder' argument.  Typically this was used to pass the parent
	builder (a ModuleBuilder or a TypeBuilder from whoever triggered
	the definition).  

	The problem is that a nested class could trigger the definition of
	a toplevel class, and the builder would be obviously wrong in that
	case. 

	So we drop this argument, and we compute dynamically the
	TypeBuilder/ModuleBuilder (the correct information was available
	to us anyways from DeclSpace.Parent)

	* interface.cs (Interface.DefineInterface): Drop builder
	parameter cleanup like class.cs

	* enum.cs (Enum.DefineEnum): Drop builder parameter.  Clean up
	like class.cs

	* statement.cs (Switch.EmitObjectInteger): Emit short/ushort
	values. 

	(Try.Emit): Propagate the returns value from the statement.

	(Return.Emit): Even if we are leavning 

	* driver.cs: Catch IOExpcetion for Directory.GetFiles as well.

	* modifiers.cs: Fix the computation of MethodAttributes flags.

Tue Mar 26 21:14:36 CET 2002 Paolo Molaro <lupus@ximian.com>

	* driver.cs: allow compilation of files that start with '/'.
	Add a default case when checking the argument of --target.

2002-03-25  Miguel de Icaza  <miguel@ximian.com>

	* interface.cs: Implement the same search algorithm for types in
	the interface code.

	* delegate.cs: Do not allow multiple definition.

	* Recovered ChangeLog that got accidentally amputated

	* interface.cs (Interface.DefineInterface): Prevent from double definitions.

	* rootcontext.cs: Load manually enum to allow core classes to
	contain enumerations.

	* enum.cs, ecore.cs, driver.cs, attribute.cs, class.cs, expression.cs:
	Update to new static methods in TypeManager.

	* typemanager.cs (GetMethod, GetConstructor): Use our
	implementation of FindMembers to find the members, since during
	corlib compilation, the types are TypeBuilders and GetMethod and
	GetConstructor do not work.

	Make all methods in TypeManager static.

	(InitCodeHelpers): Split the functionality from
	the InitCodeTypes function.

	* driver.cs: Call InitCodeHelpers after we have populated the
	types. 

	* cs-parser.jay (delegate_declaration): we did not used to compute
	the delegate name correctly for void delegates.

2002-03-24  Miguel de Icaza  <miguel@ximian.com>

	* rootcontext.cs (RootContext): Init the interface_resolve_order
	and type_container_resolve_order always.

	(ResolveCore, BootstrapCorlib_ResolveClass,
	BootstrapCorlib_ResolveStruct): New functions to bootstrap the
	compiler when compiling with --nostdlib

	* class.cs (TypeContainer.DefineType): Check that our parent is
	not null.  This test is most important when we are bootstraping
	the core types.

	* codegen.cs: Split out the symbol writing code.

2002-03-25  Martin Baulig  <martin@gnome.org>

	* driver.cs (-g): Made -g an alias for --debug.

2002-03-24  Martin Baulig  <martin@gnome.org>

	* codegen.cs (SymbolWriter): New public variable. Returns the
	current symbol writer.
	(CodeGen): Added `bool want_debugging_support' argument to the
	 constructor. If true, tell the ModuleBuild that we want debugging
	support and ask it for the ISymbolWriter.
	(Save): If we have a symbol writer, call it's Close() method after
	saving the assembly.

	* driver.c (--debug): New command line argument to create a
	debugger information file.

	* location.cs (SymbolDocument): New public property. Returns an
	ISymbolDocumentWriter object for the current source file or null
	if we don't have a symbol writer.

2002-03-21  Miguel de Icaza  <miguel@ximian.com>

	* driver.cs (LoadAssembly): Correctly return when all the paths
	have been tried and not before.

	* statement.cs (Switch.Emit): return the actual coverage for this
	statement (returns/not-returns)

	(Switch.SimpleSwitchEmit): Do not generate jumps to the end of the
	switch of the statement if we are the last switch section.  That
	kills two problems: try/catch problems (we used to emit an empty
	nop at the end) and switch statements where all branches would
	return. 

2002-03-19  Miguel de Icaza  <miguel@ximian.com>

	* driver.cs: Add default assemblies (the equivalent to the
	Microsoft CSC.RSP file)

	* cs-tokenizer.cs: When updating `cols and setting it to zero,
	also update tokens_seen and set it to false.

	* driver.cs: Implement --recurse for Mike.

	* driver.cs (SplitPathAndPattern): Small bug fix, I was not
	correctly splitting out the paths.

2002-03-18  Miguel de Icaza  <miguel@ximian.com>

	* interface.cs (Interface.PopulateProperty): Instead of using
	`parent' as the declaration space for the set parameters, use
	`this' 

	* support.cs (InternalParameters): InternalParameters constructor
	takes a DeclSpace instead of a TypeContainer.

	* expression.cs (ArrayCreation.EmitDynamicInitializers): If value
	types are being initialized, load the address of it before calling
	the function.  

	(New): Provide a mechanism to disable the generation of local
	value type temporaries when the caller will be providing us with
	an address to store it.

	(ArrayCreation.EmitDynamicInitializers): Use it.

2002-03-17  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (Invocation.EmitArguments): Only probe for array
	property if there is more than one argument.  Sorry about that.

	* class.cs (Invocation.EmitArguments): Fix to emit arguments for
	empty param arrays.

	* class.cs (Method.LabelParameters): Fix incorrect code path that
	prevented the `ParamArrayAttribute' from being applied to the
	params attribute.

2002-03-16  Miguel de Icaza  <miguel@ximian.com>

	* support.cs (ReflectionParameters): Correctly compute whether the
	last argument is a params array.  Fixes the problem with
	string.Split ('a')

	* typemanager.cs: Make the assemblies array always be non-null
	(empty, but non-null)

	* tree.cs (RecordDecl): New function that abstracts the recording
	of names.  This reports error 101, and provides a pointer to the
	previous declaration.  Fixes a crash in the compiler.

	* cs-parser.jay (constructor_declaration): Update to new grammar,
	and provide a constructor_body that can be empty.

2002-03-15  Miguel de Icaza  <miguel@ximian.com>

	* driver.cs: Add support for --resources.

	* expression.cs: (FetchGetMethod, FetchAddressMethod, EmitAssign):
	Make all types for the various array helper methods be integer.

	* ecore.cs (Expression.ConvertNumericExplicit): Pass the
	CheckState to ConvCast.

	(ConvCast): Now it takes a `checked' state argument, to avoid
	depending on the emit context for the conversion, and just using
	the resolve time setting.

	* expression.cs (ArrayCreation.EmitArrayArguments): New function,
	instead of Invocation.EmitArguments.  We do not emit the original
	arguments, instead we emit those which have been converted to
	unsigned int expressions.

	* statement.cs (Block.EmitMeta): Drop tracking of indexes.

	* codegen.cs: ditto.

	* expression.cs (LocalVariableReference): Drop the use of the
	Store function that depended on the variable index.

	* statement.cs (VariableInfo): Drop the `Idx' property from this
	class, as this is not taking into account the indexes for
	temporaries tat we generate during the execution, getting the
	indexes wrong.

	* class.cs: First emit class initializers, then call the parent
	constructor. 

	* expression.cs (Binary): Fix opcode emision.
	(UnaryMutator.EmitCode): Support checked code generation

	* ecore.cs (MemberLookup): TypeManager.FindMembers will return
	matches for events for both the Static and Instance scans,
	pointing to the same element.   Fix that.

2002-03-14  Miguel de Icaza  <miguel@ximian.com>

	* rootcontext.cs (ResolveTree): Always set the
	interface_resolve_order, because nested interfaces will be calling
	into us.

	* class.cs (GetInterfaceOrClass): Track the same resolution
	process used by TypeManager.LookupType.  This fixes the nested
	type lookups in class declarations (separate path from
	LookupType). 

	(TypeContainer.DefineType): Also define nested interfaces.
	(TypeContainer.RegisterOrder): New public function used to
	register the order in which child interfaces need to be closed.

	Nested interfaces need to be closed after their parents have been
	created. 

	* interface.cs (InterfaceAttr): Put all the logic for computing
	the interface attribute here. 

	(DefineInterface): Register our interface order with the
	RootContext or with the TypeContainer depending on the case.

2002-03-12  Miguel de Icaza  <miguel@ximian.com>

	* cs-parser.jay: rework foreach statement to work with the new
	changes to the policy on SimpleNames.

	* report.cs: support Stacktrace on warnings as well.

	* makefile: drop --unsafe and /unsafe from the compile.

2002-03-13  Ravi Pratap  <ravi@ximian.com>

	* ecore.cs (StandardConversionExists): Modify to take an Expression
	as the first parameter. Ensure we do null -> reference type conversion
	checking.

	* Everywhere : update calls accordingly, making use of MyEmptyExpr to store
	temporary Expression objects.

Wed Mar 13 12:32:40 CET 2002 Paolo Molaro <lupus@ximian.com>

	* interface.cs: workaround bug in method overloading resolution
	(there is already a bugzilla bug for it).

2002-03-12  Miguel de Icaza  <miguel@ximian.com>

	We could also solve this problem by having a separate path for
	performing type lookups, instead of DoResolve, we could have a
	ResolveType entry point, and only participating pieces of the
	production (simplename, deref, array) would implement this. 

	* codegen.cs (EmitContext): New field OnlyLookupTypes used to
	signal SimpleName to only resolve type names and not attempt to
	resolve anything else.

	* expression.cs (Cast): Set the flag.

	* ecore.cs (SimpleName): Use the OnlyLookupTypes flag

	* class.cs: Only report 108 if there is no `new' modifier.

	* cs-parser.jay: rework foreach statement to work with the new
	changes to the policy on SimpleNames.

	* report.cs: support Stacktrace on warnings as well.

	* makefile: drop --unsafe and /unsafe from the compile.

2002-03-11  Miguel de Icaza  <miguel@ximian.com>

	* ecore.cs (SimpleName.SimpleNameResolve): Perform local variable
	lookups here, instead of doing that at parse time.  This means
	that our grammar will not introduce `LocalVariableReferences' as
	expressions at this point.  That solves the problem of code like
	this:

	class X {
	   static void Main ()
	   { int X = 1;
	    { X x = null }}}

	This is only half the fix.  The full fix requires parameters to
	also be handled in this way.

	* Everywhere: Use ec.DeclSpace on calls to LookupType, as this
	makes the use more obvious of the DeclSpace.  The
	ec.TypeContainer.TypeBuilder is now only used to pull the
	TypeBuilder for it.

	My theory is that I can get rid of the TypeBuilder completely from
	the EmitContext, and have typecasts where it is used (from
	DeclSpace to where it matters).  

	The only pending problem is that the code that implements Aliases
	is on TypeContainer, and probably should go in DeclSpace.

	* ecore.cs (SimpleName.SimpleNameResolve): Perform local variable
	lookups here, instead of doing that at parse time.  This means
	that our grammar will not introduce `LocalVariableReferences' as
	expressions at this point.  That solves the problem of code like
	this:

	class X {
	   static void Main ()
	   { int X = 1;
	    { X x = null }}}

	This is only half the fix.  The full fix requires parameters to
	also be handled in this way.

	* class.cs (Property.DefineMethod): When implementing an interface
	method, set newslot, when implementing an abstract method, do not
	set the flag (before we tried never setting it, or always setting
	it, which is the difference).
	(Indexer.DefineMethod): same.
	(Method.DefineMethod): same.

	* ecore.cs: Only set the status used flag if we get back a Field.

	* attribute.cs: Temporary hack, so Paolo can keep working.

2002-03-08  Ravi Pratap  <ravi@ximian.com>

	* attribute.cs (Attribute.UnmanagedType): This is to keep track of
	the unmanaged type in the case we have a MarshalAs attribute.

	(Resolve): Handle the case when we are parsing the special MarshalAs
	attribute [we need to store the unmanaged type to use later]

	* typemanager.cs (marshal_as_attr_type): Built in type for the 
	MarshalAs Attribute.

	* attribute.cs (ApplyAttributes): Recognize the MarshalAs attribute 
	on parameters and accordingly set the marshalling info.

2002-03-09  Miguel de Icaza  <miguel@ximian.com>

	* class.cs: Optimizing slightly by removing redundant code after
	we switched to the `NoTypes' return value.
	(Property.DefineMethod): use NoTypes here too.

	This fixes the bug I introduced in my last batch of changes.

2002-03-05  Ravi Pratap  <ravi@ximian.com>

	* tree.cs (RecordEnum): Add. We now keep track of enums too.

	* class.cs (LookupInterfaceOrClass): Check against the list of recorded
	Enums since those are types too. 

	* cs-parser.jay (enum_declaration): Record enums as we parse them.

	* enum.cs (DefineEnum): Return if the TypeBuilder has already been defined 
	thanks to a call during the lookup process.

2002-03-07  Miguel de Icaza  <miguel@ximian.com>

	* statement.cs (Foreach): Lots of work to accomodate a particular
	kind of foreach statement that I had not kept in mind.  It is
	possible to have foreachs on classes that provide a GetEnumerator
	method that return objects that implement the "pattern" for using
	a foreach, there is no need to support GetEnumerator
	specifically. 

	This is needed to compile nant.

	* decl.cs: Only report 114 if the member is not `Finalize' and if
	the warning level is at least 2.

	* class.cs: Moved the compare function from Method to
	MethodSignature. 

	(MethodSignature.InheritableMemberSignatureCompare): Add new
	filter function that is used to extract inheritable methods from a
	class. 

	(Method.Define): Use the new `inheritable_method_signature_filter'
	delegate

	* cs-tokenizer.cs (get_cmd_arg): Do not add white space to the
	command. 

2002-03-06  Miguel de Icaza  <miguel@ximian.com>

	* ecore.cs (Expression.ConvertReferenceExplicit): Removed dead code.

	* cs-parser.jay: Add opt_semicolon to the interface declaration.

	* expression.cs: Pass location information to
	ConvertImplicitStandard. 

	* class.cs: Added debugging code to track return values from
	interfaces. 

2002-03-05  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (Is.DoResolve): If either side of the `is' is an
	interface, do not flag the warning.

	* ecore.cs (ImplicitReferenceConversion): We need a separate test
	for interfaces

	* report.cs: Allow for --fatal to be used with --probe.

	* typemanager.cs (NoTypes): Move the definition for the empty Type
	array here. 

	* class.cs (TypeContainer.FindMembers): Also look for methods defined by
	properties. 
	(TypeContainer.DefineProxy): New function used to proxy to parent
	implementations when implementing interfaces.
	(TypeContainer.ParentImplements): used to lookup if our parent
	implements a public function that is required by an interface.
	(TypeContainer.VerifyPendingMethods): Hook this up.

	* typemanager.cs (TypeManager, AddModule, AddAssembly): Make the
	`modules' and `assemblies' arraylists into arrays.  We only grow
	these are the very early start up of the program, so this improves
	the speedof LookupType (nicely measured).

	* expression.cs (MakeByteBlob): Replaced unsafe code with
	BitConverter, as suggested by Paolo.

	* cfold.cs (ConstantFold.Binary): Special case: perform constant
	folding of string concatenation, but if either side is a string,
	and the other is not, then return null, and let the runtime use
	the concatenation on the string plus the object (using
	`Object.ToString'). 

2002-03-04  Miguel de Icaza  <miguel@ximian.com>

	Constant Folding has been implemented now.

	* expression.cs (Unary.Reduce): Do not throw an exception, catch
	the error instead on types that are not supported in one's
	complement. 

	* constant.cs (Constant and all children): New set of functions to
	perform implict and explicit conversions.

	* ecore.cs (EnumConstant): Implement the new functions to perform
	conversion by proxying to the child expression.

	* codegen.cs: (ConstantCheckState): Constant evaluation has its
	own separate setting that can not be turned off from the command
	line using --unchecked or --checked and is only controlled using
	the checked/unchecked statements and expressions.  This setting is
	used by the constant folder to flag errors.

	* expression.cs (CheckedExpr, UncheckedExpr): Set the
	ConstantCheckState as well.   

	During Resolve, they also have to flag the state, because the
	constant folder runs completely in the Resolve phase.

	* statement.cs (Checked, Unchecked): Set the ConstantCheckState as
	well.

2002-03-01  Miguel de Icaza  <miguel@ximian.com>

	* cfold.cs: New file, this file contains the constant folder.

	* ecore.cs (IMemoryLocation.AddressOf): Now takes an extra
	argument to track whether we are using the resulting address to
	load or store a value and provide better error messages. 

	(FieldExpr.Emit, FieldExpr.EmitAssign, FieldExpr.AddressOf): Use
	new AddressOf arguments.

	* statement.cs (Foreach.EmitCollectionForeach): Update

	* expression.cs (Argument.Emit): Call AddressOf with proper
	arguments to track usage.

	(New.DoEmit): Call AddressOf with new arguments.

	(Unary.Emit): Adjust AddressOf call.

2002-03-01  Ravi Pratap  <ravi@ximian.com>

	* cs-parser.jay (member_access): Change the case for pre-defined types
	to use a MemberAccess instead of a SimpleName. Thanks to Felix again for 
	this suggestion.

	* class.cs (Operator::Emit): If we are abstract or extern, we don't have
	a method body.

	* attribute.cs (CheckAttribute, ApplyAttribute): Ensure that we treat operators
	essentially like methods and apply attributes like MethodImplOptions to them too.

	* ecore.cs (SimpleName.SimpleNameResolve): Perform a check on ec.TypeContainer.TypeBuilder
	not being null.

	* codegen.cs (EmitContext): The constructor now takes in an extra argument specifying the
	DeclSpace as the distinction is important. We provide sane defaults as usually the TypeContainer
	is the DeclSpace.

	* Update code everywhere accordingly.

	* ecore.cs : Change references to ec.TypeContainer to ec.DeclSpace where appropriate.

	* cs-parser.jay (enum_declaration): Set the current namespace of the enum.

2002-02-28  Ravi Pratap  <ravi@ximian.com>

	* rootcontext.cs (LookupType): As we cycle through the chain of namespaces
	try performing lookups against those instead of jumping straight into using
	the 'using' clauses.

	(ImplicitParent): Add. Thanks to Felix Arrese-Igor for this idea.

	(LookupType): Perform lookups in implicit parents too.

	* class.cs (GetInterfaceOrClass): Modify to perform the exact same lookup
	sequence as RootContext.LookupType. 

	* rootcontext.cs (NamespaceLookup): Split out code from LookupType which tries 
	the various cases of namespace lookups into this method.

2002-03-01  Miguel de Icaza  <miguel@ximian.com>

	* cs-parser.jay: Add support for [Attribute ()] (empty arguments
	in positional arguments)

	* class.cs (Operator): Update the AllowedModifiers to contain
	extern. 

	* cs-parser.jay: Update operator declaration to allow for the
	operator body to be empty.

	* cs-tokenizer.cs: Added '\u' unicode support in strings and hex
	values. 

2002-02-27  Miguel de Icaza  <miguel@ximian.com>

	* class.cs (Method.Emit): Label parameters.

	* driver.cs: Return 1 or 0 as the program exit code.

2002-02-26  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs: Special case the `null' object when trying to
	auto-compute the type, as anything can be explicitly converted to
	that. 

	* ecore.cs (Expression.ConvertExplicit): Bug fix, thanks for
	spotting this Paolo.

	(Expression.ImplicitNumericConversion): Perform comparissions of
	the type using the underlying type in the case of an enumeration
	rather than using the enumeration type for the compare.

	Cope with the underlying == type case, which is not possible to
	catch before. 

	(Expression.ConvertNumericExplicit): Perform comparissions of
	the type using the underlying type in the case of an enumeration
	rather than using the enumeration type for the compare.

	* driver.cs: If the user does not supply an extension, assume .exe

	* cs-parser.jay (if_statement): Rewrote so that we can track the
	location for the if statement.

	* expression.cs (Binary.ConstantFold): Only concat strings when
	the operation is "+", not everything ;-)

	* statement.cs (Statement.EmitBoolExpression): Take a location
	argument. 
	(If, While, Do): Track location.

	* expression.cs (Binary.ResolveOperator): In the object + string
	case, I was missing a call to ConvertImplicit

2002-02-25  Ravi Pratap  <ravi@ximian.com>

	* parameter.cs (Parameter.ExternalType): Take in extra DeclSpace and
	Location arguments. Ensure we use RootContext.LookupType to do our work
	and not try to do a direct Type.GetType and ModuleBuilder.GetType

	* interface.cs (PopulateMethod): Handle the type of the parameter being
	null gracefully.

	* expression.cs (Invocation.BetterFunction): Handle the case when we 
	have a params method with no fixed arguments and a call is made with no
	arguments.

2002-02-25  Miguel de Icaza  <miguel@ximian.com>

	* cs-tokenizer.cs: Add support for the quote-escape-sequence in
	the verbatim-string-literal

	* support.cs (InternalParameters.ParameterModifier): handle null
	fixed parameters.
	(InternalParameters.ParameterType): ditto.

	* parameter.cs (VerifyArgs): Also check if the fixed parameter is
	duplicating the name of the variable parameter.
	(GetParameterByName): Fix bug where we were not looking up array
	paramters if they were the only present (thanks Paolo!).
	(GetParameterInfo): We only have an empty set of types if both
	fixed and array are set to null.
	(GetParameterInfo-idx): Handle FixedParameter == null

	* cs-parser.jay: Handle the case where there is no catch
	statements (missing null test).

2002-02-22  Miguel de Icaza  <miguel@ximian.com>

	* driver.cs (MainDriver): Be conservative on our command line
	handling.

	Catch DirectoryNotFoundException when calling GetFiles.

	(SplitPathAndPattern): Used to split the input specification into
	a path and a pattern that we can feed to Directory.GetFiles.

2002-02-21  Miguel de Icaza  <miguel@ximian.com>

	* statement.cs (Fixed): Implement the last case of the Fixed
	statement (string handling).

	* expression.cs (StringPtr): New class used to return a char * to
	a string;  Used by the Fixed statement.

	* typemanager.cs: Add char_ptr_type.  Add get_OffsetToStringData method.

	* expression.cs (Binary.ResolveOperator): Remove redundant
	MemberLookup pn parent type.
	Optimize union call, we do not need a union if the types are the same.
	(Unary.ResolveOperator): REmove redundant MemberLookup on parent
	type.

	Specialize the use of MemberLookup everywhere, instead of using
	the default settings. 

	(StackAlloc): Implement stackalloc keyword.

	* cs-parser.jay: Add rule to parse stackalloc.

	* driver.cs: Handle /h, /help, /?

	* expression.cs (MakeByteBlob): Removed the hacks we had in place
	before we supported unsafe code.

	* makefile: add --unsafe to the self compilation of mcs.

2002-02-20  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (PointerArithmetic): New class that is used to
	perform pointer arithmetic.
	(Binary.Resolve): Handle pointer arithmetic
	Handle pointer comparission.
	(ArrayPtr): Utility expression class that is used to take the
	address of an array.

	(ElementAccess): Implement array access for pointers

	* statement.cs (Fixed): Implement fixed statement for arrays, we
	are missing one more case before we are done.

	* expression.cs (Indirection): Implement EmitAssign and set the
	ExprClass to Variable.  This allows pointer dereferences to be
	treated as variables, and to have values assigned to them.

	* ecore.cs (Expression.StoreFromPtr): New utility function to
	store values dereferencing.

2002-02-20  Ravi Pratap  <ravi@ximian.com>

	* expression.cs (Binary.ResolveOperator): Ensure that we are
	not trying to operate on a void type - this fixes the reported
	bug.

	* decl.cs (CheckMethodAgainstBase): Do not allow overriding if
	the parent implementation is sealed.

	* ../errors/cs0239.cs : Add.

	* attribute.cs (ApplyAttributes): Handle Modulebuilders too.

	* typemanager.cs (unverifiable_code_type): Corresponds to 
	System.Security.UnverifiableCodeAttribute. We need to emit this for modules
	which have unsafe code in them.

	* rootcontext.cs (EmitCode): Emit the above attribute when we are in an 
	unsafe context.

2002-02-19  Miguel de Icaza  <miguel@ximian.com>

	* cs-tokenizer.cs: Add support for @"litreal strings"

	Make tokenizer accept pre-processor directives
	on any column (remove the old C-like limitation). 

	* rootcontext.cs (EmitCode): Emit any global attributes.
	(AddGlobalAttributes): Used to keep track of assembly attributes. 

	* attribute.cs (ApplyAttributes): Support AssemblyAttributes.

	* cs-parser.jay: Add support for global attributes.  

2002-02-17  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (Indirection): New helper class.  Unary will
	create Indirection classes to be able to implement the
	IMemoryLocation interface on it.

2002-02-16  Miguel de Icaza  <miguel@ximian.com>

	* cs-parser.jay (fixed_statement): reference the right statement.

	* statement.cs (Fixed.Emit): Finish implementing the fixed
	statement for the &x case.

2002-02-14  Miguel de Icaza  <miguel@ximian.com>

	* class.cs (Property.Define, Method.Define): Remove newslot when
	`implementing'.  

	* modifiers.cs: My use of NewSlot when `Abstract' was set was
	wrong.  NewSlot should only be used if the `new' keyword is present.

	* driver.cs (GetSystemDir): Use CodeBase instead of FullName for
	locating our system dir.  Sorry about this.

2002-02-13  Miguel de Icaza  <miguel@ximian.com>

	* driver.cs (GetSystemDir): Compute correctly the location of our
	system assemblies.  I was using the compiler directory instead of
	the library directory.

2002-02-13  Ravi Pratap  <ravi@ximian.com>

	* expression.cs (BetterFunction): Put back in what Miguel commented out
	since it is the correct fix. The problem is elsewhere ;-)

	(IsParamsMethodApplicable): Fix bug where we were not checking that the fixed
	parameters of the parms method are themselves compatible or not !

	(StandardConversionExists): Fix very dangerous bug where we were forgetting
	to check that a class implements an interface before saying that an implicit
	conversion was allowed. Use ImplementsInterface to do the checking.

2002-02-13  Miguel de Icaza  <miguel@ximian.com>

	* class.cs (Method.Define): Track whether we are an explicit
	implementation or not.  And only call DefineMethodOverride if we
	are an explicit implementation.

	(Property.DefineMethod): Ditto.

2002-02-11  Ravi Pratap  <ravi@ximian.com>

	* expression.cs (BetterFunction): Catch hideous bug which was
	 preventing us from detecting ambiguous calls due to implicit casts i.e
	cs0121.

2002-01-29  Miguel de Icaza  <miguel@ximian.com>

	* support.cs (Pair): Remove un-needed method.  I figured why I was
	getting the error in cs-parser.jay, the variable in a foreach loop
	is readonly, and the compiler does not really treat this as a variable.

	* cs-parser.jay (fixed_statement): Fix grammar.  Use ASSIGN
	instead of EQUALS in grammar.  

	* typemanager.cs (VerifyUnmanaged): Report correct error (208)

	* expression.cs (Unary.DoResolve): Check whether the argument is
	managed or not.

2002-01-28  Miguel de Icaza  <miguel@ximian.com>

	* support.cs: Api for Pair to set a value.  Despite the fact that
	the variables are public the MS C# compiler refuses to compile
	code that accesses the field if the variable is part of a foreach
	statement. 

	* statement.cs (Fixed): Begin implementation of the fixed
	statement.

	(Block.AddVariable): Return the VariableInfo on success and null
	on failure instead of true/false. 

	* cs-parser.jay (foreach): Catch errors on variables already
	defined (we were ignoring this value before) and properly unwind
	the block hierarchy

	(fixed_statement): grammar for the fixed statement.

2002-01-25  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (UnaryMutator.IsIncrementableNumber): Allow also
	pointer types to be incretemented.

	(SizeOf): Implement.

	* cs-parser.jay (pointer_member_access): Implement
	expr->IDENTIFIER production.

	* expression.cs (IndexerAccess.DoResolve, ArrayAccess.DoResolve,
	MemberAccess.DoResolve, Invocation.DoResolve): Check for pointers
	on safe contexts.

	(Unary): Implement indirection.

	* ecore.cs (Expression.UnsafeError): Reports error 214 (pointer
	use in non-unsafe context).

	(SimpleName.DoResolve): Check for pointers in field access on safe
	contexts. 

	(Expression.LoadFromPtr): Factor the load-indirect code in this
	function.  This was duplicated in UnboxCast and ParameterReference

2002-01-24  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (ComposedCast): report an error if a pointer cast
	is used in a safe region.

	* ecore.cs (Expression.ConvertExplicit): Add rules for implicit
	pointer type casts in unsafe context.

	* codegen.cs (EmitContext): Set up IsUnsafe.

	* cs-parser.jay (non_expression_type): Add productions for pointer
	casts. 

	* expression.cs (Invocation.EmitCall): Remove chunk of buggy
	code.  We should not use force into static mode if the method is
	not virtual.  Fixes bug in MIS

	* statement.cs (Do.Emit, While.Emit, For.Emit,
	Statement.EmitBoolExpression): Add support to Do and While to
	propagate infinite loop as `I do return' semantics.

	Improve the For case to also test for boolean constants.

	* attribute.cs (Attribute.ApplyAttributes): Add ParameterBuilder
	to the list of attributes we can add.

	Remove `EmitContext' argument.

	* class.cs (Method.Define): Apply parameter attributes.
	(Constructor.Define): Apply parameter attributes.
	(MethodCore.LabelParameters): Move here the core of labeling
	parameters. 

	* support.cs (ReflectionParameters.ParameterModifier,
	InternalParameters.ParameterModifier): Use IsByRef on the type and
	only return the OUT bit for these parameters instead of in/out/ref
	flags.

	This is because I miss-understood things.  The ParameterInfo.IsIn
	and IsOut represent whether the parameter has the [In] and [Out]
	attributes set.  

2002-01-22  Miguel de Icaza  <miguel@ximian.com>

	* ecore.cs (FieldExpr.Emit): Release temporaries.

	* assign.cs (LocalTemporary.Release): new function.

	* codegen.cs (EmitContext.GetTemporaryStorage,
	EmitContext.FreeTemporaryStorage): Rework the way we deal with
	temporary storage.  Now we can "put back" localbuilders when we
	are done with them

2002-01-21  Miguel de Icaza  <miguel@ximian.com>

	* ecore.cs (FieldExpr.Emit): Handle initonly fields specially: we
	need to make a copy of the variable to generate verifiable code.

2002-01-19  Miguel de Icaza  <miguel@ximian.com>

	* driver.cs: Compute dynamically the system directory.

	* ecore.cs (CopyNewMethods): reworked, exposed, made public.
	Slower, but more generally useful.  Used by the abstract
	registering implementation. 

	* expression.cs (ResolveMemberAccess): Reorder the way we evaluate
	the rules for the special rule on Type/instances.  First check if
	we have the same name, and if so, try that special static path
	rather than the instance path.

2002-01-18  Miguel de Icaza  <miguel@ximian.com>

	* cs-parser.jay: Emit 642 (warning: possible empty statement) for
	for, while and if.

	* class.cs (TypeBuilder.DefineType): Do not allow inheritance from
	Enum, ValueType, Delegate or Array for non-corlib compiles.

	* cs-tokenizer.cs: Catch long identifiers (645)

	* typemanager.cs (IndexerPropetyName): Ravi never tested this
	piece of code.

	* class.cs (TypeContainer.RegisterRequiredImplementations): Bug
	fix, we were returning too early, so we were not registering
	pending methods from abstract classes.

	Do not register pending methods if the class is abstract.

	* expression.cs (Conditional.DoResolve): Report circular implicit
	conversions when we neecd to compute it for conditional
	expressions. 

	(Is.DoResolve): If the expression is always of the provided type,
	flag warning 183.  If the expression can not ever be of the
	provided type flag warning 184.

	* class.cs: Catch 169 as well.

	* ecore.cs (FieldExpr): For now in AddressOf mark as assigned and
	read. 

2002-01-18  Nick Drochak  <ndrochak@gol.com>

	* makefile: remove path to beta2 csc.exe.  path to csc.exe must be in PATH instead.

2002-01-17  Miguel de Icaza  <miguel@ximian.com>

	* interface.cs: (PopulateMethod): Check for pointers being defined
	only if the unsafe context is active.
	(PopulateProperty): ditto.
	(PopulateIndexer): ditto.

	* class.cs (Method, Method.Define): Allow `unsafe' modifier to be
	specified.  If pointers are present, make sure that they are
	present in an unsafe context.
	(Constructor, Constructor.Define): ditto.
	(Field, Field.Define): ditto.
	(Property, Property.Define): ditto.
	(Event, Event.Define): ditto.

	* interface.cs (Interface.GetInterfaceTypeByName): Only lookup the
	hashtable if there are classes or structs defined.

	* expression.cs (LocalVariableReference.DoResolve): Simplify this
	code, as the constant resolution moved.

	* statement.cs (Block.EmitMeta): Resolve all constants as we emit
	the metadata, so we can flag error 133. 

	* decl.cs (MemberCore.UnsafeOK): New function to test that a
	pointer is being declared in an unsafe context.

2002-01-16  Miguel de Icaza  <miguel@ximian.com>

	* modifiers.cs (Modifiers.Check): Require a Location argument.
	Report error 227 for Unsafe use.

	* typemanager.cs: Remove IsPointerType, we should be using Type.IsPointer

	* statement.cs (For.Emit): If the test is null, then report that
	we do `return', as we wont reach anything afterwards.

	(Switch.SwitchGoverningType): Track the expression that matched
	the conversion.

	* driver.cs: Allow negative numbers as an error code to flag.

	* cs-parser.jay: Handle 1551.

	* namespace.cs: Add 1537 checking (repeated using alias namespaces).

2002-01-15  Miguel de Icaza  <miguel@ximian.com>

	* cs-parser.jay: Report 1518 (type declaration can only contain
	class, struct, interface, enum or delegate)

	(switch_label): Report 1523 (keywords `case' or `default' must
	preced code)

	(opt_switch_sections): Report 1522 (empty switch)

	* driver.cs: Report 1515 (response file specified multiple times)
	Report 1516 (Source file specified multiple times).

	* expression.cs (Argument.Resolve): Signal 1510

	(BaseAccess.Resolve, BaseIndexer.Resolve): Signal 1511 (base
	access not allowed in static code)

2002-01-11  Ravi Pratap  <ravi@ximian.com>

	* typemanager.cs (IsPointerType): Utility method which we are going
	to need a lot.

	* ecore.cs (ImplicitReferenceConversion): A pointer type cannot be cast to
	the object type, so we take care of that.

	* expression.cs (FullMethodDesc): Also include the return type in descriptions.

	* support.cs (ParameterDesc): Fix minor bug which was causing params tags to be
	added to non-params parameters :-)

	* typemanager.cs (CSharpName): Include 'void' type too.	

	(void_ptr_type): Include in the set of core types.

	* ecore.cs (ConvertImplicit): Make use of ConvertImplicitStandard instead of 
	duplicating code.

	(ConvertImplicitStandard): Handle standard implicit pointer conversions when we have 
	an unsafe context.

	* cs-parser.jay (local_variable_pointer_type): Add support for 'void *' as I had 
	completely forgotten about it.

2002-01-10  Ravi Pratap  <ravi@ximian.com>

	* cs-parser.jay (pointer_type): Add. This begins our implementation
	of parsing rules for unsafe code.

	(unsafe_statement): Implement.

	(embedded_statement): Modify to include the above.

	* statement.cs (Unsafe): Implement new class for unsafe blocks.

	* codegen.cs (EmitContext.InUnsafe): Add. This determines
	if the current context is an unsafe one.

	* cs-parser.jay (local_variable_pointer_type): Since local variable types
	are handled differently, we need separate rules for them.

	(local_variable_declaration): Update to use local_variable_pointer_type
	to allow variable declarations of unmanaged pointer types.

	* expression.cs (Unary.ResolveOperator): Ensure that the '&' operator is used only
	in unsafe contexts.

	* ../errors/cs0214.cs : Add.

2002-01-16  Nick Drochak  <ndrochak@gol.com>

	* makefile: remove 'response' file when cleaning.

2002-01-15  Miguel de Icaza  <miguel@ximian.com>

	* cs-parser.jay: Report 1524.

2002-01-14  Miguel de Icaza  <miguel@ximian.com>

	* typemanager.cs (RegisterMethod): drop checking if we have
	registered this from here

2002-01-12  Miguel de Icaza  <miguel@ximian.com>

	* class.cs (Method.EmitDestructor): Implement calling our base
	destructor. 

	* statement.cs (Try.Emit): Fix to reset the InFinally to the old
	value of InFinally.

	* codegen.cs (EmitContext.EmitTopBlock): Destructors will call
	this routine and will wrap the call in a try/catch block.  Deal
	with the case.

2002-01-11  Miguel de Icaza  <miguel@ximian.com>

	* ecore.cs (Expression.MemberLookup): instead of taking a
	parameter `same_type' that was used to tell whether we could
	access private members we compute our containing type from the
	EmitContext.

	(FieldExpr): Added partial support for volatile fields.  This does
	not work for volatile fields exposed from assemblies, as I can not
	figure out how to extract the modreq from it.

	Updated all the source files to use this.

	* codegen.cs (EmitContext): Compute ContainerType ahead of time,
	because it is referenced by MemberLookup very often. 

2002-01-09  Ravi Pratap  <ravi@ximian.com>

	* typemanager.cs (IndexerPropertyName): If we have a TypeBuilder, use
	TypeBuilder.GetCustomAttributes to retrieve what we need.

	Get rid of redundant default_member_attr_type as this is the same as
	default_member_type which already exists.

	* interface.cs, attribute.cs : Update accordingly.

2002-01-08  Miguel de Icaza  <miguel@ximian.com>

	* typemanager.cs: Enable IndexerPropertyName again.  It does not
	work for TYpeBuilders though.  Ravi, can you please fix this?

	* cs-tokenizer.cs: Accept _ as a name in pp-expressions.

	* expression.cs (Argument.Emit): Handle the case of ref objects
	being passed to ref functions;  

	(ParameterReference.EmitLoad): Loads the content of the pointer
	without dereferencing.

2002-01-07  Miguel de Icaza  <miguel@ximian.com>

	* cs-tokenizer.cs: Implemented the pre-processing expressions.

2002-01-08  Ravi Pratap  <ravi@ximian.com>

	* class.cs (Indexer.DefineMethod): Incorporate the interface
	type in the name of the method if we are doing explicit interface
	implementation.

	* expression.cs (ConversionExists): Remove as it is completely obsolete.

	(BetterConversion): Fix extremely trivial bug where we were referring to
	ConversionExists instead of StandardConversionExists ! Hooray, things are fine
	again !

	* ../errors/bug16.cs : Add although we have fixed it.

2002-01-07  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (BaseIndexer): Begin implementation.

	* class.cs (TypeContainer.IsInterfaceMethod): Bug fix.

	* cs-parser.jay (indexer_declarator): Use qualified_identifier
	production directly to remove a shift/reduce, and implement
	explicit interface implementation.

	* cs-tokenizer.cs: Fix tokenizer, it was consuming one extra char
	after a floating point suffix.

	* expression.cs (DoNumericPromotions): Improved the conversion for
	uint/uint.  If we have a constant, we avoid doing a typecast to a
	larger type.

	* class.cs (Indexer): Implement explicit interface implementation
	for indexers.

Sat Jan 5 16:08:23 CET 2002 Paolo Molaro <lupus@ximian.com>

	* class.cs: make the default instance constructor public and hidebysig.

2001-01-03  Ravi Pratap  <ravi@ximian.com>

	* interface.cs (EmitDefaultMemberAttr): Make this helper method static
	so we can call it from elsewhere.

	* class.cs (TypeContainer.Emit): Emit the attribute here too. The rule is that
	we emit it internally if the class has a defined indexer; otherwise the user
	emits it by decorating the class definition with the DefaultMemberAttribute.

	* attribute.cs (ApplyAttributes): Perform checks to see that the DefaultMember
	attribute is not used on a type which defines an indexer.

	* cs-tokenizer.cs (get_cmd_arg): Ensure we trim whitespace and also include the tab
	character when we skip whitespace.

	* ../errors/cs0646.cs : Add.

2002-01-03  Miguel de Icaza  <miguel@ximian.com>

	* ecore.cs (SimpleName.ResolveSimpleName): Report error 120
	again. 

	* makefile: Add practical target `mcs3.exe' which builds the third
	generation compiler. 

	* expression.cs (New): Fix structures constructor calling.

	* class.cs (Property, Method, Indexer): Emit Final flag on the
	method if we are an interface implementation and we are not
	abstract. 

	* ecore.cs (PropertyExpr): New public field `IsBase', tells
	whether this property is referencing a `base' method.

	* expression.cs (Invocation.EmitCall): take an extra argument:
	is_base, this is used to determine whether the `call' or
	`callvirt' opcode should be used.


	* delegate.cs: update EmitCall.

	* class.cs (Method.Define): Set NewSlot for the cases where we are
	not implementing an interface method.

	(Property.Define): ditto.

2002-01-02  Miguel de Icaza  <miguel@ximian.com>

	* cs-tokenizer.cs: (Tokenizer.escape): Escape '\r' as '\r' not as
	'r'.  Allows mcs to parse itself fully.

2002-01-02  Ravi Pratap  <ravi@ximian.com>

	* expression.cs (ArrayCreation.num_automatic_initializers): Keep track
	of the number of initializers that require the InitializeArray method.

	(CheckIndices): Store the Expression in all cases - not the plain value. Also
	update the above field where necessary.

	(MakeByteBlob): Update accordingly.

	(DoEmit): Call EmitStaticInitializers only if the number of initializers is 
	greater than 2.

	(EmitDynamicInitializers): Update in accordance with the new optimization.

	(ArrayAccess.EmitStoreOpcode): Include char type along with short and ushort - the
	same OpCode applies.

	* cs-parser.jay : Fix some glaring errors I introduced.

2002-01-01  Ravi Pratap  <ravi@ximian.com> 

	* parameters.cs (AddVariable, AddConstant): Pass in current_local_parameters
	so that we can check for name clashes there too.

	* typemanager.cs (default_member_attr_type): The attribute that we need to emit
	for interface indexers.

	* interfaces.cs (Define): Emit the default member attribute.

	* expression.cs (MakeByteBlob): Fix extremely trivial bug where the wrong
	variable was being referred to while setting the value ;-)

2002-01-01  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (MakeByteBlob): Optimize: we do not need to fill
	byte-by-byte information when we know the data is zero.

	Make the block always a multiple of 4, because
	DefineInitializedData has a bug.

	* assign.cs: Fix, we should assign from the temporary, not from
	the source. 

	* expression.cs (MakeByteBlob): Fix my incorrect code.

2001-12-31  Miguel de Icaza  <miguel@ximian.com>

	* typemanager.cs (EnumToUnderlying): This function is used to get
	the underlying type from an enumeration, because it does not
	always work. 

	* constant.cs: Use the I4_S form for values between -128 and 127.

	* statement.cs (Block.LookupLabel): Looks up a label.
	(Block): Drop support for labeled blocks.

	(LabeledStatement): New kind of statement that represents a label
	only.

	(Goto): Finally implement this bad boy.

	* cs-parser.jay: Update to reflect new mechanism to implement
	labels.

2001-12-30  Miguel de Icaza  <miguel@ximian.com>

	* codegen.cs (EmitContext.This): a codegen property that keeps the
	a single instance of this instead of creating many different this
	instances. 

	* delegate.cs (Delegate.DoResolve): Update to use the property;

	* ecore.cs (SimpleName.SimpleNameResolve): Ditto

	* expression.cs (BaseAccess.DoResolve): Ditto.

2001-12-29  Ravi Pratap  <ravi@ximian.com>

	* typemanager.cs (methodimpl_attr_type): Add to hold the type
	corresponding to System.Runtime.CompilerServices.MethodImplAttribute.

	(InitCoreTypes): Update accordingly.

	* attribute.cs (Resolve): Remember if the attribute is a MethodImplAttribute
	so we can quickly store the state.

	(ApplyAttributes): Set the correct implementation flags
	for InternalCall methods.

2001-12-29  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (EmitCall): if a method is not virtual, then do
	not use callvirt on it.

	(ArrayAccess.EmitAssign): storing non-builtin value types (ie,
	user defined stuff) requires the use of stobj, which takes an
	address on the stack instead of an array and an index.  So emit
	the Ldelema operation for it.

	(EmitStoreOpcode): Use stobj for valuetypes.

	(UnaryMutator.EmitCode): Use the right 1 value depending on
	whether we are dealing with int64/uint64, float or doubles.

	* class.cs (TypeContainer.AddConstructor): Fix the logic to define
	constructors that I implemented last night.

	(Constructor.IsDefault): Fix to work properly for static
	constructors.

	* cs-parser.jay (CheckDef): report method signature errors.
	Update error number 103 to be 132.

	* decl.cs: New AdditionResult enumeration value: MethodExists.
	Although we do this check for methods later on in the semantic
	analysis, catching repeated default constructors is so easy that
	we catch these here. 

	* expression.cs (Binary.DoNumericPromotions): Fix the uint64 type
	promotions code.

	(ParameterReference.EmitAssign, Emit): handle
	bools as bytes.

	(ArrayAccess.EmitLoadOpcode): Handle bool type here.
	(ArrayAccess.EmitStoreOpcode): ditto.

	* cs-tokenizer.cs (is_punct): Eliminated empty computation.

	* expression.cs (MakeByteBlob): Complete all the missing types
	(uint, short, ushort, byte, sbyte)

	* class.cs: Only init instance field initializers on instance
	constructors. 

	Rename `constructors' to instance_constructors. 

	(TypeContainer.AddConstructor): Only add constructors to the list
	if it is not static.

	Make sure that we handle default_static_constructor independently
	everywhere where we handle instance_constructors

2001-12-28  Miguel de Icaza  <miguel@ximian.com>

	* class.cs: Do not lookup or create a base initializer for a
	static constructor.

	(ConstructorInitializer.Resolve): use the proper type to lookup
	for constructors.

	* cs-parser.jay: Report error 1585 (modifiers between type and name).

	* enum.cs, interface.cs: Remove CloseType, this is taken care by
	in DeclSpace. 

	* decl.cs: CloseType is now an virtual method, the default
	implementation just closes this type.

2001-12-28  Ravi Pratap  <ravi@ximian.com>

	* attribute.cs (DefinePInvokeMethod): Set the implementation flags
	to PreserveSig by default. Also emit HideBySig on such methods.

	Basically, set the defaults to standard values.

	* expression.cs (Invocation.BetterFunction): We need to make sure that for each
	argument, if candidate is better, it can't be worse than the best !

	(Invocation): Re-write bits to differentiate between methods being
	applicable in their expanded form and their normal form - for params
	methods of course.

	Get rid of use_standard everywhere as only standard conversions are allowed
	in overload resolution. 

	More spec conformance.

2001-12-27  Miguel de Icaza  <miguel@ximian.com>

	* driver.cs: Add --timestamp, to see where the compiler spends
	most of its time.

	* ecore.cs (SimpleName.DoResolve): Do not create an implicit
	`this' in static code.

	(SimpleName.DoResolve): Implement in terms of a helper function
	that allows static-references to be passed upstream to
	MemberAccess.

	(Expression.ResolveWithSimpleName): Resolve specially simple
	names when called by MemberAccess to implement the special
	semantics. 

	(Expression.ImplicitReferenceConversion): Handle conversions from
	Null to reference types before others, as Null's type is
	System.Object. 

	* expression.cs (Invocation.EmitCall): Handle the special case of
	calling methods declared on a reference type from a ValueType
	(Base classes System.Object and System.Enum)

	(MemberAccess.Resolve): Only perform lookups on Enumerations if
	the left hand side is a TypeExpr, not on every enumeration. 

	(Binary.Resolve): If types are reference types, then do a cast to
	object on operators != and == of both arguments.

	* typemanager.cs (FindMembers): Extract instance and static
	members if requested.

	* interface.cs (PopulateProperty): Use void_type instead of null
	as the return type for the setter method.

	(PopulateIndexer): ditto.

2001-12-27  Ravi Pratap  <ravi@ximian.com>

	* support.cs (ReflectionParameters): Fix minor bug where we
	were examining the wrong parameter for the ParamArray attribute.

	Cope with requests for the type of the parameter at position
	greater than the params parameter's. We now return the element
	type of the params array as that makes more sense.

	* expression.cs (Invocation.IsParamsMethodApplicable): Update 
	accordingly as we no longer have to extract the element type
	ourselves.

	(Invocation.OverloadResolve): Update.

2001-12-27  Miguel de Icaza  <miguel@ximian.com>

	* statement.cs (Foreach.GetEnumeratorFilter): Do not compare
	against IEnumerator, test whether the return value is a descendant
	of the IEnumerator interface.

	* class.cs (Indexer.Define): Use an auxiliary method to implement
	the other bits of the method definition.  Begin support for
	explicit interface implementation.

	(Property.DefineMethod): Use TypeManager.void_type instead of null
	for an empty return value.

2001-12-26  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (MemberAccess.ResolveMemberAccess): if we are
	dealing with a FieldExpr which is composed of a FieldBuilder, in
	the code path we did extract the constant, but we should have
	obtained the underlying value to be able to cast it (otherwise we
	end up in an infinite loop, this is what Ravi was running into).

	(ArrayCreation.UpdateIndices): Arrays might be empty.

	(MemberAccess.ResolveMemberAccess): Add support for section
	14.5.4.1 that deals with the special case of E.I when E is a type
	and something else, that I can be a reference to a static member.

	(ArrayCreation.MakeByteBlob): It is not an error to not be able to
	handle a particular array type to create byte blobs, it is just
	something we dont generate byteblobs for.

	* cs-tokenizer.cs (get_cmd_arg): Ignore \r in commands and
	arguments. 

	* location.cs (Push): remove the key from the hashtable that we
	are about to add.   This happens for empty files.

	* driver.cs: Dispose files after we have parsed them.

	(tokenize): new function that only runs the tokenizer on its
	input, for speed testing.

2001-12-26  Ravi Pratap  <ravi@ximian.com>

	* class.cs (Event.Define): Define the private field only if there
	are no accessors defined.

	* expression.cs (ResolveMemberAccess): If there is no associated
	field with the event, that means we have an event defined with its
	own accessors and we should flag error cs0070 since transforming
	ourselves into a field is not valid in that case.

	* ecore.cs (SimpleName.DoResolve): Same as above.

	* attribute.cs (DefinePInvokeMethod): Set the default calling convention
	and charset to sane values.

2001-12-25  Ravi Pratap  <ravi@ximian.com>

	* assign.cs (DoResolve): Perform check on events only if they 
	are being accessed outside the declaring type.

	* cs-parser.jay (event_declarations): Update rules to correctly
	set the type of the implicit parameter etc.

	(add_accessor, remove_accessor): Set current local parameters.

	* expression.cs (Binary): For delegate addition and subtraction,
	cast the return value from the method into the appropriate delegate
	type.

2001-12-24  Ravi Pratap  <ravi@ximian.com>

	* typemanager.cs (RegisterDelegateData, GetDelegateData): Get rid
	of these as the workaround is unnecessary.

	* delegate.cs (NewDelegate.DoResolve): Get rid of bits which registered
	delegate data - none of that is needed at all.

	Re-write bits to extract the instance expression and the delegate method
	correctly.

	* expression.cs (Binary.ResolveOperator): Handle the '-' binary operator 
	on delegates too.

	* attribute.cs (ApplyAttributes): New method to take care of common tasks
	of attaching attributes instead of duplicating code everywhere.

	* everywhere : Update code to do attribute emission using the above method.

2001-12-23  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (IsParamsMethodApplicable): if there are not
	parameters, return immediately.

	* ecore.cs: The 0 literal can be implicity converted to an enum
	type. 

	(SimpleName.DoResolve): First lookup the type, then lookup the
	members. 

	(FieldExpr.Emit): If the InstanceExpression is a ValueType, we
	want to get its address.  If the InstanceExpression is not
	addressable, store the result in a temporary variable, then get
	the address of it.

	* codegen.cs: Only display 219 errors on warning level or above. 

	* expression.cs (ArrayAccess): Make it implement the
	IMemoryLocation interface.

	(Binary.DoResolve): handle the operator == (object a, object b)
	and operator != (object a, object b) without incurring into a
	BoxedCast (because 5 != o should never be performed).

	Handle binary enumerator operators.

	(EmitLoadOpcode): Use Ldelema if the object we are loading is a
	value type, otherwise use Ldelem_ref.

	Use precomputed names;

	(AddressOf): Implement address of

	* cs-parser.jay (labeled_statement): Fix recursive block
	addition by reworking the production.

	* expression.cs (New.DoEmit): New has a special case:
		
		 If we are dealing with a ValueType, we have a few
		 situations to deal with:
		
		    * The target of New is a ValueType variable, that is
		      easy, we just pass this as the variable reference
		
		    * The target of New is being passed as an argument,
		      to a boxing operation or a function that takes a
		      ValueType.
		
		      In this case, we need to create a temporary variable
		      that is the argument of New.


2001-12-23  Ravi Pratap  <ravi@ximian.com>

	* rootcontext.cs (LookupType): Check that current_type is not null before
	going about looking at nested types.

	* ecore.cs (EventExpr.EmitAddOrRemove): Rename from EmitAssign as we do
	not implement the IAssignMethod interface any more.

	* expression.cs (MemberAccess.ResolveMemberAccess): Handle EventExprs specially
	where we tranform them into FieldExprs if they are being resolved from within
	the declaring type.

	* ecore.cs (SimpleName.DoResolve): Do the same here.

	* assign.cs (DoResolve, Emit): Clean up code considerably. 

	* ../errors/bug10.cs : Add.

	* ../errors/cs0070.cs : Add.

	* typemanager.cs : Use PtrHashtable for Delegate data hashtable etc.

	* assign.cs : Get rid of EventIsLocal everywhere.

2001-12-23  Miguel de Icaza  <miguel@ximian.com>

	* ecore.cs (ConvertIntLiteral): finished the implementation.

	* statement.cs (SwitchLabel): Convert the value we are using as a
	key before looking up the table.

2001-12-22  Miguel de Icaza  <miguel@ximian.com>

	* codegen.cs (EmitTopBlock): Require a Location argument now.

	* cs-parser.jay (constructor_declarator): We need to setup
	current_local_parameters before we parse the
	opt_constructor_initializer, to allow the variables to be bound
	to the constructor arguments.

	* rootcontext.cs (LookupType): First lookup nested classes in our
	class and our parents before we go looking outside our class.

	* expression.cs (ConstantFold): Extract/debox the values at the
	beginnning. 

	* rootcontext.cs (EmitCode): Resolve the constants first before we
	resolve the types.  This is not really needed, but it helps debugging.

	* statement.cs: report location.

	* cs-parser.jay: pass location to throw statement.

	* driver.cs: Small bug fix.

	* report.cs: Updated format to be 4-zero filled digits.

2001-12-22  Ravi Pratap  <ravi@ximian.com>

	* expression.cs (CheckIndices): Fix minor bug where the wrong
	variable was being referred to ;-)

	(DoEmit): Do not call EmitStaticInitializers when the 
	underlying type is System.Object.

2001-12-21  Ravi Pratap  <ravi@ximian.com>

	* ecore.cs (EventExpr.Resolve): Implement to correctly set the type
	and do the usual workaround for SRE.

	* class.cs (MyEventBuilder.EventType): New member to get at the type
	of the event, quickly.

	* expression.cs (Binary.ResolveOperator): Handle delegate addition.

	* assign.cs (Assign.DoResolve): Handle the case when the target
	is an EventExpr and perform the necessary checks.

	* ecore.cs (EventExpr.EmitAssign): Implement the IAssignMethod
	interface.

	(SimpleName.MemberStaticCheck): Include check for EventExpr.

	(EventExpr): Set the type in the constructor itself since we 
	are meant to be born fully resolved.

	(EventExpr.Define): Revert code I wrote earlier.
		
	* delegate.cs (NewDelegate.Resolve): Handle the case when the MethodGroup's
	instance expression is null. The instance expression is a This in that case
	or a null, depending on whether it is a static method or not.

	Also flag an error if the reference to a method is ambiguous i.e the MethodGroupExpr
	refers to more than one method.

	* assign.cs (DoResolve): Check whether the event belongs to the same Type container
	and accordingly flag errors.

2001-12-21  Miguel de Icaza  <miguel@ximian.com>

	* statement.cs (Throw.Emit): Add support for re-throwing exceptions.

2001-12-22  Miguel de Icaza  <miguel@ximian.com>

	* location.cs (ToString): Provide useful rutine.

2001-12-21  Miguel de Icaza  <miguel@ximian.com>

	* ecore.cs (Expression.ConvertIntLiteral): Do not return Constant
	objects, return the actual integral boxed.

	* statement.cs (SwitchLabel): define an ILLabel for each
	SwitchLabel. 

	(Switch.CheckSwitch): If the value is a Literal, extract
	the underlying literal.

	Also in the unused hashtable we had, add the SwitchLabel so we can
	quickly look this value up.

	* constant.cs: Implement a bunch of new constants.  Rewrite
	Literal based on this.  Made changes everywhere to adapt to this.

	* expression.cs (Expression.MakeByteBlob): Optimize routine by
	dereferencing array only once, and also copes with enumrations.

	bytes are two bytes wide, not one.

	(Cast): Perform constant conversions.

	* ecore.cs (TryImplicitIntConversion): Return literals instead of
	wrappers to the literals here.

	* expression.cs (DoNumericPromotions): long literals can converted
	to ulong implicity (this is taken care of elsewhere, but I was
	missing this spot).

	* ecore.cs (Expression.Literalize): Make the return type Literal,
	to improve type checking.

	* rootcontext.cs: Lookup for nested classes in our class hierarchy.

2001-12-20  Miguel de Icaza  <miguel@ximian.com>

	* literal.cs: Revert code from ravi that checked the bounds.  The
	bounds are sane by the definition of the type itself. 

	* typemanager.cs: Fix implementation of ImplementsInterface.  We
	need to actually look up in our parent hierarchy for interfaces
	implemented. 

	* const.cs: Use the underlying type for enumerations

	* delegate.cs: Compute the basename for the delegate creation,
	that should fix the delegate test case, and restore the correct
	Type Lookup semantics in rootcontext

	* rootcontext.cs: Revert Ravi's last patch.  The correct way of
	referencing a nested type with the Reflection API is using the "+"
	sign. 

	* cs-parser.jay: Do not require EOF token at the end.

2001-12-20  Ravi Pratap  <ravi@ximian.com>

	* rootcontext.cs (LookupType): Concatenate type names with
	a '.' instead of a '+' The test suite passes again.

	* enum.cs (Enum.DefineEnum): Set RTSpecialName on the 'value__'
	field of the enumeration.

	* expression.cs (MemberAccess.ResolveMemberAccess): Add support for
	the case when the member is an EventExpr.

	* ecore.cs (EventExpr.InstanceExpression): Every event which is not
	static has an associated instance expression.

	* typemanager.cs (RegisterEvent): The usual workaround, now for events.

	(GetAddMethod, GetRemoveMethod): Workarounds, as usual.

	* class.cs (Event.Define): Register event and perform appropriate checks
	for error #111.

 	We define the Add and Remove methods even if the use provides none because
	in that case, we provide default implementations ourselves.

	Define a private field of the type of the event. This is done by the CSC compiler
	and we should be doing it too ;-)

	* typemanager.cs (delegate_combine_delegate_delegate, delegate_remove_delegate_delegate):
	More methods we use in code we generate.

	(multicast_delegate_type, delegate_type): Two separate types since the distinction
	is important.

	(InitCoreTypes): Update accordingly for the above.

	* class.cs (Event.Emit): Generate code for default accessors that we provide

	(EmitDefaultMethod): Do the job in the above.

	* delegate.cs (DefineDelegate): Use TypeManager.multicast_delegate_type in the 
	appropriate place.

2001-12-20  Miguel de Icaza  <miguel@ximian.com>

	* class.cs (Indexer.Define): Fix bug, we were setting both Get/Set
	builders even if we were missing one.

	* interface.cs, class.cs, enum.cs: When calling DefineNestedType
	pass the Basename as our class name instead of the Name.  The
	basename will be correctly composed for us.

	* parameter.cs (Paramters): Now takes a Location argument.

	* decl.cs (DeclSpace.LookupType): Removed convenience function and
	make all the code call directly LookupType in RootContext and take
	this chance to pass the Location information everywhere.

	* Everywhere: pass Location information.

2001-12-19  Miguel de Icaza  <miguel@ximian.com>

	* class.cs (Constructor.Define): Updated way of detecting the
	length of the parameters.

	(TypeContainer.DefineType): Use basename as the type name for
	nested types.

	(TypeContainer.Define): Do not recursively define types here, as
	definition is taken care in order by the RootContext.

	* tree.cs: Keep track of namespaces in a per-file basis.

	* parameter.cs (Parameter.ComputeSignature): Update to use
	DeclSpace. 

	(Parameters.GetSignature): ditto.

	* interface.cs (InterfaceMethod.GetSignature): Take a DeclSpace
	instead of a TypeContainer.

	(Interface.SemanticAnalysis): Use `this' instead of our parent to
	resolve names.  Because we need to be resolve in our context, not
	our parents.

	* driver.cs: Implement response files.

	* class.cs (TypeContainer.DefineType): If we are defined, do not
	redefine ourselves.

	(Event.Emit): Emit the code for add/remove handlers.
	(Event.Define): Save the MethodBuilders for add/remove.

	* typemanager.cs: Use pair here too.

	* cs-parser.jay: Replaced use of DictionaryEntry for Pair because
	DictionaryEntry requires the first argument to be non-null.  

	(enum_declaration): Compute full name for registering the
	enumeration.

	(delegate_declaration): Instead of using
	formal_parameter_list, use opt_formal_parameter_list as the list
	can be empty.

	* cs-tokenizer.cs (PropertyParsing): renamed from `properties'
	(EventParsing): New property that controls whether `add' and
	`remove' are returned as tokens or identifiers (for events);

2001-12-19  Ravi Pratap  <ravi@ximian.com>

	* class.cs (Event.Define): Revamp use of EventBuilder completely. We now
	use MyEventBuilder only and let it wrap the real builder for us.

	(MyEventBuilder): Revamp constructor etc.

	Implement all operations that we perform on EventBuilder in precisely the same
	way here too.

	(FindMembers): Update to use the EventBuilder member.

	(Event.Emit): Update accordingly.

2001-12-18  Ravi Pratap  <ravi@ximian.com>

	* class.cs (MyEventBuilder.Set*): Chain to the underlying builder
	by calling the appropriate methods.

	(GetCustomAttributes): Make stubs as they cannot possibly do anything
	useful.

	(Event.Emit): Use MyEventBuilder everywhere - even to set attributes.

2001-12-17  Ravi Pratap  <ravi@ximian.com>

	* delegate.cs (Delegate.Populate): Check that the return type
	and various parameters types are indeed accessible.

	* class.cs (Constructor.Define): Same here.

	(Field.Define): Ditto.

	(Event.Define): Ditto.

	(Operator.Define): Check that the underlying Method defined itself
	correctly - so it's MethodBuilder should not be null.

	* delegate.cs (DelegateInvocation.DoResolve): Bale out if the type of the Instance
	expression happens to be null.

	* class.cs (MyEventBuilder): Workaround for SRE lameness. Implement various abstract
	members but as of now we don't seem to be able to do anything really useful with it.

	(FindMembers): Handle events separately by returning the MyEventBuilder of the event,
	not the EventBuilder.

2001-12-18  Miguel de Icaza  <miguel@ximian.com>

	* cs-tokenizer.cs: Add support for defines.
	Add support for #if, #elif, #else, #endif

	(eval_var): evaluates a variable.
	(eval): stubbed for evaluating functions.

	* cs-parser.jay: Pass the defines information

	* driver.cs: Add --define command line option.

	* decl.cs: Move MemberCore here.

	Make it the base class for DeclSpace.  This allows us to catch and
	report 108 and 109 for everything now.

	* class.cs (TypeContainer.Define): Extract all the members
	before populating and emit the warning 108 (new keyword required
	to override) instead of having each member implement this.

	(MemberCore.Define): New abstract method, we will be using this in
	the warning reporting engine in Populate.

	(Operator.Define): Adjust to new MemberCore protocol. 

	* const.cs (Const): This does not derive from Expression, it is a
	temporary object we use to create fields, it is a MemberCore. 

	* class.cs (Method.Define): Allow the entry point to be in a
	specific class.

	* driver.cs: Rewrite the argument handler to clean it up a bit.

	* rootcontext.cs: Made it just an auxiliary namespace feature by
	making everything static.

	* driver.cs: Adapt code to use RootContext type name instead of
	instance variable.

	* delegate.cs: Remove RootContext argument.

	* class.cs: (Struct, TypeContainer, Class): Remove RootContext
	argument. 

	* class.cs (Event.Define): The lookup can fail.

	* cs-tokenizer.cs: Begin implementation of pre-procesor. 

	* expression.cs: Resolve the this instance before invoking the code.

2001-12-17  Miguel de Icaza  <miguel@ximian.com>

	* cs-parser.jay: Add a production in element_access that allows
	the thing to become a "type" reference.  This way we can parse
	things like "(string [])" as a type.

	Note that this still does not handle the more complex rules of
	casts. 


	* delegate.cs (Delegate.Populate): Register the delegage constructor builder here. 

	* ecore.cs: (CopyNewMethods): new utility function used to
	assemble the list of methods from running FindMembers.

	(MemberLookup): Rework FindMembers so that 

2001-12-16  Miguel de Icaza  <miguel@ximian.com>

	* class.cs (TypeContainer): Remove Delegates who fail to be
	defined.

	* delegate.cs (Populate): Verify that we dont get null return
	values.   TODO: Check for AsAccessible.

	* cs-parser.jay: Use basename to emit error 574 (destructor should
	have the same name as container class), not the full name.

	* cs-tokenizer.cs (adjust_int): Fit the integer in the best
	possible representation.  

	Also implements integer type suffixes U and L.

2001-12-15  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (ArrayCreation.DoResolve): We need to do the
	argument resolution *always*.

	* decl.cs: Make this hold the namespace.  Hold the root context as
	well.
	(LookupType): Move here.

	* enum.cs, class.cs, interface.cs: Adapt to new hierarchy.

	* location.cs (Row, Name): Fixed the code, it was always returning
	references to the first file.

	* interface.cs: Register properties defined through interfaces.

	* driver.cs: Add support for globbing on the command line

	* class.cs (Field): Make it derive from MemberCore as well.
	(Event): ditto.

2001-12-15  Ravi Pratap  <ravi@ximian.com>

	* class.cs (Event::Define): Check that the type of the event is a delegate
	type else flag error #66.

	Also, re-use TypeContainer.MethodModifiersValid here too as the rules are the
	same.

	* attribute.cs (DefinePInvokeMethod): Handle named arguments and process
	values of EntryPoint, CharSet etc etc.

	Pass in the values to TypeBuilder.DefinePInvokeMethod; determine Type etc neatly.

	* class.cs (FindMembers): If a method is in transit, its MethodBuilder will
	be null and we should ignore this. I am not sure if this is really clean. Apparently,
	there's no way of avoiding hitting this because the call is coming from SimpleName.DoResolve,
	which needs this to do its work.

	* ../errors/cs0066.cs : Add.

2001-12-14  Miguel de Icaza  <miguel@ximian.com>

	* typemanager.cs: (GetPropertyGetter, GetPropertyGetter): New
	helper functions.

	* class.cs: (MethodSignature.MethodSignature): Removed hack that
	clears out the parameters field.
	(MemberSignatureCompare): Cleanup

	(MemberCore): New base class used to share code between MethodCore
	and Property.

	(RegisterRequiredImplementations) BindingFlags.Public requires
	either BindingFlags.Instace or Static.  Use instance here.

	(Property): Refactored code to cope better with the full spec.

	* parameter.cs (GetParameterInfo): Return an empty array instead
	of null on error.

	* class.cs (Property): Abstract or extern properties have no bodies.

	* parameter.cs (GetParameterInfo): return a zero-sized array.

	* class.cs (TypeContainer.MethodModifiersValid): Move all the
	method modifier validation to the typecontainer so we can reuse
	this on properties.

	(MethodCore.ParameterTypes): return an empty sized array of types.

	(Property.Define): Test property modifier validity.

	Add tests for sealed/override too.

	(Method.Emit): abstract or extern methods have no bodies.

2001-12-14  Ravi Pratap  <ravi@ximian.com>

	* class.cs (Method.IsPInvoke): Get rid of it as it is an expensive
	thing.

	(Method::Define, ::Emit): Modify accordingly.

	* expression.cs (Invocation::OverloadResolve): Handle error # 121.

	(ArrayCreation::MakeByteBlob): Handle floats and doubles.

	* makefile: Pass in /unsafe.

2001-12-13  Miguel de Icaza  <miguel@ximian.com>

	* class.cs (MakeKey): Kill routine.

	* class.cs (TypeContainer.Define): Correctly define explicit
	method implementations (they require the full interface name plus
	the method name).

	* typemanager.cs: Deply the PtrHashtable here and stop using the
	lame keys.  Things work so much better.

	This of course broke everyone who depended on `RegisterMethod' to
	do the `test for existance' test.  This has to be done elsewhere.

	* support.cs (PtrHashtable): A hashtable that avoid comparing with
	the object stupid Equals method (because, that like fails all over
	the place).  We still do not use it.

	* class.cs (TypeContainer.SetRequiredInterface,
	TypeContainer.RequireMethods): Killed these two routines and moved
	all the functionality to RegisterRequiredImplementations.

	(TypeContainer.RegisterRequiredImplementations): This routine now
	registers all the implementations required in an array for the
	interfaces and abstract methods.  We use an array of structures
	which can be computed ahead of time to reduce memory usage and we
	also assume that lookups are cheap as most classes will not
	implement too many interfaces.

	We also avoid creating too many MethodSignatures.

	(TypeContainer.IsInterfaceMethod): Update and optionally does not
	clear the "pending" bit if we find that there are problems with
	the declaration.

	(TypeContainer.VerifyPendingMethods): Update to report errors of
	methods that look like implementations but are not.

	(TypeContainer.Define): Add support for explicit interface method
	implementation. 

2001-12-12  Miguel de Icaza  <miguel@ximian.com>

	* typemanager.cs: Keep track of the parameters here instead of
	being a feature of the TypeContainer.

	* class.cs: Drop the registration of parameters here, as
	InterfaceMethods are also interface declarations.

	* delegate.cs: Register methods with the TypeManager not only with
	the TypeContainer.  This code was buggy.

	* interface.cs: Full registation here.

2001-12-11  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs: Remove reducer for binary expressions, it can not
	be done this way.

	* const.cs: Put here the code that used to go into constant.cs

	* constant.cs: Put here the code for constants, this is a new base
	class for Literals.

	* literal.cs: Make Literal derive from Constant.

2001-12-09  Miguel de Icaza  <miguel@ximian.com>

	* statement.cs (Return.Emit): Report error 157 if the user
	attempts to return from a finally block.

	(Return.Emit): Instead of emitting a return, jump to the end of
	the function.

	* codegen.cs (EmitContext): ReturnValue, ReturnLabel: new
	LocalBuilder to store the result of the function.  ReturnLabel is
	the target where we jump.


2001-12-09  Radek Doulik  <rodo@ximian.com>

	* cs-parser.jay: remember alias in current namespace

	* ecore.cs (SimpleName::DoResolve): use aliases for types or
	namespaces

	* class.cs (LookupAlias): lookup alias in my_namespace

	* namespace.cs (UsingAlias): add alias, namespace_or_type pair to
	aliases hashtable
	(LookupAlias): lookup alias in this and if needed in parent
	namespaces

2001-12-08  Miguel de Icaza  <miguel@ximian.com>

	* support.cs: 

	* rootcontext.cs: (ModuleBuilder) Made static, first step into
	making things static.  I need this to avoid passing the
	TypeContainer when calling ParameterType.

	* support.cs (InternalParameters.ParameterType): Remove ugly hack
	that did string manipulation to compute the type and then call
	GetType.  Use Parameter.ParameterType instead.

	* cs-tokenizer.cs: Consume the suffix for floating values.

	* expression.cs (ParameterReference): figure out whether this is a
	reference parameter or not.  Kill an extra variable by computing
	the arg_idx during emission.

	* parameter.cs (Parameters.GetParameterInfo): New overloaded
	function that returns whether a parameter is an out/ref value or not.

	(Parameter.ParameterType): The type of the parameter (base,
	without ref/out applied).

	(Parameter.Resolve): Perform resolution here.
	(Parameter.ExternalType): The full type (with ref/out applied).

	* statement.cs (Using.Emit, Using.EmitExpression): Implement
	support for expressions on the using statement.

2001-12-07  Miguel de Icaza  <miguel@ximian.com>

	* statement.cs (Using.EmitLocalVariableDecls): Split the
	localvariable handling of the using statement.

	(Block.EmitMeta): Keep track of variable count across blocks.  We
	were reusing slots on separate branches of blocks.

	(Try.Emit): Emit the general code block, we were not emitting it. 

	Check the type of the declaration to be an IDisposable or
	something that can be implicity converted to it. 

	Emit conversions if required.

	* ecore.cs (EmptyExpression): New utility class.
	(Expression.ImplicitConversionExists): New utility function.

2001-12-06  Miguel de Icaza  <miguel@ximian.com>

	* statement.cs (Using): Implement.

	* expression.cs (LocalVariableReference): Support read only variables.

	* statement.cs: Remove the explicit emit for the Leave opcode.
	(VariableInfo): Add a readonly field.

2001-12-05  Miguel de Icaza  <miguel@ximian.com>

	* ecore.cs (ConvCast): new class used to encapsulate the various
	explicit integer conversions that works in both checked and
	unchecked contexts.

	(Expression.ConvertNumericExplicit): Use new ConvCast class to
	properly generate the overflow opcodes.

2001-12-04  Miguel de Icaza  <miguel@ximian.com>

	* statement.cs: The correct type for the EmptyExpression is the
	element_type, not the variable type.  Ravi pointed this out.

2001-12-04  Ravi Pratap  <ravi@ximian.com>

	* class.cs (Method::Define): Handle PInvoke methods specially
	by using DefinePInvokeMethod instead of the usual one.

	* attribute.cs (DefinePInvokeMethod): Implement as this is what is called
	above to do the task of extracting information and defining the method.

2001-12-04  Ravi Pratap  <ravi@ximian.com>

	* expression.cs (ArrayCreation::EmitStaticInitializers): Get rid
	of the condition for string type.

	(Emit): Move that here. 

	(ArrayCreation::CheckIndices): Keep string literals in their expression
	form.

	(EmitDynamicInitializers): Handle strings appropriately.

2001-12-04  Miguel de Icaza  <miguel@ximian.com>

	* codegen.cs (EmitContext): Replace multiple variables with a
	single pointer to the current Switch statement.

	* statement.cs (GotoDefault, Switch): Adjust to cleaned up
	EmitContext.

2001-12-03  Miguel de Icaza  <miguel@ximian.com>

	* statement.cs 

	* statement.cs (GotoDefault), cs-parser.jay: Implement `goto
	default'.

	(Foreach.Emit): Foreach on arrays was not setting
	up the loop variables (for break/continue).

	(GotoCase): Semi-implented.

2001-12-03  Ravi Pratap  <ravi@ximian.com>

	* attribute.cs (CheckAttribute): Handle system attributes by using
	Attribute.GetAttributes to examine information we need.

	(GetValidPlaces): Same here.

	* class.cs (Method::Define): Catch invalid use of extern and abstract together.

	* typemanager.cs (dllimport_type): Core type for System.DllImportAttribute.

	* class.cs (Method.IsPinvoke): Used to determine if we are a PInvoke method.

	(Method::Define): Set appropriate flags if we have a DllImport attribute.

	(Method::Emit): Handle the case when we are a PInvoke method.

2001-12-03  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs: Use ResolveWithSimpleName on compound names.

2001-12-02  Ravi Pratap  <ravi@ximian.com>

	* constant.cs (EmitConstant): Make sure we resolve the associated expression
	before trying to reduce it.

	* typemanager.cs (RegisterConstant, LookupConstant): Implement.

	* constant.cs (LookupConstantValue): Implement.

	(EmitConstant): Use the above in emitting the constant.

	* expression.cs (MemberAccess::ResolveMemberAccess): Handle constants
	that are user-defined by doing a LookupConstantValue on them.

	(SimpleName::DoResolve): When we have a FieldExpr, cope with constants
	too, like above.

2001-11-29  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (BaseAccess, BaseIndexer): Also split this out.

	(BaseAccess.DoResolve): Implement.

	(MemberAccess.DoResolve): Split this routine into a
	ResolveMemberAccess routine that can be used independently

2001-11-28  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (Probe, Is, As): Split Probe in two classes Is and
	As that share bits of the implementation.  Is returns a boolean,
	while As returns the Type that is being probed.

2001-12-01  Ravi Pratap  <ravi@ximian.com>

	* enum.cs (LookupEnumValue): Re-write various bits, return an object value
	instead of a Literal - much easier.

	(EnumInTransit): Remove - utterly useless :-)

	(Populate): Re-write bits - remove duplicate code etc. The code is much neater now.

	* expression.cs (MemberLookup): Cope with user-defined enums when they are in transit.

	* enum.cs (LookupEnumValue): Auto-compute next values by going down the dependency
	chain when we have no associated expression.

2001-11-30  Ravi Pratap  <ravi@ximian.com>

	* constant.cs (Define): Use Location while reporting the errror.

	Also emit a warning when 'new' is used and there is no inherited
	member to hide.

	* enum.cs (EnumInTransit): Used to tell if an enum type is in the process of being 
	populated.

	(LookupEnumValue): Implement to lookup an enum member's value and define it
	if necessary.

	(Populate): Re-write accordingly to use the above routine.

2001-11-27  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (This): Fix prototype for DoResolveLValue to
	override the base class DoResolveLValue.

	* cs-parser.cs: Report errors cs574 and cs575 (destructor
	declarations) 

	* ecore.cs (FieldExpr.EmitAssign): Handle value types specially
	(we need to load the address of the field here).  This fixes
	test-22. 

	(FieldExpr.DoResolveLValue): Call the DoResolve
	function to initialize the Instance expression.

	* statement.cs (Foreach.Emit): Fix the bug where we did not invoke
	correctly the GetEnumerator operation on a value type.

	* cs-parser.jay: Add more simple parsing error catches.

	* statement.cs (Switch): Add support for string switches.
	Handle null specially.

	* literal.cs (NullLiteral): Make NullLiteral objects singletons. 

2001-11-28  Ravi Pratap  <ravi@ximian.com>

	* cs-parser.jay (local_constant_declaration): Use declare_local_constant.

	(declare_local_constant): New helper function.

	* statement.cs (AddConstant): Keep a separate record of constants

	(IsConstant): Implement to determine if a variable is a constant.

	(GetConstantExpression): Implement.

	* expression.cs (LocalVariableReference): Handle the case when it is a constant.

	* statement.cs (IsVariableDefined): Re-write.

2001-11-27  Ravi Pratap  <ravi@ximian.com>

	* class.cs (TypeContainer::FindMembers): Look for constants
	in the case when we are looking for MemberTypes.Field

	* expression.cs (MemberAccess::DoResolve): Check that in the
	case we are a FieldExpr and a Literal, we are not being accessed
	by an instance reference.

	* cs-parser.jay (local_constant_declaration): Implement.

	(declaration_statement): Implement for constant declarations.

2001-11-26  Miguel de Icaza  <miguel@ximian.com>

	* statement.cs (Switch): Catch double defaults.

	(Switch): More work on the switch() statement
	implementation.  It works for integral values now, need to finish
	string support.


2001-11-24  Miguel de Icaza  <miguel@ximian.com>

	* ecore.cs (Expression.ConvertIntLiteral): New function to convert
	integer literals into other integer literals.  To be used by
	switch. 

2001-11-24  Ravi Pratap  <ravi@ximian.com>

	* expression.cs (ArrayCreation): Get rid of ArrayExprs : we save
	some memory.

	(EmitDynamicInitializers): Cope with the above since we extract data
	directly from ArrayData now.

	(ExpectInitializers): Keep track of whether initializers are mandatory
	or not.

	(Bounds): Make it a hashtable to prevent the same dimension being 
	recorded for every element in that dimension.

	(EmitDynamicInitializers): Fix bug which prevented the Set array method
	from being found.

	Also fix bug which was causing the indices to be emitted in the reverse
	order.

2001-11-24  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (ArrayCreation): Implement the bits that Ravi left
	unfinished.  They do not work, because the underlying code is
	sloppy.

2001-11-22  Miguel de Icaza  <miguel@ximian.com>

	* cs-parser.jay: Remove bogus fixme.

	* statement.cs (Switch, SwitchSection, SwithLabel): Started work
	on Switch statement.

2001-11-23  Ravi Pratap  <ravi@ximian.com>

	* typemanager.cs (IsDelegateType, IsEnumType): Fix logic to determine
	the same. 

	* expression.cs (ArrayCreation::CheckIndices): Get rid of the require_constant
	parameter. Apparently, any expression is allowed. 

	(ValidateInitializers): Update accordingly.

	(CheckIndices): Fix some tricky bugs thanks to recursion.

	* delegate.cs (NewDelegate::DoResolve): Re-write large portions as 
	I was being completely brain-dead.

	(VerifyMethod, VerifyApplicability, VerifyDelegate): Make static
	and re-write acordingly.

	(DelegateInvocation): Re-write accordingly.

	* expression.cs (ArrayCreation::Emit): Handle string initialization separately.

	(MakeByteBlob): Handle types more correctly.

	* expression.cs (ArrayCreation:Emit): Write preliminary code to do
	initialization from expressions but it is incomplete because I am a complete
	Dodo :-|

2001-11-22  Miguel de Icaza  <miguel@ximian.com>

	* statement.cs (If.Emit): Fix a bug that generated incorrect code
	on If.  Basically, we have to return `true' (ie, we do return to
	our caller) only if both branches of the if return.

	* expression.cs (Binary.Emit): LogicalOr and LogicalAnd are
	short-circuit operators, handle them as short circuit operators. 

	(Cast.DoResolve): Resolve type.
	(Cast.Cast): Take an expression as the target type.

	* cs-parser.jay (cast_expression): Remove old hack that only
	allowed a limited set of types to be handled.  Now we take a
	unary_expression and we resolve to a type during semantic
	analysis.

	Use the grammar productions from Rhys to handle casts (this is
	not complete like Rhys syntax yet, we fail to handle that corner
	case that C# has regarding (-x), but we will get there.

2001-11-22  Ravi Pratap  <ravi@ximian.com>

	* class.cs (EmitFieldInitializer): Take care of the case when we have a
	field which is an array type.

	* cs-parser.jay (declare_local_variables): Support array initialization too.

	* typemanager.cs (MakeKey): Implement.

	(everywhere): Use the above appropriately.

	* cs-parser.jay (for_statement): Update for array initialization while
	declaring variables.

	* ecore.cs : The error message was correct, it's the variable's names that
	were misleading ;-) Make the code more readable.

	(MemberAccess::DoResolve): Fix the code which handles Enum literals to set
	the correct type etc.

	(ConvertExplicit): Handle Enum types by examining the underlying type.

2001-11-21  Ravi Pratap  <ravi@ximian.com>

	* parameter.cs (GetCallingConvention): Always return
	CallingConventions.Standard for now.

2001-11-22  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (Binary.ResolveOperator): Update the values of `l'
	and `r' after calling DoNumericPromotions.

	* ecore.cs: Fix error message (the types were in the wrong order).

	* statement.cs (Foreach.ProbeCollectionType): Need to pass
	BindingFlags.Instance as well 

	* ecore.cs (Expression.TryImplicitIntConversion): Wrap the result
	implicit int literal conversion in an empty cast so that we
	propagate the right type upstream.

	(UnboxCast): new class used to unbox value types.
	(Expression.ConvertExplicit): Add explicit type conversions done
	by unboxing.

	(Expression.ImplicitNumericConversion): Oops, forgot to test for
	the target type before applying the implicit LongLiterals to ULong
	literal cast.

2001-11-21  Miguel de Icaza  <miguel@ximian.com>

	* cs-parser.jay (for_statement): Reworked the way For works: now
	we declare manually any variables that are introduced in
	for_initializer to solve the problem of having out-of-band code
	emition (that is what got for broken).

	(declaration_statement): Perform the actual variable declaration
	that used to be done in local_variable_declaration here.

	(local_variable_declaration): Do not declare anything, just pass
	the information on a DictionaryEntry

2001-11-20  Ravi Pratap  <ravi@ximian.com>

	* expression.cs (ArrayCreation::CheckIndices): The story continues :-) Complete
	re-write of the logic to now make it recursive.

	(UpdateIndices): Re-write accordingly.

	Store element data in a separate ArrayData list in the above methods.

	(MakeByteBlob): Implement to dump the array data into a byte array.

2001-11-19  Ravi Pratap  <ravi@ximian.com>

	* expression.cs (ArrayCreation): Factor out some code from ValidateInitializers
	into CheckIndices.

	* constant.cs (Define): Implement.

	(EmitConstant): Re-write fully.

	Pass in location info.

	* class.cs (Populate, Emit): Call Constant::Define and Constant::EmitConstant
	respectively.

	* cs-parser.jay (constant_declarator): Use VariableDeclaration instead of
	DictionaryEntry since we need location info too.

	(constant_declaration): Update accordingly.

	* expression.cs (ArrayCreation): Make ValidateInitializers simpler by factoring
	code into another method : UpdateIndices.

2001-11-18  Ravi Pratap  <ravi@ximian.com>

	* expression.cs (ArrayCreation::ValidateInitializers): Update to perform
	some type checking etc.

2001-11-17  Ravi Pratap  <ravi@ximian.com>

	* expression.cs (ArrayCreation::ValidateInitializers): Implement
	bits to provide dimension info if the user skips doing that.

	Update second constructor to store the rank correctly.

2001-11-16  Ravi Pratap  <ravi@ximian.com>

	* expression.cs (ArrayCreation::ValidateInitializers): Poke around
	and try to implement.

	* ../errors/cs0150.cs : Add.

	* ../errors/cs0178.cs : Add.

2001-11-16  Miguel de Icaza  <miguel@ximian.com>

	* statement.cs: Implement foreach on multi-dimensional arrays. 

	* parameter.cs (Parameters.GetParameterByName): Also lookup the
	name of the params argument.

	* expression.cs: Use EmitStoreOpcode to get the right opcode while
	initializing the array.

	(ArrayAccess.EmitStoreOpcode): move the opcode generation here, so
	we can use this elsewhere.

	* statement.cs: Finish implementation of foreach for single
	dimension arrays.

	* cs-parser.jay: Use an out-of-band stack to pass information
	around, I wonder why I need this.

	foreach_block: Make the new foreach_block the current_block.

	* parameter.cs (Parameters.GetEmptyReadOnlyParameters): New
	function used to return a static Parameters structure.  Used for
	empty parameters, as those are created very frequently.

	* cs-parser.jay, class.cs: Use GetEmptyReadOnlyParameters

2001-11-15  Ravi Pratap  <ravi@ximian.com>

	* interface.cs : Default modifier is private, not public. The
	make verify test passes again.

2001-11-15  Ravi Pratap  <ravi@ximian.com>

	* support.cs (ReflectionParameters): Fix logic to determine
	whether the last parameter is a params one. Test 9 passes again.

	* delegate.cs (Populate): Register the builders we define with
	RegisterParameterForBuilder. Test 19 passes again.

	* cs-parser.jay (property_declaration): Reference $6 instead
	of $$ to get at the location.

	(indexer_declaration): Similar stuff.

	(attribute): Ditto.

	* class.cs (Property): Register parameters for the Get and Set methods
	if they exist. Test 23 passes again.

	* expression.cs (ArrayCreation::Emit): Pass null for the method in the
	call to EmitArguments as we are sure there aren't any params arguments. 
	Test 32 passes again.

	* suppor.cs (ParameterDesc, ParameterModifier): Fix trivial bug causing
	IndexOutOfRangeException. 

	* class.cs (Property::Define): Register property using TypeManager.RegisterProperty
	Test 33 now passes again.

2001-11-15  Miguel de Icaza  <miguel@ximian.com>

	* cs-parser.jay: Kill horrendous hack ($??? = lexer.Location) that
	broke a bunch of things.  Will have to come up with a better way
	of tracking locations.

	* statement.cs: Implemented foreach for single dimension arrays.

2001-11-09  Miguel de Icaza  <miguel@ximian.com>

	* enum.cs (Enum.Emit): Delay the lookup of loc until we run into
	an error.  This removes the lookup from the critical path.

	* cs-parser.jay: Removed use of temporary_loc, which is completely
	broken. 

2001-11-14  Miguel de Icaza  <miguel@ximian.com>

	* support.cs (ReflectionParameters.ParameterModifier): Report
	whether the argument is a PARAMS argument or not.

	* class.cs: Set the attribute `ParamArrayAttribute' on the
	parameter argument.

	* typemanager.cs: Define param_array_type (ParamArrayAttribute)
	and cons_param_array_attribute (ConstructorInfo for
	ParamArrayAttribute)., 

	* codegen.cs: Emit the return using the `Return' statement, that
	way we can report the error correctly for missing return values. 

	* class.cs (Method.Emit): Clean up.

	* expression.cs (Argument.Resolve): Take another argument: the
	location where this argument is used.  Notice that this is not
	part of the "Argument" class as to reduce the size of the
	structure (we know the approximate location anyways).

	Test if the argument is a variable-reference, if not, then
	complain with a 206.

	(Argument.Emit): Emit addresses of variables.

	(Argument.FullDesc): Simplify.

	(Invocation.DoResolve): Update for Argument.Resolve.

	(ElementAccess.DoResolve): ditto.

	* delegate.cs (DelegateInvocation.Emit): Invocation of Invoke
	method should be virtual, as this method is always virtual.

	(NewDelegate.DoResolve): Update for Argument.Resolve.

	* class.cs (ConstructorInitializer.DoResolve): ditto.

	* attribute.cs (Attribute.Resolve): ditto.

2001-11-13  Miguel de Icaza  <miguel@ximian.com>

	* statement.cs (Foreach.Emit): Use EmitAssign instead of Store.

	* expression.cs (ParameterReference): Drop IStackStorage and implement
	IAssignMethod instead. 

	(LocalVariableReference): ditto.

	* ecore.cs (FieldExpr): Drop IStackStorage and implement
	IAssignMethod instead. 

2001-11-13  Miguel de Icaza <miguel@ximian.com>

	* parameter.cs, expression.cs, class.cs, ecore.cs: Made all
	enumerations that are used in heavily used structures derive from
	byte in a laughable and pathetic attempt to reduce memory usage.
	This is the kind of pre-optimzations that you should not do at
	home without adult supervision.

	* expression.cs (UnaryMutator): New class, used to handle ++ and
	-- separatedly from the other unary operators.  Cleans up the
	code, and kills the ExpressionStatement dependency in Unary.

	(Unary): Removed `method' and `Arguments' from this class, making
	it smaller, and moving it all to SimpleCall, so I can reuse this
	code in other locations and avoid creating a lot of transient data
	strucutres when not required.

	* cs-parser.jay: Adjust for new changes.

2001-11-11  Miguel de Icaza  <miguel@ximian.com>

	* enum.cs (Enum.Populate): If there is a failure during
	definition, return

	* cs-parser.jay (opt_enum_base): we used to catch type errors
	here, but this is really incorrect.  The type error should be
	catched during semantic analysis.

2001-12-11  Ravi Pratap  <ravi@ximian.com>

	* cs-parser.jay (operator_declarator, conversion_operator_declarator): Set
	current_local_parameters as expected since I, in my stupidity, had forgotten
	to do this :-)

	* attribute.cs (GetValidPlaces): Fix stupid bug.

	* class.cs (Method::Emit): Perform check on applicability of attributes.

	(Constructor::Emit): Ditto.

	(Field::Emit): Ditto.

	(Field.Location): Store location information.

	(Property, Event, Indexer, Operator): Ditto.

	* cs-parser.jay (field_declaration): Pass in location for each field.

	* ../errors/cs0592.cs : Add.

2001-11-12  Ravi Pratap  <ravi@ximian.com>

	* typemanager.cs (attribute_usage_type): New static member for System.AttributeUsage.

	(InitCoreTypes): Update accordingly.

	(RegisterAttrType, LookupAttr): Implement.

	* attribute.cs (Attribute.Targets, AllowMultiple, Inherited): New fields to hold
	info about the same.

	(Resolve): Update to populate the above as necessary.

	(Error592): Helper.

	(GetValidPlaces): Helper to the above.

	(CheckAttribute): Implement to perform validity of attributes on declarative elements.

	* class.cs (TypeContainer::Emit): Update attribute emission code to perform checking etc.

2001-11-12  Ravi Pratap  <ravi@ximian.com>

	* attribute.cs (Attribute::Resolve): Expand to handle named arguments too.

	* ../errors/cs0617.cs : Add.

2001-11-11  Ravi Pratap  <ravi@ximian.com>

	* enum.cs (Emit): Rename to Populate to be more consistent with what
	we expect it to do and when exactly it is called.

	* class.cs, rootcontext.cs : Update accordingly.

	* typemanager.cs (RegisterField, GetValue): Workarounds for the fact that
	FieldInfo.GetValue does not work on dynamic types ! S.R.E lameness strikes again !

	* enum.cs (Populate): Register fields with TypeManager.RegisterField.

	* expression.cs (MemberAccess.DoResolve): Adjust code to obtain the value
	of a fieldinfo using the above, when dealing with a FieldBuilder.

2001-11-10  Ravi Pratap  <ravi@ximian.com>

	* ../errors/cs0031.cs : Add.

	* ../errors/cs1008.cs : Add.

	* ../errrors/cs0543.cs : Add.

	* enum.cs (DefineEnum): Check the underlying type and report an error if not a valid
	enum type.

	(FindMembers): Implement.

	* typemanager.cs (FindMembers): Re-write to call the appropriate methods for
	enums and delegates too.

	(enum_types): Rename to builder_to_enum.

	(delegate_types): Rename to builder_to_delegate.

	* delegate.cs (FindMembers): Implement.

2001-11-09  Ravi Pratap  <ravi@ximian.com>

	* typemanager.cs (IsEnumType): Implement.

	* enum.cs (Emit): Re-write parts to account for the underlying type
	better and perform checking etc.

	(GetNextDefaultValue): Helper to ensure we don't overshoot max value
	of the underlying type.

	* literal.cs (GetValue methods everywhere): Perform bounds checking and return
	value

	* enum.cs (error31): Helper to report error #31.

	* cs-parser.jay (enum_declaration): Store location of each member too.

	* enum.cs (member_to_location): New hashtable. 

	(AddEnumMember): Update location hashtable.

	(Emit): Use the location of each member while reporting errors.

2001-11-09  Miguel de Icaza  <miguel@ximian.com>

	* cs-parser.jay: A for_initializer if is a
	local_variable_declaration really ammount to have an implicit
	block with the variable declaration and no initializer for for.

	* statement.cs (For.Emit): Cope with null initializers.

	This fixes the infinite loop on for initializers.

2001-11-08  Miguel de Icaza  <miguel@ximian.com>

	* enum.cs: More cleanup.

	* ecore.cs: Remove dead code.

	* class.cs (Property.Emit): More simplification.
	(Event.Emit): ditto.

	Reworked to have less levels of indentation.

2001-11-08  Ravi Pratap  <ravi@ximian.com>

	* class.cs (Property): Emit attributes.

	(Field): Ditto.

	(Event): Ditto.

	(Indexer): Ditto.

	(Operator): Ditto.

	* enum.cs (Emit): Ditto.

	* rootcontext.cs (ResolveTree, EmitCode, CloseTypes): Do the same for
	Enums too.

	* class.cs (Field, Event, etc.): Move attribute generation into the
	Emit method everywhere.

	* enum.cs (Enum): Revamp to use the same definition semantics as delegates so
	we have a DefineEnum, CloseEnum etc. The previous way of doing things was not right
	as we had no way of defining nested enums !

	* rootcontext.cs : Adjust code accordingly.

	* typemanager.cs (AddEnumType): To keep track of enum types separately.

2001-11-07  Ravi Pratap  <ravi@ximian.com>

	* expression.cs (EvalConstantExpression): Move into ecore.cs

	* enum.cs (Enum): Rename some members and make them public and readonly
	according to our convention.

	* modifiers.cs (EnumAttr): Implement as we need to set only visibility flags,
	nothing else.

	* enum.cs (Enum::Define): Use the above instead of TypeAttr.

	(Enum::Emit): Write a simple version for now which doesn't try to compute
	expressions. I shall modify this to be more robust in just a while.

	* class.cs (TypeContainer::Emit): Make sure we include Enums too.

	(TypeContainer::CloseType): Create the Enum types too.

	* attribute.cs (Resolve): Use the new Reduce method instead of EvalConstantExpression.

	* expression.cs (EvalConstantExpression): Get rid of completely.

	* enum.cs (Enum::Emit): Use the new expression reducer. Implement assigning
	user-defined values and other cases.

	(IsValidEnumLiteral): Helper function.

	* expression.cs (ExprClassfromMemberInfo): Modify to not do any literalizing 
	out there in the case we had a literal FieldExpr.

	(MemberAccess:DoResolve): Do the literalizing of the FieldExpr here.

	(Literalize): Revamp a bit to take two arguments.

	(EnumLiteral): New class which derives from Literal to wrap enum literals.

2001-11-06  Ravi Pratap  <ravi@ximian.com>

	* cs-parser.jay (compilation_unit): Remove extra opt_attributes for now.

	* expression.cs (ArrayCreation::ValidateInitializers): Implement.

	(Resolve): Use the above to ensure we have proper initializers.

2001-11-05  Ravi Pratap  <ravi@ximian.com>

	* expression.cs (Expression::EvalConstantExpression): New method to 
	evaluate constant expressions.

	* attribute.cs (Attribute::Resolve): Modify bits to use the above function.

2001-11-07  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (ArrayCreation.Emit): Some bits to initialize data
	in an array.

	(Binary.ResolveOperator): Handle operator != (object a, object b)
	and operator == (object a, object b);

	(Binary.DoNumericPromotions): Indicate whether the numeric
	promotion was possible.

	(ArrayAccess.DoResolve, ArrayAccess.Emit, ArrayAccess.EmitAssign):
	Implement.  

	Made the ArrayAccess implement interface IAssignMethod instead of
	IStackStore as the order in which arguments are passed reflects
	this.

	* assign.cs: Instead of using expr.ExprClass to select the way of
	assinging, probe for the IStackStore/IAssignMethod interfaces.

	* typemanager.cs: Load InitializeArray definition.

	* rootcontext.cs (RootContext.MakeStaticData): Used to define
	static data that can be used to initialize arrays. 

2001-11-05  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs: Handle operator== and operator!= for booleans.

	(Conditioal.Reduce): Implement reducer for the ?: operator.

	(Conditional.Resolve): Implement dead code elimination.

	(Binary.Resolve): Catch string literals and return a new
	concatenated string.

	(Unary.Reduce): Implement reduction of unary expressions.

	* ecore.cs: Split out the expression core handling here.

	(Expression.Reduce): New method used to perform constant folding
	and CSE.  This is needed to support constant-expressions. 

	* statement.cs (Statement.EmitBoolExpression): Pass true and false
	targets, and optimize for !x.

2001-11-04  Ravi Pratap  <ravi@ximian.com>

	* attribute.cs (Attribute::Resolve): Implement guts. Note that resolution
	of an attribute gives us a CustomAttributeBuilder which we use accordingly to
	set custom atttributes.

	* literal.cs (Literal::GetValue): New abstract method to return the actual
	value of the literal, cast as an object.

	(*Literal): Implement GetValue method.

	* cs-parser.jay (positional_argument_list, named_argument_list): Add not just plain
	expressions to the arraylist but objects of type Argument.

	* class.cs (TypeContainer::Emit): Emit our attributes too.

	(Method::Emit, Constructor::Emit): Ditto.

	* cs-parser.jay (constructor_declaration): Set attributes too, which we seemed
	to be ignoring earlier.

2001-11-03  Ravi Pratap  <ravi@ximian.com>

	* attribute.cs (AttributeSection::Define): Implement to do the business
	of constructing a CustomAttributeBuilder.

	(Attribute): New trivial class. Increases readability of code.	

	* cs-parser.jay : Update accordingly.

	(positional_argument_list, named_argument_list, named_argument): New rules

	(attribute_arguments): Use the above so that we are more correct.

2001-11-02  Ravi Pratap  <ravi@ximian.com>

	* expression.cs (Invocation::IsParamsMethodApplicable): Implement
	to perform all checks for a method with a params parameter.

	(Invocation::OverloadResolve): Update to use the above method and therefore
	cope correctly with params method invocations.

	* support.cs (InternalParameters::ParameterDesc): Provide a desc for 
	params too.

	* class.cs (ConstructorInitializer::Resolve): Make sure we look for Non-public
	constructors in our parent too because we can't afford to miss out on 
	protected ones ;-)

	* attribute.cs (AttributeSection): New name for the class Attribute

	Other trivial changes to improve readability.

	* cs-parser.jay (opt_attributes, attribute_section etc.): Modify to
	use the new class names.

2001-11-01  Ravi Pratap  <ravi@ximian.com>

	* class.cs (Method::Define): Complete definition for params types too

	(Indexer::Define): Ditto.

	* support.cs (InternalParameters::ParameterType, ParameterDesc, ParameterModifier):
	Cope everywhere with a request for info about the array parameter.

2001-11-01  Ravi Pratap  <ravi@ximian.com>

	* tree.cs (RecordNamespace): Fix up to check for the correct key.

	* cs-parser.jay (GetQualifiedIdentifier): New Helper method used in 
	local_variable_type to extract the string corresponding to the type.

	(local_variable_type): Fixup the action to use the new helper method.

	* codegen.cs : Get rid of RefOrOutParameter, it's not the right way to 
	go.

	* expression.cs : Clean out code which uses the above.

2001-10-31  Ravi Pratap  <ravi@ximian.com>

	* typemanager.cs (RegisterMethod): Check if we already have an existing key
	and bale out if necessary by returning a false.

	(RegisterProperty): Ditto.

	* class.cs (everywhere): Check the return value from TypeManager.RegisterMethod
	and print out appropriate error messages.

	* interface.cs (everywhere): Ditto.

	* cs-parser.jay (property_declaration, event_declaration, indexer_declaration): Pass
	location to constructor.

	* class.cs (Property, Event, Indexer): Update accordingly.

	* ../errors/cs111.cs : Added.

	* expression.cs (Invocation::IsApplicable): New static method to determine applicability
	of a method, as laid down by the spec.

	(Invocation::OverloadResolve): Use the above method.

2001-10-31  Ravi Pratap  <ravi@ximian.com>

	* support.cs (InternalParameters): Get rid of crap taking in duplicate info. We
	now take a TypeContainer and a Parameters object.

	(ParameterData): Modify return type of ParameterModifier method to be 
	Parameter.Modifier and not a string.

	(ReflectionParameters, InternalParameters): Update accordingly.

	* expression.cs (Argument::GetParameterModifier): Same here.

	* support.cs (InternalParameters::ParameterType): Find a better way of determining
	if we are a ref/out parameter. Actually, the type shouldn't be holding the '&'
	symbol in it at all so maybe this is only for now.

2001-10-30  Ravi Pratap  <ravi@ximian.com>

	* support.cs (InternalParameters): Constructor now takes an extra argument 
	which is the actual Parameters class.

	(ParameterDesc): Update to provide info on ref/out modifiers.

	* class.cs (everywhere): Update call to InternalParameters to pass in
	the second argument too.

	* support.cs (ParameterData): Add ParameterModifier, which is a method 
	to return the modifier info [ref/out etc]

	(InternalParameters, ReflectionParameters): Implement the above.

	* expression.cs (Argument::ParameterModifier): Similar function to return
	info about the argument's modifiers.

	(Invocation::OverloadResolve): Update to take into account matching modifiers 
	too.

	* class.cs (Indexer::Define): Actually define a Parameter object and put it onto
	a new SetFormalParameters object which we pass to InternalParameters.

2001-10-30  Ravi Pratap  <ravi@ximian.com>

	* expression.cs (NewArray): Merge into the ArrayCreation class.

2001-10-29  Ravi Pratap  <ravi@ximian.com>

	* expression.cs (NewArray): Merge classes NewBuiltinArray and 
	NewUserdefinedArray into one as there wasn't much of a use in having
	two separate ones.

	* expression.cs (Argument): Change field's name to ArgType from Type.

	(Type): New readonly property which returns the proper type, taking into 
	account ref/out modifiers.

	(everywhere): Adjust code accordingly for the above.

	* codegen.cs (EmitContext.RefOrOutParameter): New field to determine
	whether we are emitting for a ref or out parameter.

	* expression.cs (Argument::Emit): Use the above field to set the state.

	(LocalVariableReference::Emit): Update to honour the flag and emit the
	right stuff.

	* parameter.cs (Attributes): Set the correct flags for ref parameters.

	* expression.cs (Argument::FullDesc): New function to provide a full desc.

	* support.cs (ParameterData): Add method ParameterDesc to the interface.

	(ReflectionParameters, InternalParameters): Implement the above method.

	* expression.cs (Invocation::OverloadResolve): Use the new desc methods in
	reporting errors.

	(Invocation::FullMethodDesc): Ditto. 

2001-10-29  Miguel de Icaza  <miguel@ximian.com>

	* cs-parser.jay: Add extra production for the second form of array
	creation. 

	* expression.cs (ArrayCreation): Update to reflect the above
	change. 

	* Small changes to prepare for Array initialization.

2001-10-28  Miguel de Icaza  <miguel@ximian.com>

	* typemanager.cs (ImplementsInterface): interface might be null;
	Deal with this problem;

	Also, we do store negative hits on the cache (null values), so use
	this instead of calling t.GetInterfaces on the type everytime.

2001-10-28  Ravi Pratap  <ravi@ximian.com>

	* typemanager.cs (IsBuiltinType): New method to help determine the same.

	* expression.cs (New::DoResolve): Get rid of array creation code and instead
	split functionality out into different classes.

	(New::FormArrayType): Move into NewBuiltinArray.

	(Invocation::EmitArguments): Get rid of the MethodBase argument. Appears
	quite useless.

	(NewBuiltinArray): New class to handle creation of built-in arrays.

	(NewBuiltinArray::DoResolve): Implement guts of array creation. Also take into
	account creation of one-dimensional arrays.

	(::Emit): Implement to use Newarr and Newobj opcodes accordingly.

	(NewUserdefinedArray::DoResolve): Implement.

	* cs-parser.jay (local_variable_type): Fix up to add the rank to the variable too.

	* typemanager.cs (AddModule): Used to add a ModuleBuilder to the list of modules
	we maintain inside the TypeManager. This is necessary to perform lookups on the
	module builder.

	(LookupType): Update to perform GetType on the module builders too.	

	* driver.cs (Driver): Add the ModuleBuilder to the list maintained by the TypeManager.

	* exprssion.cs (NewUserdefinedArray::Emit): Implement.

2001-10-23  Ravi Pratap  <ravi@ximian.com>

	* expression.cs (New::DoResolve): Implement guts of array creation.

	(New::FormLookupType): Rename to FormArrayType and modify ever so slightly.

2001-10-27  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs: Fix bug I introduced lsat night that broke
	Delegates. 

	(Expression.Resolve): Report a 246 error (can not resolve name)
	if we find a SimpleName in the stream.

	(Expression.ResolveLValue): Ditto.

	(Expression.ResolveWithSimpleName): This function is a variant of
	ResolveName, this one allows SimpleNames to be returned without a
	warning.  The only consumer of SimpleNames is MemberAccess

2001-10-26  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (Invocation::DoResolve): Catch SimpleNames that
	might arrive here.  I have my doubts that this is correct.

	* statement.cs (Lock): Implement lock statement.

	* cs-parser.jay: Small fixes to support `lock' and `using'

	* cs-tokenizer.cs: Remove extra space

	* driver.cs: New flag --checked, allows to turn on integer math
	checking. 

	* typemanger.cs: Load methodinfos for Threading.Monitor.Enter and
	Threading.Monitor.Exit 

2001-10-23  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (IndexerAccess::DoResolveLValue): Set the
	Expression Class to be IndexerAccess.

	Notice that Indexer::DoResolve sets the eclass to Value.

2001-10-22  Miguel de Icaza  <miguel@ximian.com>

	* class.cs (TypeContainer::Emit): Emit code for indexers.

	* assign.cs (IAssignMethod): New interface implemented by Indexers
	and Properties for handling assignment.

	(Assign::Emit): Simplify and reuse code. 

	* expression.cs (IndexerAccess, PropertyExpr): Implement
	IAssignMethod, clean up old code. 

2001-10-22  Ravi Pratap  <ravi@ximian.com>

	* typemanager.cs (ImplementsInterface): New method to determine if a type
	implements a given interface. Provides a nice cache too.

	* expression.cs (ImplicitReferenceConversion): Update checks to use the above
	method.

	(ConvertReferenceExplicit): Ditto.

	* delegate.cs (Delegate::Populate): Update to define the parameters on the 
	various methods, with correct names etc.

	* class.cs (Operator::OpType): New members Operator.UnaryPlus and 
	Operator.UnaryNegation.

	* cs-parser.jay (operator_declarator): Be a little clever in the case where
	we have a unary plus or minus operator.

	* expression.cs (Unary): Rename memebers of Operator enum to UnaryPlus and 
	UnaryMinus.

	* everywhere : update accordingly.

	* everywhere : Change Negate and BitComplement to LogicalNot and OnesComplement
	respectively.

	* class.cs (Method::Define): For the case where we are implementing a method
	inherited from an interface, we need to set the MethodAttributes.Final flag too. 
	Also set MethodAttributes.NewSlot and MethodAttributes.HideBySig.

2001-10-21  Ravi Pratap  <ravi@ximian.com>

	* interface.cs (FindMembers): Implement to work around S.R.E
	lameness.

	* typemanager.cs (IsInterfaceType): Implement.

	(FindMembers): Update to handle interface types too.

	* expression.cs (ImplicitReferenceConversion): Re-write bits which
	use IsAssignableFrom as that is not correct - it doesn't work.

	* delegate.cs (DelegateInvocation): Derive from ExpressionStatement
	and accordingly override EmitStatement.

	* expression.cs (ConvertReferenceExplicit): Re-write similary, this time
	using the correct logic :-)

2001-10-19  Ravi Pratap  <ravi@ximian.com>

	* ../errors/cs-11.cs : Add to demonstrate error -11 

2001-10-17  Miguel de Icaza  <miguel@ximian.com>

	* assign.cs (Assign::Resolve): Resolve right hand side first, and
	then pass this as a hint to ResolveLValue.

	* expression.cs (FieldExpr): Add Location information

	(FieldExpr::LValueResolve): Report assignment to readonly
	variable. 

	(Expression::ExprClassFromMemberInfo): Pass location information.

	(Expression::ResolveLValue): Add new method that resolves an
	LValue. 

	(Expression::DoResolveLValue): Default invocation calls
	DoResolve. 

	(Indexers): New class used to keep track of indexers in a given
	Type. 

	(IStackStore): Renamed from LValue, as it did not really describe
	what this did.  Also ResolveLValue is gone from this interface and
	now is part of Expression.

	(ElementAccess): Depending on the element access type

	* typemanager.cs: Add `indexer_name_type' as a Core type
	(System.Runtime.CompilerServices.IndexerNameAttribute)

	* statement.cs (Goto): Take a location.

2001-10-18  Ravi Pratap  <ravi@ximian.com>

	* delegate.cs (Delegate::VerifyDelegate): New method to verify
	if two delegates are compatible.

	(NewDelegate::DoResolve): Update to take care of the case when
	we instantiate a delegate from another delegate.

	* typemanager.cs (FindMembers): Don't even try to look up members
	of Delegate types for now.

2001-10-18  Ravi Pratap  <ravi@ximian.com>

	* delegate.cs (NewDelegate): New class to take care of delegate
	instantiation.

	* expression.cs (New): Split the delegate related code out into 
	the NewDelegate class.

	* delegate.cs (DelegateInvocation): New class to handle delegate 
	invocation.

	* expression.cs (Invocation): Split out delegate related code into
	the DelegateInvocation class.

2001-10-17  Ravi Pratap  <ravi@ximian.com>

	* expression.cs (New::DoResolve): Implement delegate creation fully
	and according to the spec.

	(New::DoEmit): Update to handle delegates differently.

	(Invocation::FullMethodDesc): Fix major stupid bug thanks to me
	because of which we were printing out arguments in reverse order !

	* delegate.cs (VerifyMethod): Implement to check if the given method
	matches the delegate.

	(FullDelegateDesc): Implement.

	(VerifyApplicability): Implement.

	* expression.cs (Invocation::DoResolve): Update to accordingly handle
	delegate invocations too.

	(Invocation::Emit): Ditto.

	* ../errors/cs1593.cs : Added.

	* ../errors/cs1594.cs : Added.

	* delegate.cs (InstanceExpression, TargetMethod): New properties.

2001-10-16  Ravi Pratap  <ravi@ximian.com>

	* typemanager.cs (intptr_type): Core type for System.IntPtr

	(InitCoreTypes): Update for the same.

	(iasyncresult_type, asynccallback_type): Ditto.

	* delegate.cs (Populate): Fix to use System.Intptr as it is indeed
	correct.

	* typemanager.cs (AddDelegateType): Store a pointer to the Delegate class
	too.

	* delegate.cs (ConstructorBuilder, InvokeBuilder, ...): New members to hold
	the builders for the 4 members of a delegate type :-)

	(Populate): Define the BeginInvoke and EndInvoke methods on the delegate
	type.

	* expression.cs (New::DoResolve): Implement guts for delegate creation.

	* ../errors/errors.txt : Update for an error (-11) which only we catch :-)

2001-10-15  Miguel de Icaza  <miguel@ximian.com>

	* statement.cs (Break::Emit): Implement.   
	(Continue::Emit): Implement.

	(For::Emit): Track old being/end loops;  Set Begin loop, ack end loop
	(While::Emit): Track old being/end loops;  Set Begin loop, ack end loop
	(Do::Emit): Track old being/end loops;  Set Begin loop, ack end loop
	(Foreach::Emit): Track old being/end loops;  Set Begin loop, ack
	end loop

	* codegen.cs (EmitContext::LoopEnd, EmitContext::LoopBegin): New
	properties that track the label for the current loop (begin of the
	loop and end of the loop).

2001-10-15  Ravi Pratap  <ravi@ximian.com>

	* delegate.cs (Emit): Get rid of it as there doesn't seem to be any ostensible
	use of emitting anything at all.

	* class.cs, rootcontext.cs : Get rid of calls to the same.

	* delegate.cs (DefineDelegate): Make sure the class we define is also sealed.

	(Populate): Define the constructor correctly and set the implementation
	attributes.

	* typemanager.cs (delegate_types): New hashtable to hold delegates that
	have been defined.

	(AddDelegateType): Implement.

	(IsDelegateType): Implement helper method.

	* delegate.cs (DefineDelegate): Use AddDelegateType instead of AddUserType.

	* expression.cs (New::DoResolve): Check if we are trying to instantiate a delegate type
	and accordingly handle it.

	* delegate.cs (Populate): Take TypeContainer argument.
	Implement bits to define the Invoke method. However, I still haven't figured out
	how to take care of the native int bit :-(

	* cs-parser.jay (delegate_declaration): Fixed the bug that I had introduced :-) 
	Qualify the name of the delegate, not its return type !

	* expression.cs (ImplicitReferenceConversion): Implement guts of implicit array
	conversion.

	(StandardConversionExists): Checking for array types turns out to be recursive.

	(ConvertReferenceExplicit): Implement array conversion.

	(ExplicitReferenceConversionExists): New method to determine precisely that :-)

2001-10-12  Ravi Pratap  <ravi@ximian.com>

	* cs-parser.jay (delegate_declaration): Store the fully qualified
	name as it is a type declaration.

	* delegate.cs (ReturnType, Name): Rename members to these. Make them 
	readonly.

	(DefineDelegate): Renamed from Define. Does the same thing essentially,
	as TypeContainer::DefineType.

	(Populate): Method in which all the definition of the various methods (Invoke)
	etc is done.

	(Emit): Emit any code, if necessary. I am not sure about this really, but let's
	see.

	(CloseDelegate): Finally creates the delegate.

	* class.cs (TypeContainer::DefineType): Update to define delegates.
	(Populate, Emit and CloseType): Do the same thing here too.

	* rootcontext.cs (ResolveTree, PopulateTypes, EmitCode, CloseTypes): Include
	delegates in all these operations.

2001-10-14  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs: LocalTemporary: a new expression used to
	reference a temporary that has been created.

	* assign.cs: Handle PropertyAccess back here, so that we can
	provide the proper semantic access to properties.

	* expression.cs (Expression::ConvertReferenceExplicit): Implement
	a few more explicit conversions. 

	* modifiers.cs: `NEW' modifier maps to HideBySig.

	* expression.cs (PropertyExpr): Make this into an
	ExpressionStatement, and support the EmitStatement code path. 

	Perform get/set error checking, clean up the interface.

	* assign.cs: recognize PropertyExprs as targets, and if so, turn
	them into toplevel access objects.

2001-10-12  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs: PropertyExpr::PropertyExpr: use work around the
	SRE.

	* typemanager.cs: Keep track here of our PropertyBuilders again to
	work around lameness in SRE.

2001-10-11  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (LValue::LValueResolve): New method in the
	interface, used to perform a second resolution pass for LValues. 

	(This::DoResolve): Catch the use of this in static methods.

	(This::LValueResolve): Implement.

	(This::Store): Remove warning, assigning to `this' in structures
	is 

	(Invocation::Emit): Deal with invocation of
	methods on value types.  We need to pass the address to structure
	methods rather than the object itself.  (The equivalent code to
	emit "this" for structures leaves the entire structure on the
	stack instead of a pointer to it). 

	(ParameterReference::DoResolve): Compute the real index for the
	argument based on whether the method takes or not a `this' pointer
	(ie, the method is static).

	* codegen.cs (EmitContext::GetTemporaryStorage): Used to store
	value types returned from functions when we need to invoke a
	method on the sturcture.


2001-10-11  Ravi Pratap  <ravi@ximian.com>

	* class.cs (TypeContainer::DefineType): Method to actually do the business of
	defining the type in the Modulebuilder or Typebuilder. This is to take
	care of nested types which need to be defined on the TypeBuilder using
	DefineNestedMethod.

	(TypeContainer::GetClassBases): Implement. Essentially the code from the 
	methods in RootContext, only ported to be part of TypeContainer.

	(TypeContainer::GetInterfaceOrClass): Ditto.

	(TypeContainer::LookupInterfaceOrClass, ::MakeFQN): Ditto.

	* interface.cs (Interface::DefineInterface): New method. Does exactly
	what RootContext.CreateInterface did earlier, only it takes care of nested types 
	too.

	(Interface::GetInterfaces): Move from RootContext here and port.

	(Interface::GetInterfaceByName): Same here.

	* rootcontext.cs (ResolveTree): Re-write.

	(PopulateTypes): Re-write.

	* class.cs (TypeContainer::Populate): Populate nested types too.
	(TypeContainer::Emit): Emit nested members too.

	* typemanager.cs (AddUserType): Do not make use of the FullName property,
	instead just use the name argument passed in as it is already fully
	qualified.

	(FindMembers): Check in the Builders to TypeContainer mapping instead of the name
	to TypeContainer mapping to see if a type is user-defined.

	* class.cs (TypeContainer::CloseType): Implement. 

	(TypeContainer::DefineDefaultConstructor): Use Basename, not Name while creating
	the default constructor.

	(TypeContainer::Populate): Fix minor bug which led to creating default constructors
	twice.

	(Constructor::IsDefault): Fix up logic to determine if it is the default constructor

	* interface.cs (CloseType): Create the type here.

	* rootcontext.cs (CloseTypes): Re-write to recursively close types by running through
	the hierarchy.

	Remove all the methods which are now in TypeContainer.

2001-10-10  Ravi Pratap  <ravi@ximian.com>

	* delegate.cs (Define): Re-write bits to define the delegate
	correctly.

2001-10-10  Miguel de Icaza  <miguel@ximian.com>

	* makefile: Renamed the compiler to `mcs.exe' instead of compiler.exe

	* expression.cs (ImplicitReferenceConversion): handle null as well
	as a source to convert to any reference type.

	* statement.cs (Return): Perform any implicit conversions to
	expected return type.  

	Validate use of return statement.  

	* codegen.cs (EmitContext): Pass the expected return type here.

	* class.cs (Method, Constructor, Property): Pass expected return
	type to EmitContext.

2001-10-09  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs: Make DoResolve take an EmitContext instead of a
	TypeContainer.

	Replaced `l' and `location' for `loc', for consistency.

	(Error, Warning): Remove unneeded Tc argument.

	* assign.cs, literal.cs, constant.cs: Update to new calling
	convention. 

	* codegen.cs: EmitContext now contains a flag indicating whether
	code is being generated in a static method or not.

	* cs-parser.jay: DecomposeQI, new function that replaces the old
	QualifiedIdentifier.  Now we always decompose the assembled
	strings from qualified_identifier productions into a group of
	memberaccesses.

2001-10-08  Miguel de Icaza  <miguel@ximian.com>

	* rootcontext.cs: Deal with field-less struct types correctly now
	by passing the size option to Define Type.

	* class.cs: Removed hack that created one static field. 

2001-10-07  Miguel de Icaza  <miguel@ximian.com>

	* statement.cs: Moved most of the code generation here. 

2001-10-09  Ravi Pratap  <ravi@ximian.com>

	* expression.cs (New::DoResolve): Revert changes for array creation, doesn't
	seem very right.

	(ElementAccess): Remove useless bits for now - keep checks as the spec
	says.

2001-10-08  Ravi Pratap  <ravi@ximian.com>

	* expression.cs (ElementAccess::DoResolve): Remove my crap code
	and start performing checks according to the spec.

2001-10-07  Ravi Pratap  <ravi@ximian.com>

	* cs-parser.jay (type_suffix*): Remove - they are redundant. Use
	rank_specifiers instead.

	(rank_specifiers): Change the order in which the rank specifiers are stored

	(local_variable_declaration): Use opt_rank_specifier instead of type_suffixes.

	* expression.cs (ElementAccess): Implement the LValue interface too.

2001-10-06  Ravi Pratap  <ravi@ximian.com>

	* expression.cs (ConvertExplicitStandard): Add. Same as ConvertExplicit
	except that user defined conversions are not included.

	(UserDefinedConversion): Update to use the ConvertExplicitStandard to 
	perform the conversion of the return type, if necessary.

	(New::DoResolve): Check whether we are creating an array or an object
	and accordingly do the needful.

	(New::Emit): Same here.

	(New::DoResolve): Implement guts of array creation.

	(New::FormLookupType): Helper function.

2001-10-07  Miguel de Icaza  <miguel@ximian.com>

	* codegen.cs: Removed most of the code generation here, and move the
	corresponding code generation bits to the statement classes. 

	Added support for try/catch/finalize and throw.

	* cs-parser.jay: Added support for try/catch/finalize.

	* class.cs: Catch static methods having the flags override,
	virtual or abstract.

	* expression.cs (UserCast): This user cast was not really doing
	what it was supposed to do.  Which is to be born in fully resolved
	state.  Parts of the resolution were being performed at Emit time! 

	Fixed this code.

2001-10-05  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs: Implicity convert the result from UserCast.

2001-10-05  Ravi Pratap  <ravi@ximian.com>

	* expression.cs (Expression::FindMostEncompassingType): Fix bug which
	prevented it from working correctly. 

	(ConvertExplicit): Make the first try, a call to ConvertImplicitStandard, not
	merely ConvertImplicit.

2001-10-05  Miguel de Icaza  <miguel@ximian.com>

	* typemanager.cs: Make the LookupTypeContainer function static,
	and not per-instance.  

	* class.cs: Make static FindMembers (the one that takes a Type
	argument). 

	* codegen.cs: Add EmitForeach here.

	* cs-parser.jay: Make foreach a toplevel object instead of the
	inline expansion, as we need to perform semantic analysis on it. 

2001-10-05  Ravi Pratap  <ravi@ximian.com>

	* expression.cs (Expression::ImplicitUserConversion): Rename to
	UserDefinedConversion.

	(Expression::UserDefinedConversion): Take an extra argument specifying 
	whether we look for explicit user conversions too.

	(Expression::ImplicitUserConversion): Make it a call to UserDefinedConversion.

	(UserDefinedConversion): Incorporate support for user defined explicit conversions.

	(ExplicitUserConversion): Make it a call to UserDefinedConversion
	with the appropriate arguments.

	* cs-parser.jay (cast_expression): Record location too.

	* expression.cs (Cast): Record location info.

	(Expression::ConvertExplicit): Take location argument.

	(UserImplicitCast): Change name to UserCast. Take an extra constructor argument
	to determine if we are doing explicit conversions.

	(UserCast::Emit): Update accordingly.

	(Expression::ConvertExplicit): Report an error if everything fails.

	* ../errors/cs0030.cs : Add.

2001-10-04  Miguel de Icaza  <miguel@ximian.com>

	* modifiers.cs: If the ABSTRACT keyword is present, also set the
	virtual and newslot bits. 

	* class.cs (TypeContainer::RegisterRequiredImplementations):
	Record methods we need.

	(TypeContainer::MakeKey): Helper function to make keys for
	MethodBases, since the Methodbase key is useless.

	(TypeContainer::Populate): Call RegisterRequiredImplementations
	before defining the methods.   

	Create a mapping for method_builders_to_methods ahead of time
	instead of inside a tight loop.

	(::RequireMethods):  Accept an object as the data to set into the
	hashtable so we can report interface vs abstract method mismatch.

2001-10-03  Miguel de Icaza  <miguel@ximian.com>

	* report.cs: Make all of it static.

	* rootcontext.cs: Drop object_type and value_type computations, as
	we have those in the TypeManager anyways.

	Drop report instance variable too, now it is a global.

	* driver.cs: Use try/catch on command line handling.

	Add --probe option to debug the error reporting system with a test
	suite. 

	* report.cs: Add support for exiting program when a probe
	condition is reached.

2001-10-03  Ravi Pratap  <ravi@ximian.com>

	* expression.cs (Binary::DoNumericPromotions): Fix the case when
	we do a forcible conversion regardless of type, to check if 
	ForceConversion returns a null.

	(Binary::error19): Use location to report error.

	(Unary::error23): Use location here too.

	* ../errors/cs0019.cs : Check in.

	* ../errors/cs0023.cs : Check in.

	* expression.cs (Expression.MemberLookup): Return null for a rather esoteric
	case of a non-null MethodInfo object with a length of 0 !

	(Binary::ResolveOperator): Flag error if overload resolution fails to find
	an applicable member - according to the spec :-)
	Also fix logic to find members in base types.

	(Unary::ResolveOperator): Same here.

	(Unary::report23): Change name to error23 and make first argument a TypeContainer
	as I was getting thoroughly confused between this and error19 :-)

	* expression.cs (Expression::ImplicitUserConversion): Re-write fully
	(::FindMostEncompassedType): Implement.
	(::FindMostEncompassingType): Implement.
	(::StandardConversionExists): Implement.

	(UserImplicitCast): Re-vamp. We now need info about most specific
	source and target types so that we can do the necessary conversions.

	(Invocation::MakeUnionSet): Completely re-write to make sure we form a proper
	mathematical union with no duplicates.

2001-10-03  Miguel de Icaza  <miguel@ximian.com>

	* rootcontext.cs (RootContext::PopulateTypes): Populate containers
	in order from base classes to child classes, so that we can in
	child classes look up in our parent for method names and
	attributes (required for handling abstract, virtual, new, override
	constructs: we need to instrospect our base class, and if we dont
	populate the classes in order, the introspection might be
	incorrect.  For example, a method could query its parent before
	the parent has any methods and would determine that the parent has
	no abstract methods (while it could have had them)).

	(RootContext::CreateType): Record the order in which we define the
	classes.

2001-10-02  Miguel de Icaza  <miguel@ximian.com>

	* class.cs (TypeContainer::Populate): Also method definitions can
	fail now, keep track of this.

	(TypeContainer::FindMembers): Implement support for
	DeclaredOnly/noDeclaredOnly flag.

	(Constructor::Emit) Return the ConstructorBuilder.

	(Method::Emit) Return the MethodBuilder. 
	Check for abstract or virtual methods to be public.

	* rootcontext.cs (RootContext::CreateType): Register all the
	abstract methods required for the class to be complete and the
	interface methods that must be implemented. 

	* cs-parser.jay: Report error 501 (method requires body if it is
	not marked abstract or extern).

	* expression.cs (TypeOf::Emit): Implement.

	* typemanager.cs: runtime_handle_type, new global type.

	* class.cs (Property::Emit): Generate code for properties.

2001-10-02  Ravi Pratap  <ravi@ximian.com>

	* expression.cs (Unary::ResolveOperator): Find operators on base type
	too - we now conform exactly to the spec.

	(Binary::ResolveOperator): Same here.

	* class.cs (Operator::Define): Fix minor quirk in the tests.

	* ../errors/cs0215.cs : Added.

	* ../errors/cs0556.cs : Added.

	* ../errors/cs0555.cs : Added.

2001-10-01  Miguel de Icaza  <miguel@ximian.com>

	* cs-tokenizer.cs: Reimplemented Location to be a struct with a
	single integer which is really efficient

2001-10-01  Ravi Pratap  <ravi@ximian.com>

	*  expression.cs (Expression::ImplicitUserConversion): Use location
	even in the case when we are examining True operators.
 
	* class.cs (Operator::Define): Perform extensive checks to conform
	with the rules for operator overloading in the spec.

	* expression.cs (Expression::ImplicitReferenceConversion): Implement
	some of the other conversions mentioned in the spec.

	* typemanager.cs (array_type): New static member for the System.Array built-in
	type.

	(cloneable_interface): For System.ICloneable interface.

	* driver.cs (Driver::Driver): Initialize TypeManager's core types even before
	we start resolving the tree and populating types.

	* ../errors/errors.txt : Update for error numbers -7, -8, -9, -10
 
2001-10-01  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (Expression::ExprClassFromMemberInfo,
	Expression::Literalize): Create literal expressions from
	FieldInfos which are literals.

	(ConvertNumericExplicit, ImplicitNumericConversion): Fix a few
	type casts, because they were wrong.  The test suite in tests
	caught these ones.

	(ImplicitNumericConversion): ushort to ulong requires a widening
	cast. 

	Int32 constant to long requires widening cast as well.

	* literal.cs (LongLiteral::EmitLong): Do not generate i4 constants
	for integers because the type on the stack is not i4.

2001-09-30  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (report118): require location argument. 

	* parameter.cs: Do not dereference potential null value.

	* class.cs: Catch methods that lack the `new' keyword when
	overriding a name.  Report warnings when `new' is used without
	anything being there to override.

	* modifiers.cs: Handle `NEW' as MethodAttributes.NewSlot.

	* class.cs: Only add constructor to hashtable if it is non-null
	(as now constructors can fail on define).

	(TypeManager, Class, Struct): Take location arguments.

	Catch field instance initialization in structs as errors.

	accepting_filter: a new filter for FindMembers that is static so
	that we dont create an instance per invocation.

	(Constructor::Define): Catch errors where a struct constructor is
	parameterless 

	* cs-parser.jay: Pass location information for various new
	constructs. 

	* delegate.cs (Delegate): take a location argument.

	* driver.cs: Do not call EmitCode if there were problesm in the
	Definition of the types, as many Builders wont be there. 

	* decl.cs (Decl::Decl): Require a location argument.

	* cs-tokenizer.cs: Handle properly hex constants that can not fit
	into integers, and find the most appropiate integer for it.

	* literal.cs: Implement ULongLiteral.

	* rootcontext.cs: Provide better information about the location of
	failure when CreateType fails.

2001-09-29  Miguel de Icaza  <miguel@ximian.com>

	* rootcontext.cs (RootContext::PopulateTypes): Populates structs
	as well.

	* expression.cs (Binary::CheckShiftArguments): Add missing type
	computation.
	(Binary::ResolveOperator): Add type to the logical and and logical
	or, Bitwise And/Or and Exclusive Or code paths, it was missing
	before.

	(Binary::DoNumericPromotions): In the case where either argument
	is ulong (and most signed types combined with ulong cause an
	error) perform implicit integer constant conversions as well.

2001-09-28  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (UserImplicitCast): Method should always be
	non-null. 
	(Invocation::BetterConversion): Simplified test for IntLiteral.

	(Expression::ImplicitNumericConversion): Split this routine out.
	Put the code that performs implicit constant integer conversions
	here. 

	(Expression::Resolve): Become a wrapper around DoResolve so we can
	check eclass and type being set after resolve.

	(Invocation::Badness): Remove this dead function

	(Binary::ResolveOperator): Do not compute the expensive argumnets
	unless we have a union for it.

	(Probe::Emit): Is needs to do an isinst and then
	compare against null.

	(::CanConvert): Added Location argument.  If the Location argument
	is null (Location.Null), then we do not report errors.  This is
	used by the `probe' mechanism of the Explicit conversion.  We do
	not want to generate an error for something that the user
	explicitly requested to be casted.  But the pipeline for an
	explicit cast first tests for potential implicit casts.

	So for now, if the Location is null, it means `Probe only' to
	avoid adding another argument.   Might have to revise this
	strategy later.

	(ClassCast): New class used to type cast objects into arbitrary
	classes (used in Explicit Reference Conversions).

	Implement `as' as well.

	Reverted all the patches from Ravi below: they were broken:

		* The use of `level' as a mechanism to stop recursive
		  invocations is wrong.  That was there just to catch the
		  bug with a strack trace but not as a way of addressing
		  the problem.

		  To fix the problem we have to *understand* what is going
		  on and the interactions and come up with a plan, not
		  just get things going.

		* The use of the type conversion cache that I proposed
		  last night had an open topic: How does this work across
		  protection domains.  A user defined conversion might not
		  be public in the location where we are applying the
		  conversion, a different conversion might be selected
		  (ie, private A->B (better) but public B->A (worse),
		  inside A, A->B applies, but outside it, B->A will
		  apply).

		* On top of that (ie, even if the above is solved),
		  conversions in a cache need to be abstract.  Ie, `To
		  convert from an Int to a Short use an OpcodeCast', not
		  `To convert from an Int to a Short use the OpcodeCast on
		  the variable 5' (which is what this patch was doing).

2001-09-28  Ravi Pratap  <ravi@ximian.com>

	* expression.cs (Invocation::ConversionExists): Re-write to use
	the conversion cache

	(Expression::ConvertImplicit): Automatic bailing out if level != 0. Also
	cache all conversions done, not just user-defined ones.

	(Invocation::BetterConversion): The real culprit. Use ConversionExists
	to determine if a conversion exists instead of acutually trying to 
	perform the conversion. It's faster too.

	(Expression::ConvertExplicit): Modify to use ConversionExists to check
	and only then attempt the implicit conversion.

2001-09-28  Ravi Pratap  <ravi@ximian.com>

	* expression.cs (ConvertImplicit): Use a cache for conversions
	already found. Check level of recursion and bail out if necessary.

2001-09-28  Miguel de Icaza  <miguel@ximian.com>

	* typemanager.cs (string_concat_string_string, string_concat_object_object):
	Export standard methods that we expect for string operations.

	* statement.cs (Block::UsageWarning): Track usage of variables and
	report the errors for not used variables.

	* expression.cs (Conditional::Resolve, ::Emit): Implement ?:
	operator. 

2001-09-27  Miguel de Icaza  <miguel@ximian.com>

	* codegen.cs: remove unnneded code 

	* expression.cs: Removed BuiltinTypeAccess class

	Fix the order in which implicit conversions are
	done.  

	The previous fixed dropped support for boxed conversions (adding a
	test to the test suite now)

	(UserImplicitCast::CanConvert): Remove test for source being null,
	that code is broken.  We should not feed a null to begin with, if
	we do, then we should track the bug where the problem originates
	and not try to cover it up here.

	Return a resolved expression of type UserImplicitCast on success
	rather than true/false.  Ravi: this is what I was talking about,
	the pattern is to use a static method as a "constructor" for
	objects. 

	Also, do not create arguments until the very last minute,
	otherwise we always create the arguments even for lookups that
	will never be performed. 

	(UserImplicitCast::Resolve): Eliminate, objects of type
	UserImplicitCast are born in a fully resolved state. 

	* typemanager.cs (InitCoreTypes): Init also value_type
	(System.ValueType). 

	* expression.cs (Cast::Resolve): First resolve the child expression.

	(LValue): Add new method AddressOf to be used by
	the `&' operator.  

	Change the argument of Store to take an EmitContext instead of an
	ILGenerator, because things like FieldExpr need to be able to call
	their children expression to generate the instance code. 

	(Expression::Error, Expression::Warning): Sugar functions for
	reporting errors.

	(Expression::MemberLookup): Accept a TypeContainer instead of a
	Report as the first argument.

	(Expression::ResolvePrimary): Killed.  I still want to improve
	this as currently the code is just not right.

	(Expression::ResolveMemberAccess): Simplify, but it is still
	wrong. 

	(Unary::Resolve): Catch errors in AddressOf operators.

	(LocalVariableReference::Emit, ::Store, ::AddressOf): typecast
	index to a byte for the short-version, or the compiler will choose
	the wrong Emit call, which generates the wrong data.

	(ParameterReference::Emit, ::Store): same.

	(FieldExpr::AddressOf): Implement.

	* typemanager.cs: TypeManager: made public variable instead of
	property.

	* driver.cs: document --fatal.

	* report.cs (ErrorMessage, WarningMessage): new names for the old
	Error and Warning classes.

	* cs-parser.jay (member_access): Turn built-in access to types
	into a normal simplename

2001-09-27  Ravi Pratap  <ravi@ximian.com>

	* expression.cs (Invocation::BetterConversion): Fix to cope
	with q being null, since this was introducing a bug.

	* expression.cs (ConvertImplicit): Do built-in conversions first.

2001-09-27  Ravi Pratap  <ravi@ximian.com>

	* expression.cs (UserImplicitCast::Resolve): Fix bug.

2001-09-27  Ravi Pratap  <ravi@ximian.com>

	* class.cs (TypeContainer::AddConstructor): Fix a stupid bug
	I had introduced long ago (what's new ?).

	* expression.cs (UserImplicitCast::CanConvert): Static method to do 
	the work of all the checking. 
	(ConvertImplicit): Call CanConvert and only then create object if necessary.
	(UserImplicitCast::CanConvert, ::Resolve): Re-write.

	(Unary::Operator): Rename Add and Subtract to Addition and Subtraction because
	that is the right way. 

	(Invocation::MakeUnionSet): Convenience function to make unions of sets for 
	overloading resolution. Use everywhere instead of cutting and pasting code.

	(Binary::ResolveOperator): Use MakeUnionSet.

	(UserImplicitCast::CanConvert, ::Resolve): Update to take care of the case when 
	we have to convert to bool types. Not complete yet.

2001-09-27  Miguel de Icaza  <miguel@ximian.com>

	* typemanager.cs (TypeManager::CSharpName): support ushort.

	* expression.cs (Expression::TryImplicitIntConversion): Attempts
	to provide an expression that performsn an implicit constant int
	conversion (section 6.1.6).
	(Expression::ConvertImplicitRequired): Reworked to include
	implicit constant expression conversions.

	(Expression::ConvertNumericExplicit): Finished.

	(Invocation::Emit): If InstanceExpression is null, then it means
	that we perform a call on this.

2001-09-26  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (Unary::Emit): Remove some dead code.
	(Probe): Implement Resolve and Emit for `is'.
	(Expression::ConvertImplicitRequired): Attempt to do constant
	expression conversions here.  Maybe should be moved to
	ConvertImplicit, but I am not sure.
	(Expression::ImplicitLongConstantConversionPossible,
	Expression::ImplicitIntConstantConversionPossible): New functions
	that tell whether is it possible to apply an implicit constant
	expression conversion.

	(ConvertNumericExplicit): Started work on explicit numeric
	conversions.

	* cs-parser.jay: Update operator constants.

	* parameter.cs (Parameters::GetParameterInfo): Hook up VerifyArgs
	(Parameters::GetSignature): Hook up VerifyArgs here.
	(Parameters::VerifyArgs): Verifies that no two arguments have the
	same name. 

	* class.cs (Operator): Update the operator names to reflect the
	ones that the spec expects (as we are just stringizing the
	operator names).

	* expression.cs (Unary::ResolveOperator): Fix bug: Use
	MethodInfo's ReturnType instead of LookupMethodByBuilder as the
	previous usage did only work for our methods.
	(Expression::ConvertImplicit): Handle decimal implicit numeric
	conversions as well.
	(Expression::InternalTypeConstructor): Used to invoke constructors
	on internal types for default promotions.

	(Unary::Emit): Implement special handling for the pre/post
	increment/decrement for overloaded operators, as they need to have
	the same semantics as the other operators.

	(Binary::ResolveOperator): ditto.
	(Invocation::ConversionExists): ditto.
	(UserImplicitCast::Resolve): ditto.

2001-09-26  Ravi Pratap  <ravi@ximian.com>

	* expression.cs (Unary::Emit and Binary::Emit): If we have an overloaded
	operator, return after emitting body. Regression tests pass again !

	* expression.cs (ConvertImplicit): Take TypeContainer as first argument
	(Unary::ForceConversion, Binary::ForceConversion): Ditto.
	(Invocation::OverloadResolve): Ditto.
	(Invocation::BetterFunction, BetterConversion, ConversionExists): Ditto.

	* everywhere : update calls to the above methods accordingly.

2001-09-26  Miguel de Icaza  <miguel@ximian.com>

	* assign.cs (Assign): Make it inherit from ExpressionStatement.

	* expression.cs (ExpressionStatement): New base class used for
	expressions that can appear in statements, so that we can provide
	an alternate path to generate expression that do not leave a value
	on the stack.

	(Expression::Emit, and all the derivatives): We no longer return
	whether a value is left on the stack or not.  Every expression
	after being emitted leaves a single value on the stack.

	* codegen.cs (EmitContext::EmitStatementExpression): Use the
	facilties of ExpressionStatement if possible.

	* cs-parser.jay: Update statement_expression.

2001-09-25  Miguel de Icaza  <miguel@ximian.com>

	* driver.cs: Change the wording of message

2001-09-25  Ravi Pratap  <ravi@ximian.com>

	* expression.cs (Binary::ResolveOperator): Had forgottten to set 
	the type of the expression to the return type of the method if
	we have an overloaded operator match ! The regression tests pass again !
	(Unary::ResolveOperator): Ditto.

	* expression.cs (Invocation::ConversionExists): Correct the member lookup
	to find "op_Implicit", not "implicit" ;-)
	(UserImplicitCast): New class to take care of user-defined implicit conversions.
	(ConvertImplicit, ForceConversion): Take TypeContainer argument

	* everywhere : Correct calls to the above accordingly.

	* expression.cs (UserImplicitCast::Resolve, ::Emit): Implement.
	(ConvertImplicit): Do user-defined conversion if it exists.

2001-09-24  Miguel de Icaza  <miguel@ximian.com>

	* assign.cs: track location.
	(Resolve): Use implicit conversions on assignment.

	* literal.cs: Oops.  Not good, Emit of short access values should
	pass (Bytes) or the wrong argument will be selected.

	* expression.cs (Unary::Emit): Emit code for -expr.

	(Unary::ResolveOperator): Handle `Substract' for non-constants
	(substract from zero from the non-constants).
	Deal with Doubles as well. 

	(Expression::ConvertImplicitRequired): New routine that reports an
	error if no implicit conversion exists. 

	(Invocation::OverloadResolve): Store the converted implicit
	expressions if we make them

2001-09-24  Ravi Pratap  <ravi@ximian.com>

	* class.cs (ConstructorInitializer): Take a Location argument.
	(ConstructorBaseInitializer): Same here.
	(ConstructorThisInitializer): Same here.

	* cs-parser.jay : Update all calls accordingly.

	* expression.cs (Unary, Binary, New): Take location argument.
	Update accordingly everywhere.

	* cs-parser.jay : Update all calls to the above to take a location
	argument.

	* class.cs : Ditto.

2001-09-24  Ravi Pratap  <ravi@ximian.com>

	* expression.cs (Invocation::BetterFunction): Take TypeContainer argument
	(Invocation::BetterConversion): Same here
	(Invocation::ConversionExists): Ditto.

	(Invocation::ConversionExists): Implement.

2001-09-22  Ravi Pratap  <ravi@ximian.com>

	* expression.cs (OverloadResolve): Improve some more to catch errors 1502 and 1503
	Also take an additional TypeContainer argument.

	* All over : Pass in TypeContainer as argument to OverloadResolve.

	* typemanager.cs (CSharpName): Update to check for the string type and return
	that too.

	* expression.cs (Invocation::FullMethodDesc): New static method to return a string fully describing
	a given method.

2001-09-21  Ravi Pratap  <ravi@ximian.com>

	* expression.cs (Invocation::OverloadResolve): Re-write to conform more to the spec.
	(Invocation::BetterFunction): Implement.
	(Invocation::BetterConversion): Implement.
	(Invocation::ConversionExists): Skeleton, no implementation yet.

	Okay, things work fine !

2001-09-21  Miguel de Icaza  <miguel@ximian.com>

	* typemanager.cs: declare and load enum_type, delegate_type and
	void_type. 

	* expression.cs (Expression::Emit): Now emit returns a value that
	tells whether a value is left on the stack or not.  This strategy
	might be reveted tomorrow with a mechanism that would address
	multiple assignments.
	(Expression::report118): Utility routine to report mismatches on
	the ExprClass.

	(Unary::Report23): Report impossible type/operator combination
	utility function.

	(Unary::IsIncrementableNumber): Whether the type can be
	incremented or decremented with add.
	(Unary::ResolveOperator): Also allow enumerations to be bitwise
	complemented. 
	(Unary::ResolveOperator): Implement ++, !, ~,

	(Invocation::Emit): Deal with new Emit convetion.

	* All Expression derivatives: Updated their Emit method to return
	whether they leave values on the stack or not.

	* codegen.cs (CodeGen::EmitStatement): Pop values left on the
	stack for expressions that are statements. 

2001-09-20  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (LValue): New interface.  Must be implemented by
	LValue objects.
	(LocalVariableReference, ParameterReference, FieldExpr): Implement
	LValue interface.

	* assign.cs (Assign::Emit, Assign::Resolve): Use new LValue
	interface for generating code, simplifies the code.

2001-09-20  Ravi Pratap  <ravi@ximian.com>

	* expression.cs (everywhere): Comment out return statements in ::Resolve
	methods to avoid the warnings.

2001-09-20  Miguel de Icaza  <miguel@ximian.com>

	* driver.cs (parse): Report error 2001 if we can not open the
	source file.

	* expression.cs (SimpleName::ResolveSimpleName): Error if we can
	not resolve it.

	* cs-parser.jay (QualifierIdentifier): Pass location to SimpleName
	object. 

	* statement.cs (Block::EmitMeta): Reuse the count across all the variables,
	otherwise nested blocks end up with the same index.

	* codegen.cs (CodeGen::EmitTopBlock): Pass initial sequence

	* expression.cs:  Instead of having FIXMEs in the Resolve
	functions, throw exceptions so it is obvious that we are facing a
	bug. 

	* cs-parser.jay (invocation_expression): Pass Location information.

	* codegen.cs (CodeGen::Save, CodeGen::CodeGen, CodeGen::Basename):
	Use a basename for those routines because .NET does not like paths
	on them. 

	* class.cs (TypeContainer::AddMethod): Do not call DefineName if the name was
	already defined.

2001-09-19  Miguel de Icaza  <miguel@ximian.com>

	* typemanager.cs (TypeManager::CoreLookupType): A function to make sure that we
	are loading the correct data types (throws an exception if not).
	(TypeManager::InitCoreTypes): Use CoreLookupType

	* expression.cs (Unary::ResolveOperator): return the child
	expression for expressions which are just +expr.
	(Unary::ResolveOperator): Return negative literals for -LITERAL
	expressions (otherwise they are Unary {Literal}).
	(Invocation::Badness): Take into account `Implicit constant
	expression conversions'.

	* literal.cs (LongLiteral): Implement long literal class.
	(IntLiteral): export the `Value' of the intliteral. 

2001-09-19  Ravi Pratap  <ravi@ximian.com>

	* expression.cs (Binary::Emit): Finally get the emission right ! Woo!

	* class.cs (Operator::Define): Change the methodname prefix to 'op_' 
	instead of 'Operator'

	* expression.cs (Binary::ResolveOperator): Update accordingly.
	(Unary::Operator): Change names to 'Add' and 'Subtract' instead 'Plus'
	and 'Minus'

	* cs-parser.jay (unary_expression): Update to use the new names.

	* gen-treedump.cs (GetUnary): Same here.

	* expression.cs (Unary::Resolve): Implement.
	(Binary::ResolveOperator): Re-write bits to quietly continue if no overloaded 
	operators are found instead of making noise ;-)
	(Unary::ResolveOperator): New method to do precisely the same thing which
	Binary::ResolveOperator does for Binary expressions.
	(Unary.method, .Arguments): Add.
	(Unary::OperName): Implement.	
	(Unary::ForceConversion): Copy and Paste !

	* class.cs (Operator::Define): Fix a small bug for the case when we have 
	a unary operator.

	* expression.cs (Unary::Emit): Implement. Need to find the right Opcodes
	for the inbuilt operators. Only overloading works for now ;-)

2001-09-18  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (CheckedExpr::Resolve, CheckedExpr::Emit,
	UnCheckedExpr::Resolve, UnCheckedExpr::Emit): Implement.

	* expression.cs (This::Emit): Implement. 
	(This::Resolve): Implement.
	(TypeOf:Resolve): Implement.
	(Expression::ResolveSimpleName): Add an implicit this to instance
	field references. 
	(MemberAccess::Resolve): Deal with Parameters and Fields. 
	Bind instance variable to Field expressions.
	(FieldExpr::Instance): New field used to track the expression that
	represents the object instance.
	(FieldExpr::Resolve): Track potential errors from MemberLookup not
	binding 
	(FieldExpr::Emit): Implement.

	* codegen.cs (EmitIf, EmitStatement, EmitBlock): Propagate whether
	the last instruction contains a return opcode to avoid generating
	the last `ret' instruction (this generates correct code, and it is
	nice to pass the peverify output).

	* class.cs (TypeContainer::EmitFieldInitializers): Implement field
	initializer for static and instance variables.
	(Constructor::Emit): Allow initializer to be null in the case of
	static constructors.  Only emit initializer for instance
	constructors. 

	(TypeContainer::FindMembers): Return a null array if there are no
	matches.

	Also fix the code for the MemberTypes.Method branch, as it was not
	scanning that for operators (or tried to access null variables before).

	* assign.cs (Assign::Emit): Handle instance and static fields. 

	* TODO: Updated.

	* driver.cs: Stop compilation if there are parse errors.

	* cs-parser.jay (constructor_declaration): Provide default base
	initializer for non-static constructors.
	(constructor_declarator): Do not provide a default base
	initializers if none was specified.
	Catch the fact that constructors should not have parameters.

	* class.cs: Do not emit parent class initializers for static
	constructors, that should be flagged as an error.

2001-09-18  Ravi Pratap  <ravi@ximian.com>

	* class.cs (RegisterMethodBuilder): Remove : it's unnecessary.
	Move back code into TypeContainer::Populate.

2001-09-18  Ravi Pratap  <ravi@ximian.com>

	* class.cs (TypeContainer::AddConstructor): Fix the check to
	compare against Name, not Basename. 
	(Operator::OpType): Change Plus and Minus to Add and Subtract.

	* cs-parser.jay : Update accordingly.

	* class.cs (TypeContainer::FindMembers): For the case where we are searching
	for methods, don't forget to look into the operators too.
	(RegisterMethodBuilder): Helper method to take care of this for
	methods, constructors and operators.
	(Operator::Define): Completely revamp.
	(Operator.OperatorMethod, MethodName): New fields.
	(TypeContainer::Populate): Move the registering of builders into
	RegisterMethodBuilder.
	(Operator::Emit): Re-write.

	* expression.cs (Binary::Emit): Comment out code path to emit method
	invocation stuff for the case when we have a user defined operator. I am
	just not able to get it right !

2001-09-17  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (Expression::OverloadResolve): Drop TypeContainer
	argument. 

	(Expression::MemberLookup): Provide a version that allows to
	specify the MemberTypes and BindingFlags. 

	* statement.cs (Block::GetVariableInfo): Forgot to recurse here,
	so it was not fetching variable information from outer blocks.

	* modifiers.cs: (Modifiers::TypeAttr): Invert condition on
	Beforefieldinit as it was buggy.

	* rootcontext.cs (::LookupInterfaceOrClass): Removed an Error -200
	that Ravi put here.  

	* class.cs (Constructor::Emit): Only emit if block is not null.
	(TypeContainer::EmitDefaultConstructor): Removed routine, now we
	deal with this by semantically definining it as if the user had
	done it.

	(TypeContainer::FindMembers): Removed ad-hoc hack to deal with
	constructors as we now "emit" them at a higher level.

	(TypeContainer::DefineDefaultConstructor): Used to define the
	default constructors if none was provided.

	(ConstructorInitializer): Add methods Resolve and Emit. 

	* expression.cs: Cast to ConstructorInfo instead of MethodInfo

2001-09-17  Ravi Pratap  <ravi@ximian.com>

	* class.cs (TypeContainer::EmitDefaultConstructor): Register
	the default constructor builder with our hashtable for methodbuilders
	to methodcores.

	* expression.cs (Invocation::OverloadResolve): Add a check for pd == null
	and argument_count is 0 in which case we have a match.
	(Binary::ResolveOperator): More null checking and miscellaneous coding
	style cleanup.

2001-09-17  Ravi Pratap  <ravi@ximian.com>

	* rootcontext.cs (IsNameSpace): Compare against null.

	* everywhere : Correct spelling to 'Greater' and to 'Subtract'

	* class.cs (Operator::OpType): Change names to match the ones in Binary::Operator
	and Unary::Operator.

	* cs-parser.jay (operator_declaration, CheckBinaryOperator, CheckUnaryOperator): Update
	accordingly.

	* expression.cs (Binary::method): New member to hold the MethodBase for the case when
	we have overloaded operators.
	(Binary::ResolveOperator): Implement the part which does the operator overload
	resolution.

	* class.cs (Operator::Emit): Implement.
	(TypeContainer::Emit): Emit the operators we have too.

	* expression.cs (Binary::Emit): Update to emit the appropriate code for
	the case when we have a user-defined operator.

2001-09-17  Miguel de Icaza  <miguel@ximian.com>

	* rootcontext.cs: Fix bug: tree.Namespaces might be null.

2001-09-16  Ravi Pratap  <ravi@ximian.com>

	* class.cs (EmitStaticFieldInitializers, EmitFieldInitializers): Make public.
	(TypeContainer::EmitConstructor): Remove and move code into Contructor::Emit.
	(Constructor::Emit): Implement.
	(EmitStaticFieldInitializers, EmitFieldInitializers): Ensure we return immediately
	if we have no work to do. 
	(TypeContainer::Emit): Pass in TypeContainer as argument to the constructor's 
	Emit method.

	* interface.cs (Interface::InterfaceAttr): Re-write to be more correct and complete.
	(Interface::IsTopLevel): Add. Same as TypeContainer::IsTopLevel.

	* class.cs (TypeContainer::IsTopLevel): Modify to use parent.Parent instead
	of parent.parent.

2001-09-15  Ravi Pratap  <ravi@ximian.com>

	* tree.cs (Tree::namespaces): New hashtable to keep track of namespaces
	in the source.
	(Tree::RecordNamespace): Method to do what the name says ;-)
	(Tree::Namespaces): Property to get at the namespaces hashtable.

	* cs-parser.jay (namespace_declaration): Call RecordNamespace to 
	keep track.

	* rootcontext.cs (IsNamespace): Fixed it :-)

2001-09-14  Miguel de Icaza  <miguel@ximian.com>

	* class.cs (TypeContainer::FindMembers): Add support for
	constructors. 
	(MethodCore): New class that encapsulates both the shared aspects
	of a Constructor and a Method.  
	(Method, Constructor): Factored pieces into MethodCore.

	* driver.cs: Added --fatal which makes errors throw exceptions.
	Load System assembly as well as part of the standard library.

	* report.cs: Allow throwing exceptions on errors for debugging.

	* modifiers.cs: Do not use `parent', instead use the real type
	container to evaluate permission settings.

	* class.cs: Put Ravi's patch back in.  He is right, and we will
	have to cope with the

2001-09-14  Ravi Pratap  <ravi@ximian.com>

	* modifiers.cs (TypeAttr, MethodAttr, FieldAttr): Map protected internal to
	FamORAssem, not FamANDAssem.

2001-09-14  Miguel de Icaza  <miguel@ximian.com>

	* driver.cs: Added --parse option that only parses its input files
	and terminates.

	* class.cs: Reverted last change from Ravi to IsTopLevel.  That is
	incorrect.  IsTopLevel is not used to tell whether an object is
	root_types or not (that can be achieved by testing this ==
	root_types).  But to see if this is a top-level *class* (not
	necessarly our "toplevel" container). 

2001-09-14  Ravi Pratap  <ravi@ximian.com>

	* enum.cs (Enum::Define): Modify to call the Lookup method on the
	parent instead of a direct call to GetType.

2001-09-14  Ravi Pratap  <ravi@ximian.com>

	* class.cs (TypeContainer::TypeAttr): Remove property code and move it into
	Modifiers.TypeAttr. This should just be a call to that method.

	* modifiers.cs (TypeAttr): Re-write and take an extra argument, the TypeContainer
	object so that we can determine if we are top-level or not.

	* delegate.cs (Delegate::Define): Update call to TypeAttr method to pass in the 
	TypeContainer too.

	* enum.cs (Enum::Define): Ditto.

	* modifiers.cs (FieldAttr): Re-write.

	* class.cs (TypeContainer::IsTopLevel): Change accessibility to public.
	(TypeContainer::HaveStaticConstructor): New property to provide access
	to precisely that info.

	* modifiers.cs (MethodAttr): Re-write.
	(EventAttr): Remove altogether as there seems to be no ostensible use for it.

	* class.cs (TypeContainer::IsTopLevel): Re-write. root_types doesn't seem to be the parent
	of top-level types as claimed.

2001-09-13  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (MemberLookup): Fruitless attempt to lookup
	constructors.  Maybe I need to emit default constructors?  That
	might be it (currently .NET emits this for me automatically).
	(Invocation::OverloadResolve): Cope with Arguments == null.
	(Invocation::EmitArguments): new function, shared by the new
	constructor and us.
	(Invocation::Emit): Handle static and instance methods.  Emit
	proper call instruction for virtual or non-virtual invocations.
	(New::Emit): Implement.
	(New::Resolve): Implement.
	(MemberAccess:Resolve): Implement.
	(MethodGroupExpr::InstanceExpression): used conforming to the spec
	to track instances.
	(FieldExpr::Resolve): Set type.

	* support.cs: Handle empty arguments.
		
	* cs-parser.jay (CompositeLookup, QualifierIdentifier,
	SimpleLookup): Auxiliary routines to help parse a qualifier
	identifier.  

	Update qualifier_identifier rule.

	* codegen.cs: Removed debugging messages.

	* class.cs: Make this a global thing, this acts just as a "key" to
	objects that we might have around.

	(Populate): Only initialize method_builders_to_methods once.

	* expression.cs (PropertyExpr): Initialize type from the
	PropertyType. 

	* codegen.cs (EmitContext::EmitBoolExpression): Use propper
	Resolve pattern.  Attempt to implicitly convert value to boolean.
	Emit code.

	* expression.cs: Set the type for the int32/int32 argument case.
	(Binary::ResolveOperator): Set the return type to boolean for
	comparission operators

	* typemanager.cs: Remove debugging print code.

	(Invocation::Resolve): resolve type.

	* class.cs: Allocate a MemberInfo of the correct size, as the code
	elsewhere depends on the test to reflect the correct contents.

	(Method::) Keep track of parameters, due to System.Reflection holes

	(TypeContainer::Populate): Keep track of MethodBuilders to Method
	mapping here.

	(TypeContainer::FindMembers): Use ArrayList and then copy an array
	of the exact size and return that.

	(Class::LookupMethodByBuilder): New function that maps
	MethodBuilders to its methods.  Required to locate the information
	on methods because System.Reflection bit us again.

	* support.cs: New file, contains an interface ParameterData and
	two implementations: ReflectionParameters and InternalParameters
	used to access Parameter information.  We will need to grow this
	as required.

	* expression.cs (Invocation::GetParameterData): implement a cache
	and a wrapper around the ParameterData creation for methods. 
	(Invocation::OverloadResolve): Use new code.

2001-09-13  Ravi Pratap  <ravi@ximian.com>

	* class.cs (TypeContainer::EmitField): Remove and move into 
	(Field::Define): here and modify accordingly.
	(Field.FieldBuilder): New member.
	(TypeContainer::Populate): Update accordingly.
	(TypeContainer::FindMembers): Implement.

2001-09-13  Miguel de Icaza  <miguel@ximian.com>

	* statement.cs: (VariableInfo::VariableType): New field to be
	initialized with the full type once it is resolved. 

2001-09-12  Miguel de Icaza  <miguel@ximian.com>

	* parameter.cs (GetParameterInfo): Use a type cache to compute
	things only once, and to reuse this information

	* expression.cs (LocalVariableReference::Emit): Implement.
	(OpcodeCast::Emit): fix.

	(ParameterReference::Resolve): Implement.
	(ParameterReference::Emit): Implement.

	* cs-parser.jay: Fix bug introduced by Ravi, variable initializers
	that are expressions need to stay as Expressions.

	* typemanager.cs (CSharpName): Returns the C# name of a type if
	possible. 

	* expression.cs (Expression::ConvertImplicit): New function that
	implements implicit type conversions.

	(Expression::ImplicitReferenceConversion): Implements implicit
	reference conversions.

	(EmptyCast): New type for transparent casts.

	(OpcodeCast): New type for casts of types that are performed with
	a sequence of bytecodes.

	(BoxedCast): New type used for casting value types into reference
	types.  Emits a box opcode.

	(Binary::DoNumericPromotions): Implements numeric promotions of
	and computation of the Binary::Type.

	(Binary::EmitBranchable): Optimization.

	(Binary::Emit): Implement code emission for expressions.

	* typemanager.cs (TypeManager): Added two new core types: sbyte
	and byte.

2001-09-12  Ravi Pratap  <ravi@ximian.com>

	* class.cs (TypeContainer::FindMembers): Method which does exactly
	what Type.FindMembers does, only we don't have to use reflection. No
	implementation yet.

	* typemanager.cs (typecontainers): New hashtable to hold the corresponding
	typecontainer objects as we need to get at them.
	(TypeManager::AddUserType): Overload to take an extra argument, the TypeContainer.

	* rootcontext.cs : Correspondingly modify called to AddUserType to pass the
	typecontainer object.

	* expression.cs (MemberLookup): Modify signature to take a RootContext object instead
	of just a Report object.

2001-09-11  Ravi Pratap  <ravi@ximian.com>

	* class.cs (Event::Define): Go back to using the prefixes "add_" and
	"remove_"
	(TypeContainer::Populate): Now define the delegates of the type too.
	(TypeContainer.Delegates): Property to access the list of delegates defined
	in the type.

	* delegates.cs (Delegate::Define): Implement partially.

	* modifiers.cs (TypeAttr): Handle more flags.

2001-09-11  Ravi Pratap  <ravi@ximian.com>

	* class.cs (Indexer::Define): Fix for loop iteration condition to be just <
	and not <=
	(Operator::Define): Re-write logic to get types by using the LookupType method
	instead of blindly doing a Type.GetType ! How stupid can I get ;-) ?
 	(Indexer::Define): Ditto.
	(Event::Define): Ditto.
	(Property::Define): Ditto.

2001-09-10  Ravi Pratap  <ravi@ximian.com>

	* class.cs (TypeContainer::Populate): Now define operators too. 
	(TypeContainer.Operators): New property to access the list of operators
	in a type.
	(Operator.OperatorMethodBuilder): New member to hold the method builder
	for the operator we are defining.
	(Operator::Define): Implement.

2001-09-10  Ravi Pratap  <ravi@ximian.com>

	* class.cs (Event::Define): Make the prefixes of the accessor methods
	addOn_ and removeOn_ 

	* genericparser.cs (GenericParser::error): Overloaded method to handle the case
	of the location being passed in too. Ideally, this should go later since all
	error reporting should be done through the Report object.

	* class.cs (TypeContainer.Indexers): New property to access the list of indexers.
	(Populate): Iterate thru the indexers we have and define them too.
	(Indexer.GetMethodBuilder, .SetMethodBuilder): New members to hold the method builders
	for the get and set accessors.
	(Indexer::Define): Implement.

2001-09-09  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (Binary::Resolve): Beginning of it.  I scratched
	my previous implementation, did not work.

	* typemanager.cs: Add a couple of missing types (the longs).

	* literal.cs: Use TypeManager.bool_type instead of getting it.

	* expression.cs (EventExpr): New kind of expressions.
	(Expressio::ExprClassFromMemberInfo): finish

2001-09-08  Miguel de Icaza  <miguel@ximian.com>

	* assign.cs: Emit stores to static fields differently.

2001-09-08  Ravi Pratap  <ravi@ximian.com>

	* Merge in changes and adjust code to tackle conflicts. Backed out my
	code in Assign::Resolve ;-) 

2001-09-08  Ravi Pratap  <ravi@ximian.com>

	* cs-parser.jay (CheckAttributeTarget): Modify call to error to use
	instead Report.Error and also pass in the location.
	(CSharpParser::Lexer): New readonly property to return the reference
	to the Tokenizer object.
	(declare_local_variables): Use Report.Error with location instead of plain 
	old error.
	(CheckDef): Ditto.

	* class.cs (Operator::CheckUnaryOperator): Move into cs-parser.jay.
	(Operator.CheckBinaryOperator): Ditto.

	* cs-parser.jay (operator_declarator): Update accordingly.

	* cs-parser.jay (CheckUnaryOperator): Modify to use Report.Error
	(CheckBinaryOperator): Same here.

	* rootcontext.cs (LookupType): Add an extra lookup which simply does a lookup
	on the name without any prefixes of namespace names etc. This is because we
	already might have something already fully qualified like 
	'System.Console.WriteLine'

	* assign.cs (Resolve): Begin implementation. Stuck ;-)

2001-09-07  Ravi Pratap  <ravi@ximian.com>

	* cs-tokenizer.cs (location): Return a string which also contains
	the file name.

	* expression.cs (ElementAccess): New class for expressions of the
	type 'element access.'
	(BaseAccess): New class for expressions of the type 'base access.'
	(CheckedExpr, UnCheckedExpr): New classes for Checked and Unchecked expressions
	respectively.

	* cs-parser.jay (element_access): Implement action.
	(base_access): Implement actions.
	(checked_expression, unchecked_expression): Implement.

	* cs-parser.jay (local_variable_type): Correct and implement.
	(type_suffixes, type_suffix_list, type_suffix): Implement actions.

	* cs-tokenizer.cs (real_type_suffix): Comment out the extra getchar.

	* cs-parser.jay (rank_specifiers): Remove space while concatenating the type's
	name and the specifiers.

	* interface.cs (InterfaceAttr): New property to return the corresponding TypeAttributes

	* rootcontext.cs (CreateInterface): Use the InterfaceAttr property instead of 
	making them all public ;-)

	* cs-parser.jay (error): Remove entirely as we have an implementation in the base
	class anyways.

2001-09-07  Miguel de Icaza  <miguel@ximian.com>

	* expression.cs (ExprClassFromMemberInfo): Return FieldExpr and
	PropertyExprs.
	(FieldExpr, PropertyExprs): New resolved expressions.
	(SimpleName::MemberStaticCheck): Perform static checks for access
	to non-static fields on static methods. Maybe this should be
	generalized for MemberAccesses. 
	(SimpleName::ResolveSimpleName): More work on simple name
	resolution. 

	* cs-parser.jay (primary_expression/qualified_identifier): track
	the parameter index.

	* codegen.cs (CodeGen::Save): Catch save exception, report error.
	(EmitContext::EmitBoolExpression): Chain to expression generation
	instead of temporary hack.
	(::EmitStatementExpression): Put generic expression code generation.

	* assign.cs (Assign::Emit): Implement variable assignments to
	local variables, parameters and fields.

2001-09-06  Miguel de Icaza  <miguel@ximian.com>

	* statement.cs (Block::GetVariableInfo): New method, returns the
	VariableInfo for a variable name in a block.
	(Block::GetVariableType): Implement in terms of GetVariableInfo

	* literal.cs (IntLiteral::Emit, FloatLiteral::Emit,
	DoubleLiteral::Emit, CharLiteral::Emit, BoolLiteral::Emit): Implement

2001-09-06  Ravi Pratap  <ravi@ximian.com>

	* cs-parser.jay (operator_declaration): Continue on my quest : update
	to take attributes argument.
	(event_declaration): Ditto.
	(enum_declaration): Ditto.
	(indexer_declaration): Ditto.

	* class.cs (Operator::Operator): Update constructor accordingly.
	(Event::Event): Ditto.

	* delegate.cs (Delegate::Delegate): Same here.

	* enum.cs (Enum::Enum): Same here.

2001-09-05  Ravi Pratap  <ravi@ximian.com>

	* cs-parser.jay (CheckAttributeTarget): Update to use the right error number.

	* ../tests/cs0658.cs : New file to demonstrate error 0658.

	* attribute.cs (Attributes): New class to encapsulate all attributes which were
	being passed around as an arraylist.
	(Attributes::AddAttribute): Method to add attribute sections.

	* cs-parser.jay (opt_attributes): Modify actions to use the new Attributes class.
	(struct_declaration): Update accordingly.
	(constant_declaration): Update.
	(field_declaration): Update.
	(method_header): Update.
	(fixed_parameter): Update.
	(parameter_array): Ditto.
	(property_declaration): Ditto.
	(destructor_declaration): Ditto.

	* class.cs (Struct::Struct): Update constructors accordingly.
	(Class::Class): Ditto.
	(Field::Field): Ditto.
	(Method::Method): Ditto.
	(Property::Property): Ditto.
	(TypeContainer::OptAttribute): update property's return type.

	* interface.cs (Interface.opt_attributes): New member.
	(Interface::Interface): Update to take the extra Attributes argument.

	* parameter.cs (Parameter::Parameter): Ditto.

	* constant.cs (Constant::Constant): Ditto.

	* interface.cs (InterfaceMemberBase): New OptAttributes field.
	(InterfaceMemberBase::InterfaceMemberBase): Update constructor to take 
	the attributes as a parameter.
	(InterfaceProperty): Update constructor call.
	(InterfaceEvent): Ditto.
	(InterfaceMethod): Ditto.
	(InterfaceIndexer): Ditto.

	* cs-parser.jay (interface_indexer_declaration): Update call to constructor to 
	pass the attributes too.
	(interface_event_declaration): Ditto.
	(interface_property_declaration): Ditto.
	(interface_method_declaration): Ditto.
	(interface_declaration): Ditto.

2001-09-05  Miguel de Icaza  <miguel@ximian.com>

	* class.cs (Method::Define): Track the "static Main" definition to
	create an entry point. 

	* rootcontext.cs (RootContext::EntryPoint): MethodInfo that holds the
	EntryPoint if we find it. 

	* codegen.cs (EmitContext::EmitInvocation): Emit invocations.
	(EmitContext::ig): Make this variable public.

	* driver.cs: Make the default output file be the first file name
	with the .exe extension.  

	Detect empty compilations

	Handle various kinds of output targets.  Handle --target and
	rename -t to --dumper.

	* expression.cs, literal.cs, assign.cs, constant.cs: All `Resolve'
	methods inherited from Expression return now an Expression.  This
	will is used during the tree rewriting as we resolve them during
	semantic analysis.

	(Expression::MemberLookup): Implements the MemberLookup (7.3) from
	the spec.  Missing entirely is the information about
	accessability of elements of it.

	(Expression::ExprClassFromMemberInfo): New constructor for
	Expressions that creates a fully initialized Expression based on
	a MemberInfo that is one of Eventinfo, FieldINfo, PropertyInfo or
	a Type.

	(Invocation::Resolve): Begin implementing resolution of invocations.

	* literal.cs (StringLiteral):  Implement Emit.

2001-09-05  Ravi Pratap  <ravi@ximian.com>

	* cs-parser.jay (error): Add new modifier because we are hiding an inherited
	member.

2001-09-04  Ravi Pratap  <ravi@ximian.com>

	* cs-parser.jay (attribute_arguments): Implement actions.
	(attribute): Fix bug in production. Implement action.
	(attribute_list): Implement.
	(attribute_target): Implement.
	(attribute_target_specifier, opt_target_specifier): Implement
	(CheckAttributeTarget): New method to check if the attribute target
	is valid.
	(attribute_section): Implement.
	(opt_attributes): Implement.

	* attribute.cs : New file to handle attributes.
	(Attribute): Class to hold attribute info.

	* cs-parser.jay (opt_attribute_target_specifier): Remove production
	(attribute_section): Modify production to use 2 different rules to 
	achieve the same thing. 1 s/r conflict down !
	Clean out commented, useless, non-reducing dimension_separator rules.

	* class.cs (TypeContainer.attributes): New member to hold list
	of attributes for a type.
	(Struct::Struct): Modify to take one more argument, the attribute list.
	(Class::Class): Ditto.
	(Field::Field): Ditto.
	(Method::Method): Ditto.
	(Property::Property): Ditto.

	* cs-parser.jay (struct_declaration): Update constructor call to
	pass in the attributes too.
	(class_declaration): Ditto.
	(constant_declaration): Ditto.
	(field_declaration): Ditto.
	(method_header): Ditto.
	(fixed_parameter): Ditto.
	(parameter_array): Ditto.
	(property_declaration): Ditto.

	* constant.cs (Constant::Constant): Update constructor similarly.
	Use System.Collections.

	* parameter.cs (Parameter::Parameter): Update as above.

2001-09-02  Ravi Pratap  <ravi@ximian.com>

	* class.cs (TypeContainer::AddDelegate): New method to add a delegate.
	(TypeContainer.delegates): New member to hold list of delegates.

	* cs-parser.jay (delegate_declaration): Implement the action correctly 
	this time as I seem to be on crack ;-)

2001-09-02  Miguel de Icaza  <miguel@ximian.com>

	* rootcontext.cs (RootContext::IsNamespace): new function, used to
	tell whether an identifier represents a namespace.

	* expression.cs (NamespaceExpr): A namespace expression, used only
	temporarly during expression resolution.
	(Expression::ResolveSimpleName, ::ResolvePrimary, ::ResolveName):
	utility functions to resolve names on expressions.

2001-09-01  Miguel de Icaza  <miguel@ximian.com>

	* codegen.cs: Add hook for StatementExpressions. 

	* class.cs: Fix inverted test for static flag in methods.

2001-09-02  Ravi Pratap  <ravi@ximian.com>

	* class.cs (Operator::CheckUnaryOperator): Correct error number used
	to make it coincide with MS' number.
	(Operator::CheckBinaryOperator): Ditto.

	* ../errors/errors.txt : Remove error numbers added earlier.

	* ../errors/cs1019.cs : Test case for error # 1019

	* ../errros/cs1020.cs : Test case for error # 1020

	* cs-parser.jay : Clean out commented cruft.
	(dimension_separators, dimension_separator): Comment out. Ostensibly not
	used anywhere - non-reducing rule.
	(namespace_declarations): Non-reducing rule - comment out.

	* enum.cs (Enum::AddEnum): Rename to AddEnumMember as I was getting confused
	with TypeContainer::AddEnum.

	* delegate.cs : New file for delegate handling classes.
	(Delegate): Class for declaring delegates.

	* makefile : Update.

	* cs-parser.jay (delegate_declaration): Implement.

2001-09-01  Ravi Pratap  <ravi@che.iitm.ac.in>

	* class.cs (Event::Define): Implement.
	(Event.EventBuilder): New member.

	* class.cs (TypeContainer::Populate): Update to define all enums and events
	we have.
	(Events): New property for the events arraylist we hold. Shouldn't we move to using
	readonly fields for all these cases ?

2001-08-31  Ravi Pratap  <ravi@che.iitm.ac.in>

	* class.cs (Property): Revamp to use the convention of making fields readonly.
	Accordingly modify code elsewhere.

	* class.cs : Apply patch from Mr. Mandar <go_mono@hotmail.com> for implementing
	the Define method of the Property class.

	* class.cs : Clean up applied patch and update references to variables etc. Fix 
	trivial bug.
	(TypeContainer::Populate): Update to define all the properties we have. Also
	define all enumerations.

	* enum.cs (Define): Implement.

2001-08-31  Ravi Pratap  <ravi@che.iitm.ac.in>

	* cs-parser.jay (overloadable_operator): The semantic value is an
	enum of the Operator class.
	(operator_declarator): Implement actions.
	(operator_declaration): Implement.

	* class.cs (Operator::CheckUnaryOperator): New static method to help in checking
	validity of definitions.
	(Operator::CheckBinaryOperator): Static method to check for binary operators
	(TypeContainer::AddOperator): New method to add an operator to a type.

	* cs-parser.jay (indexer_declaration): Added line to actually call the
	AddIndexer method so it gets added ;-)

	* ../errors/errors.txt : Update to include new error numbers. Are these numbers 
	already taken care of by the MS compiler ?  

2001-08-29  Ravi Pratap  <ravi@che.iitm.ac.in>

	* class.cs (Operator): New class for operator declarations.
	(Operator::OpType): Enum for the various operators.

2001-08-29  Ravi Pratap  <ravi@che.iitm.ac.in>

	* class.cs (TypeContainer::AddIndexer): Remove FIXME comment. We
	ostensibly handle this in semantic analysis.

	* cs-parser.jay (general_catch_clause): Comment out
	(specific_catch_clauses, specific_catch_clause): Ditto.
	(opt_general_catch_clause, opt_specific_catch_clauses): Ditto
	(catch_args, opt_catch_args): New productions.
	(catch_clause): Rewrite to use the new productions above
	(catch_clauses): Modify accordingly.
	(opt_catch_clauses): New production to use in try_statement
	(try_statement): Revamp. Basically, we get rid of one unnecessary rule
	and re-write the code in the actions to extract the specific and
	general catch clauses by being a little smart ;-)

	* ../tests/try.cs : Fix. It's not 'finalize' my friend, it's 'finally' !
	Hooray, try and catch statements parse fine !

2001-08-28  Ravi Pratap  <ravi@che.iitm.ac.in>

	* statement.cs (Block::GetVariableType): Fix logic to extract the type
	string from the hashtable of variables.

	* cs-parser.jay (event_accessor_declarations): Trivial fix. Man, how did
	I end up making that mistake ;-)
	(catch_clauses): Fixed gross error which made Key and Value of the 
	DictionaryEntry the same : $1 !!

2001-08-28  Ravi Pratap  <ravi@che.iitm.ac.in>

	* cs-tokenizer.cs (initTokens): Add keywords 'add' and 'remove'

	* cs-parser.jay (event_declaration): Correct to remove the semicolon
	when the add and remove accessors are specified. 

2001-08-28  Ravi Pratap  <ravi@che.iitm.ac.in>

	* cs-parser.jay (IndexerDeclaration): New helper class to hold
	information about indexer_declarator.
	(indexer_declarator): Implement actions.
	(parsing_indexer): New local boolean used to keep track of whether
	we are parsing indexers or properties. This is necessary because 
	implicit_parameters come into picture even for the get accessor in the 
	case of an indexer.
	(get_accessor_declaration, set_accessor_declaration): Correspondingly modified.

	* class.cs (Indexer): New class for indexer declarations.
	(TypeContainer::AddIndexer): New method to add an indexer to a type.
	(TypeContainer::indexers): New member to hold list of indexers for the
	type.

2001-08-27  Ravi Pratap  <ravi@che.iitm.ac.in>

	* cs-parser.jay (add_accessor_declaration): Implement action.
	(remove_accessor_declaration): Implement action.
	(event_accessors_declaration): Implement
	(variable_declarators): swap statements for first rule - trivial.

	* class.cs (Event): New class to hold information about event
	declarations.
	(TypeContainer::AddEvent): New method to add an event to a type
	(TypeContainer::events): New member to hold list of events.

	* cs-parser.jay (event_declaration): Implement actions.

2001-08-27  Ravi Pratap  <ravi@che.iitm.ac.in>

	* cs-parser.jay (dim_separators): Implement. Make it a string
	concatenating all the commas together, just as they appear.
	(opt_dim_separators): Modify accordingly
	(rank_specifiers): Update accordingly. Basically do the same
	thing - instead, collect the brackets here.
	(opt_rank_sepcifiers): Modify accordingly.
	(array_type): Modify to actually return the complete type string
	instead of ignoring the rank_specifiers.
	(expression_list): Implement to collect the expressions
	(variable_initializer): Implement. We make it a list of expressions
	essentially so that we can handle the array_initializer case neatly too.
	(variable_initializer_list): Implement.
	(array_initializer): Make it a list of variable_initializers
	(opt_array_initializer): Modify accordingly.

	* expression.cs (New::NType): Add enumeration to help us
	keep track of whether we have an object/delegate creation
	or an array creation.
	(New:NewType, New::Rank, New::Indices, New::Initializers): New
	members to hold data about array creation.
	(New:New): Modify to update NewType
	(New:New): New Overloaded contructor for the array creation
	case.

	* cs-parser.jay (array_creation_expression): Implement to call
	the overloaded New constructor.

2001-08-26  Ravi Pratap  <ravi@che.iitm.ac.in>

	* class.cs (TypeContainer::Constructors): Return member
	constructors instead of returning null.

2001-08-26  Miguel de Icaza  <miguel@ximian.com>

	* typemanager.cs (InitCoreTypes): Initialize the various core
	types after we have populated the type manager with the user
	defined types (this distinction will be important later while
	compiling corlib.dll)

	* expression.cs, literal.cs, assign.cs, constant.cs: Started work
	on Expression Classification.  Now all expressions have a method
	`Resolve' and a method `Emit'.

	* codegen.cs, cs-parser.jay: Fixed the bug that stopped code
	generation from working.     Also add some temporary debugging
	code. 

2001-08-24  Miguel de Icaza  <miguel@ximian.com>

	* codegen.cs: Lots of code generation pieces.  This is only the
	beginning, will continue tomorrow with more touches of polish.  We
	handle the fundamentals of if, while, do, for, return.  Others are
	trickier and I need to start working on invocations soon.

	* gen-treedump.cs: Bug fix, use s.Increment here instead of
	s.InitStatement. 

	* codegen.cs (EmitContext): New struct, used during code
	emission to keep a context.   Most of the code generation will be
	here. 

	* cs-parser.jay: Add embedded blocks to the list of statements of
	this block.  So code generation proceeds in a top down fashion.

2001-08-23  Miguel de Icaza  <miguel@ximian.com>

	* statement.cs: Add support for multiple child blocks.

2001-08-22  Miguel de Icaza  <miguel@ximian.com>

	* codegen.cs (EmitCode): New function, will emit the code for a
	Block of code given a TypeContainer and its ILGenerator. 

	* statement.cs (Block): Standard public readonly optimization.
	(Block::Block constructors): Link children. 
	(Block::Child): Child Linker.
	(Block::EmitVariables): Emits IL variable declarations.

	* class.cs: Drop support for MethodGroups here, delay until
	Semantic Analysis.
	(Method::): Applied the same simplification that I did before, and
	move from Properties to public readonly fields.
	(Method::ParameterTypes): Returns the parameter types for the
	function, and implements a cache that will be useful later when I
	do error checking and the semantic analysis on the methods is
	performed.
	(Constructor::GetCallingConvention): Renamed from CallingConvetion
	and made a method, optional argument tells whether this is a class
	or a structure to apply the `has-this' bit.
	(Method::GetCallingConvention): Implement, returns the calling
	convention. 
	(Method::Define): Defines the type, a second pass is performed
	later to populate the methods.

	(Constructor::ParameterTypes): implement a cache similar to the
	one on Method::ParameterTypes, useful later when we do semantic
	analysis. 

	(TypeContainer::EmitMethod):  New method.  Emits methods.

	* expression.cs: Removed MethodGroup class from here.

	* parameter.cs (Parameters::GetCallingConvention): new method.

2001-08-21  Miguel de Icaza  <miguel@ximian.com>

	* class.cs (TypeContainer::Populate): Drop RootContext from the
	argument. 

	(Constructor::CallingConvention): Returns the calling convention.
	(Constructor::ParameterTypes): Returns the constructor parameter
	types. 

	(TypeContainer::AddConstructor): Keep track of default constructor
	and the default static constructor.

	(Constructor::) Another class that starts using `public readonly'
	instead of properties. 

	(Constructor::IsDefault): Whether this is a default constructor. 

	(Field::) use readonly public fields instead of properties also.

	(TypeContainer::TypeAttr, TypeContainer::AddConstructor): Keep
	track of static constructors;  If none is used, turn on
	BeforeFieldInit in the TypeAttributes. 

	* cs-parser.jay (opt_argument_list): now the return can be null
	for the cases where there are no arguments. 

	(constructor_declarator): If there is no implicit `base' or
	`this', then invoke the default parent constructor. 

	* modifiers.cs (MethodAttr): New static function maps a set of
	modifiers flags into a MethodAttributes enum
	(FieldAttr): renamed from `Map'.  So now we have FieldAttr,
	MethodAttr, TypeAttr to represent the various mappings where the
	modifiers are used.
	(FieldAttr): Map also `readonly' to `FieldAttributes.InitOnly' 	

2001-08-19  Miguel de Icaza  <miguel@ximian.com>

	* parameter.cs (GetParameterInfo): Fix bug where there would be no
	method arguments.

	* interface.cs (PopulateIndexer): Implemented the code generator
	for interface indexers.

2001-08-17  Miguel de Icaza  <miguel@ximian.com>

	* interface.cs (InterfaceMemberBase): Now we track the new status
	here.  

	(PopulateProperty): Implement property population.  Woohoo!  Got
	Methods and Properties going today. 

	Removed all the properties for interfaces, and replaced them with
	`public readonly' fields. 

2001-08-16  Miguel de Icaza  <miguel@ximian.com>

	* interface.cs (AddEvent, AddMethod, AddIndexer, AddProperty):
	initialize their hashtables/arraylists only when they are needed
	instead of doing this always.

	* parameter.cs: Handle refs and out parameters.

	* cs-parser.jay: Use an ArrayList to construct the arguments
	instead of the ParameterCollection, and then cast that to a
	Parameter[] array.

	* parameter.cs: Drop the use of ParameterCollection and use
	instead arrays of Parameters.

	(GetParameterInfo): Use the Type, not the Name when resolving
	types. 

2001-08-13  Miguel de Icaza  <miguel@ximian.com>

	* parameter.cs: Eliminate the properties Name, Type and ModFlags,
	and instead use public readonly fields.

	* class.cs: Put back walking code for type containers.

2001-08-11  Miguel de Icaza  <miguel@ximian.com>

	* class.cs (MakeConstant): Code to define constants.

	* rootcontext.cs (LookupType): New function.  Used to locate types 


2001-08-08  Miguel de Icaza  <miguel@ximian.com>

	* rootcontext.cs: OH MY!  My trick works!   It is amazing how nice
	this System.Reflection code is.  Kudos to Microsoft

	* typemanager.cs: Implement a type cache and avoid loading all
	types at boot time.  Wrap in LookupType the internals.  This made
	the compiler so much faster.  Wow.  I rule!

	* driver.cs: Make sure we always load mscorlib first (for
	debugging purposes, nothing really important).

	* Renamespaced things that were on `CSC' to `CIR'.  Maybe I should
	have moved to `CSC' rather than `CIR'.  Oh man!  The confussion!  

	* rootcontext.cs: Lookup types on their namespace;  Lookup types
	on namespaces that have been imported using the `using' keyword.

	* class.cs (TypeContainer::TypeAttr): Virtualize.
	(Class::TypeAttr): Return attributes suitable for this bad boy.
	(Struct::TypeAttr): ditto.
	Handle nested classes.
	(TypeContainer::) Remove all the type visiting code, it is now
	replaced with the rootcontext.cs code

	* rootcontext.cs (GetClassBases): Added support for structs. 

2001-08-06  Miguel de Icaza  <miguel@ximian.com>

	* interface.cs, statement.cs, class.cs, parameter.cs,
	rootcontext.cs, gen-treedump.cs, enum.cs, cs-parse.jay:
	Drop use of TypeRefs, and use strings instead.

2001-08-04  Miguel de Icaza  <miguel@ximian.com>

	* rootcontext.cs: 

	* class.cs (Struct::Struct): set the SEALED flags after
	checking the modifiers.
	(TypeContainer::TypeAttr): new property, returns the
	TypeAttributes for a class.  

	* cs-parser.jay (type_list): Oops, list production was creating a
	new list of base types.

	* rootcontext.cs (StdLib): New property.
	(GetInterfaceTypeByName): returns an interface by type name, and
	encapsulates error handling here.
	(GetInterfaces): simplified.
	(ResolveTree): Encapsulated all the tree resolution here.
	(CreateClass, GetClassBases, GetInterfaceOrClass): Create class
	types. 

	* driver.cs: Add support for --nostdlib, to avoid loading the
	default assemblies.
	(Main): Do not put tree resolution here. 

	* rootcontext.cs: Beginning of the class resolution.

2001-08-03  Miguel de Icaza  <miguel@ximian.com>

	* rootcontext.cs: Provide better error reporting. 

	* cs-parser.jay (interface_base): set our $$ to be interfaces.

	* rootcontext.cs (CreateInterface): Handle the case where there
	are no parent interfaces.

	(CloseTypes): Routine to flush types at the end.
	(CreateInterface): Track types.
	(GetInterfaces): Returns an array of Types from the list of
	defined interfaces.

	* typemanager.c (AddUserType): Mechanism to track user types (puts
	the type on the global type hash, and allows us to close it at the
	end). 

2001-08-02  Miguel de Icaza  <miguel@ximian.com>

	* tree.cs: Removed RecordType, added RecordClass, RecordStruct and
	RecordInterface instead.

	* cs-parser.jay: Updated to reflect changes above.

	* decl.cs (Definition): Keep track of the TypeBuilder type that
	represents this type here.  Not sure we will use it in the long
	run, but wont hurt for now.

	* driver.cs: Smaller changes to accomodate the new code.

	Call ResolveInterfaceBases, Call ResolveClassBases, Save assembly
	when done. 

	* rootcontext.cs (CreateInterface):  New method, used to create
	the System.TypeBuilder type for interfaces.
	(ResolveInterfaces): new entry point to resolve the interface
	hierarchy. 
	(CodeGen): Property, used to keep track of the code generator.

2001-07-26  Miguel de Icaza  <miguel@ximian.com>

	* cs-parser.jay: Add a second production for delegate_declaration
	with `VOID'.

	(enum_body): Put an opt_comma here instead of putting it on
	enum_body or enum_member_declarations so we can handle trailing
	commas on enumeration members.  Gets rid of a shift/reduce.

	(type_list): Need a COMMA in the middle.

	(indexer_declaration): Tell tokenizer to recognize get/set

	* Remove old targets.

	* Re-add the parser target.

2001-07-13  Simon Cozens <simon@simon-cozens.org>

	* cs-parser.jay: Add precendence rules for a number of operators
	ot reduce the number of shift/reduce conflicts in the grammar.

2001-07-17  Miguel de Icaza  <miguel@ximian.com>

	* tree.cs: moved IGenerator interface and renamed it to ITreeDump
	and put it here.

	Get rid of old crufty code.

	* rootcontext.cs: Use this to keep track of the parsed
	representation and the defined types available to the program. 

	* gen-treedump.cs: adjust for new convention.

	* type.cs: Split out the type manager, and the assembly builder
	from here. 

	* typemanager.cs: the type manager will live here now.

	* cil-codegen.cs: And the code generator here. 

2001-07-14  Sean MacIsaac  <macisaac@ximian.com>

	* makefile: Fixed up for easy making.

2001-07-13  Simon Cozens <simon@simon-cozens.org>

	* cs-parser.jay (rank_specifier): Remove a conflict by reordering
	the 

	(unary_expression): Expand pre_increment_expression and
	post_decrement_expression to reduce a shift/reduce.

2001-07-11  Simon Cozens

	* cs-tokenizer.cs: Hex numbers should begin with a 0.

	Improve allow_keyword_as_indent name.

2001-06-19  Miguel de Icaza  <miguel@ximian.com>

	* Adjustments for Beta2. 

2001-06-13  Miguel de Icaza  <miguel@ximian.com>

	* decl.cs: Added `Define' abstract method.
	(InTransit): new property, used to catch recursive definitions. 

	* interface.cs: Implement `Define'. 

	* modifiers.cs: Map Modifiers.constants to
	System.Reflection.TypeAttribute flags.

	* class.cs: Keep track of types and user-defined types.
	(BuilderInit): New method for creating an assembly
	(ResolveType): New function to launch the resolution process, only
	used by interfaces for now.

	* cs-parser.jay: Keep track of Classes, Structs and Interfaces
	that are inserted into the name space. 

2001-06-08  Miguel de Icaza  <miguel@ximian.com>

	* ARGH.  I have screwed up my tree so many times due to the use of
	rsync rather than using CVS.  Going to fix this at once. 

	* driver.cs: Objetify driver.  Load assemblies, use assemblies to
	load types.

2001-06-07  Miguel de Icaza  <miguel@ximian.com>

	* Experiment successful: Use System.Type rather that our own
	version of Type.  

2001-05-25  Miguel de Icaza  <miguel@ximian.com>

	* cs-parser.jay: Removed nsAliases from here.

	Use new namespaces, handle `using XXX;' 

	* namespace.cs: Reimplemented namespace handling, use a recursive
	definition of the class.  Now we can keep track of using clauses
	and catch invalid using clauses.

2001-05-24  Miguel de Icaza  <miguel@ximian.com>

	* gen-treedump.cs: Adapted for all the renaming.

	* expression.cs (Expression): this class now has a Type property
	which returns an expression Type.

	(Probe::, New::, TypeOf::, SizeOf::, Constant::): renamed from
	`Type', as this has a different meaning now in the base

2001-05-22  Miguel de Icaza  <miguel@ximian.com>

	* interface.cs, class.cs: Removed from all the sources the
	references to signature computation, as we can not do method
	signature computation during the parsing time, as we are not
	trying to solve at that point distinguishing:

	class X {
		void a (Blah x) {}
		void a (NS.Blah x) {}
	}

	Which depending on the context might be valid or not, as we do not
	know if Blah is the same thing as NS.Blah at that point.

	* Redid everything so the code uses TypeRefs now instead of
	Types.  TypeRefs are just temporary type placeholders, that need
	to be resolved.  They initially have a pointer to a string and the
	current scope in which they are used.  This is used later by the
	compiler to resolve the reference to an actual Type. 

	* DeclSpace is no longer a CIR.Type, and neither are
	TypeContainers (Class and Struct) nor Interfaces nor Enums.  They
	are all DeclSpaces, but no Types. 

	* type.cs (TypeRefManager): This implements the TypeRef manager,
	which keeps track of all the types that need to be resolved after
	the parsing has finished. 

2001-05-13  Miguel de Icaza  <miguel@ximian.com>

	* ARGH.  We are going to have to store `foreach' as a class rather
	than resolving it, as we need to verify error 1579 after name
	resolution.   *OR* we could keep a flag that says `This request to
	IEnumerator comes from a foreach statement' which we can then use
	to generate the error.

2001-05-10  Miguel de Icaza  <miguel@ximian.com>

	* class.cs (TypeContainer.AddMethod): we now add methods to the
	MethodGroup instead of the method hashtable.  

	* expression.cs: Add MethodGroup abstraction, which gets us one
	step closer to the specification in the way we handle method
	declarations.  

	* cs-parser.jay (primary_expression): qualified_identifier now
	tried to match up an identifier to a local variable reference or
	to a parameter reference.

	current_local_parameters is now a parser global variable that
	points to the current parameters for the block, used during name
	lookup.

	(property_declaration): Now creates an implicit `value' argument to
	the set accessor.

2001-05-09  Miguel de Icaza  <miguel@ximian.com>

	* parameter.cs: Do not use `param' arguments as part of the
	signature, per the spec.

2001-05-08  Miguel de Icaza  <miguel@ximian.com>

	* decl.cs: Base class for classes, structs and interfaces.  This
	is the "Declaration Space" 

	* cs-parser.jay: Use CheckDef for checking declaration errors
	instead of having one on each function.

	* class.cs: Factor out some code for handling error handling in
	accordance to the "Declarations" section in the "Basic Concepts"
	chapter in the ECMA C# spec.

	* interface.cs: Make all interface member classes derive from
	InterfaceMemberBase.

2001-05-07  Miguel de Icaza  <miguel@ximian.com>

	* Many things: all interfaces are parsed and generated in
	gen-treedump.  Support for member variables, constructors,
	destructors, properties, constants is there.

	Beginning of the IL backend, but very little done, just there for
	testing purposes. 

2001-04-29  Miguel de Icaza  <miguel@ximian.com>

	* cs-parser.jay: Fix labeled statement.

	* cs-tokenizer.cs (escape): Escape " and ' always.
	ref_line, ref_name: keep track of the line/filename as instructed
	by #line by the compiler.
	Parse #line.

2001-04-27  Miguel de Icaza  <miguel@ximian.com>

	* System.CodeDOM/CodeBinaryOperatorExpression.cs: Rearrange enum
	to match the values in System.CodeDOM.

	Divid renamed to Divide.

	* System.CodeDOM/CodeForLoopStatement.cs: Always have valid
	statements. 
	(Statements.set): remove.

	* System.CodeDOM/CodeCatchClause.cs: always have a valid
	statements. 

	* System.CodeDOM/CodeIfStatement.cs: trueStatements and
	falseStatements always have valid values. 

	* cs-parser.jay: Use System.CodeDOM now.

