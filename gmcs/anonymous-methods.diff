Index: report.cs
===================================================================
--- report.cs	(revision 63019)
+++ report.cs	(working copy)
@@ -634,6 +634,10 @@
 			: base (message)
 		{
 		}
+
+		public InternalErrorException (string message, params object[] args)
+			: base (String.Format (message, args))
+		{ }
 	}
 
 	/// <summary>
Index: generic.cs
===================================================================
--- generic.cs	(revision 63019)
+++ generic.cs	(working copy)
@@ -151,11 +151,14 @@
 		}
 
 		public override string TypeParameter {
-			get {
-				return name;
-			}
+			get { return name; }
 		}
 
+		public Constraints Clone ()
+		{
+			return new Constraints (name, constraints, loc);
+		}
+
 		GenericParameterAttributes attrs;
 		TypeExpr class_constraint;
 		ArrayList iface_constraints;
@@ -739,7 +742,7 @@
 						TypeManager.CSharpName (mparam), TypeManager.CSharpSignature (mb));
 					return false;
 				}
-			} else if (DeclSpace is Iterator) {
+			} else if (DeclSpace is CompilerGeneratedClass) {
 				TypeParameter[] tparams = DeclSpace.TypeParameters;
 				Type[] types = new Type [tparams.Length];
 				for (int i = 0; i < tparams.Length; i++)
@@ -2622,7 +2625,7 @@
 
 				Argument a = (Argument) arguments [i];
 				if ((a.Expr is NullLiteral) || (a.Expr is MethodGroupExpr) ||
-				    (a.Expr is AnonymousMethod))
+				    (a.Expr is AnonymousMethodExpression))
 					continue;
 
 				arg_types [i] = a.Type;
Index: parameter.cs
===================================================================
--- parameter.cs	(revision 63019)
+++ parameter.cs	(working copy)
@@ -665,7 +665,7 @@
 			}
 		}
 
-		Parameter this [int pos]
+		public Parameter this [int pos]
 		{
 			get {
 				if (pos >= count && (HasArglist || HasParams)) {
Index: ecore.cs
===================================================================
--- ecore.cs	(revision 63019)
+++ ecore.cs	(working copy)
@@ -4011,6 +4011,7 @@
 	public class TemporaryVariable : Expression, IMemoryLocation
 	{
 		LocalInfo li;
+		Variable var;
 		
 		public TemporaryVariable (Type type, Location loc)
 		{
@@ -4030,62 +4031,45 @@
 				return null;
 			
 			AnonymousContainer am = ec.CurrentAnonymousMethod;
-			if ((am != null) && am.IsIterator)
-				ec.CaptureVariable (li);
+			if ((am != null) && am.IsIterator) {
+				var = ec.CaptureVariable (li);
+				type = var.Type;
+			}
 			
 			return this;
 		}
+
+		public Variable Variable {
+			get { return var != null ? var : li.Variable; }
+		}
 		
 		public override void Emit (EmitContext ec)
 		{
-			ILGenerator ig = ec.ig;
-			
-			if (li.FieldBuilder != null) {
-				ig.Emit (OpCodes.Ldarg_0);
-				ig.Emit (OpCodes.Ldfld, li.FieldBuilder);
-			} else {
-				ig.Emit (OpCodes.Ldloc, li.LocalBuilder);
-			}
+			Variable.EmitInstance (ec);
+			Variable.Emit (ec);
 		}
 		
 		public void EmitLoadAddress (EmitContext ec)
 		{
-			ILGenerator ig = ec.ig;
-			
-			if (li.FieldBuilder != null) {
-				ig.Emit (OpCodes.Ldarg_0);
-				ig.Emit (OpCodes.Ldflda, li.FieldBuilder);
-			} else {
-				ig.Emit (OpCodes.Ldloca, li.LocalBuilder);
-			}
+			Variable.EmitInstance (ec);
+			Variable.EmitAddressOf (ec);
 		}
 		
 		public void Store (EmitContext ec, Expression right_side)
 		{
-			if (li.FieldBuilder != null)
-				ec.ig.Emit (OpCodes.Ldarg_0);
-			
+			Variable.EmitInstance (ec);
 			right_side.Emit (ec);
-			if (li.FieldBuilder != null) {
-				ec.ig.Emit (OpCodes.Stfld, li.FieldBuilder);
-			} else {
-				ec.ig.Emit (OpCodes.Stloc, li.LocalBuilder);
-			}
+			Variable.EmitAssign (ec);
 		}
 		
 		public void EmitThis (EmitContext ec)
 		{
-			if (li.FieldBuilder != null) {
-				ec.ig.Emit (OpCodes.Ldarg_0);
-			}
+			Variable.EmitInstance (ec);
 		}
 		
-		public void EmitStore (ILGenerator ig)
+		public void EmitStore (EmitContext ec)
 		{
-			if (li.FieldBuilder != null)
-				ig.Emit (OpCodes.Stfld, li.FieldBuilder);
-			else
-				ig.Emit (OpCodes.Stloc, li.LocalBuilder);
+			Variable.EmitAssign (ec);
 		}
 		
 		public void AddressOf (EmitContext ec, AddressOp mode)
Index: class.cs
===================================================================
--- class.cs	(revision 63019)
+++ class.cs	(working copy)
@@ -429,8 +429,8 @@
 		// Holds the operators
 		MemberCoreArrayList operators;
 
-		// Holds the iterators
-		ArrayList iterators;
+		// Holds the compiler generated classes
+		ArrayList compiler_generated;
 
 		//
 		// Pointers to the default constructor and the default static constructor
@@ -772,12 +772,14 @@
 			operators.Add (op);
 		}
 
-		public void AddIterator (Iterator i)
+		public void AddCompilerGeneratedClass (CompilerGeneratedClass c)
 		{
-			if (iterators == null)
-				iterators = new ArrayList ();
+			Report.Debug (64, "ADD COMPILER GENERATED CLASS", this, c);
 
-			iterators.Add (i);
+			if (compiler_generated == null)
+				compiler_generated = new ArrayList ();
+
+			compiler_generated.Add (c);
 		}
 
 		public override void ApplyAttributeBuilder (Attribute a, CustomAttributeBuilder cb)
@@ -822,9 +824,9 @@
 			}
 		}
 
-		public ArrayList Iterators {
+		public ArrayList CompilerGenerated {
 			get {
-				return iterators;
+				return compiler_generated;
 			}
 		}
 
@@ -1202,7 +1204,7 @@
 			// Let's do it as soon as possible, since code below can call DefineType() on classes
 			// that depend on us to be populated before they are.
 			//
-			if (!(this is Iterator))
+			if (!(this is Iterator) && !(this is CompilerGeneratedClass))
 				RootContext.RegisterOrder (this); 
 
 			if (base_type != null) {
@@ -1541,14 +1543,13 @@
 					part.member_cache = member_cache;
 			}
 #endif
-			if (iterators != null) {
-				foreach (Iterator iterator in iterators) {
-					if (iterator.DefineType () == null)
+			if (compiler_generated != null) {
+				foreach (CompilerGeneratedClass c in compiler_generated) {
+					if (c.DefineType () == null)
 						return false;
 				}
-
-				foreach (Iterator iterator in iterators) {
-					if (!iterator.DefineMembers ())
+				foreach (CompilerGeneratedClass c in compiler_generated) {
+					if (!c.DefineMembers ())
 						return false;
 				}
 			}
@@ -1564,9 +1565,9 @@
 
 		public override bool Define ()
 		{
-			if (iterators != null) {
-				foreach (Iterator iterator in iterators) {
-					if (!iterator.Define ())
+			if (compiler_generated != null) {
+				foreach (CompilerGeneratedClass c in compiler_generated) {
+					if (!c.Define ())
 						return false;
 				}
 			}
@@ -2239,7 +2240,7 @@
 
 			if (default_static_constructor != null)
 				default_static_constructor.Emit ();
-			
+
 			if (methods != null){
 				foreach (Method m in methods)
 					m.Emit ();
@@ -2282,9 +2283,10 @@
 				if (pending.VerifyPendingMethods ())
 					return;
 
-			if (iterators != null)
-				foreach (Iterator iterator in iterators)
-					iterator.EmitType ();
+			if (compiler_generated != null) {
+				foreach (CompilerGeneratedClass c in compiler_generated)
+					c.EmitType ();
+			}
 		}
 		
 		public override void CloseType ()
@@ -2324,9 +2326,9 @@
 				foreach (Delegate d in Delegates)
 					d.CloseType ();
 
-			if (Iterators != null)
-				foreach (Iterator i in Iterators)
-					i.CloseType ();
+			if (CompilerGenerated != null)
+				foreach (CompilerGeneratedClass c in CompilerGenerated)
+					c.CloseType ();
 			
 			types = null;
 			properties = null;
@@ -2341,7 +2343,7 @@
 			events = null;
 			indexers = null;
 			operators = null;
-			iterators = null;
+			compiler_generated = null;
 			default_constructor = null;
 			default_static_constructor = null;
 			type_bases = null;
@@ -3709,7 +3711,7 @@
 
 			Iterator iterator = tc as Iterator;
 			if (iterator != null)
-				ec.CurrentAnonymousMethod = iterator.Host;
+				ec.CurrentAnonymousMethod = iterator;
 
 			return ec;
 		}
@@ -4135,10 +4137,10 @@
 			// Setup iterator if we are one
 			//
 			if ((ModFlags & Modifiers.METHOD_YIELDS) != 0){
-				Iterator iterator = new Iterator (
-					this, Parent, GenericMethod, ModFlags);
+				Iterator iterator = Iterator.CreateIterator (
+					this, (TypeContainer) Parent, GenericMethod, ModFlags);
 
-				if (!iterator.DefineIterator ())
+				if (iterator == null)
 					return false;
 			}
 
@@ -6285,9 +6287,10 @@
 				// Setup iterator if we are one
 				//
 				if (yields) {
-					Iterator iterator = new Iterator (this, Parent as TypeContainer, null, ModFlags);
-					
-					if (!iterator.DefineIterator ())
+					Iterator iterator = Iterator.CreateIterator (
+						this, (TypeContainer) Parent, null, ModFlags);
+
+					if (iterator == null)
 						return null;
 				}
 
@@ -7323,10 +7326,10 @@
 				// Setup iterator if we are one
 				//
 				if ((ModFlags & Modifiers.METHOD_YIELDS) != 0){
-					Iterator iterator = new Iterator (
-						Get, Parent, null, ModFlags);
+					Iterator iterator = Iterator.CreateIterator (
+						Get, (TypeContainer) Parent, null, ModFlags);
 
-					if (!iterator.DefineIterator ())
+					if (iterator == null)
 						return false;
 				}
 			}
Index: decl.cs
===================================================================
--- decl.cs	(revision 63019)
+++ decl.cs	(working copy)
@@ -525,6 +525,7 @@
 				caching_flags |= Flags.ClsCompliantAttributeTrue;
 				return true;
 			}
+
 			return false;
 		}
 
Index: delegate.cs
===================================================================
--- delegate.cs	(revision 63019)
+++ delegate.cs	(working copy)
@@ -816,8 +816,8 @@
 			
 			Expression e = a.Expr;
 
-			if (e is AnonymousMethod && RootContext.Version != LanguageVersion.ISO_1)
-				return ((AnonymousMethod) e).Compatible (ec, type);
+			if (e is AnonymousMethodExpression && RootContext.Version != LanguageVersion.ISO_1)
+				return ((AnonymousMethodExpression) e).Compatible (ec, type);
 
 			MethodGroupExpr mg = e as MethodGroupExpr;
 			if (mg != null)
Index: iterators.cs
===================================================================
--- iterators.cs	(revision 63019)
+++ iterators.cs	(working copy)
@@ -71,10 +71,13 @@
 		
 		public override bool Resolve (EmitContext ec)
 		{
+			Report.Debug (64, "RESOLVE YIELD", this, expr, expr.GetType ());
 			expr = expr.Resolve (ec);
 			if (expr == null)
 				return false;
 
+			Report.Debug (64, "RESOLVE YIELD #1", this, expr, expr.GetType ());
+
 			if (!CheckContext (ec, loc, false))
 				return false;
 
@@ -119,13 +122,13 @@
 		}
 	}
 
-	public class Iterator : Class {
+	public class Iterator : AnonymousContainer {
 		protected ToplevelBlock original_block;
 		protected ToplevelBlock block;
 
-		Type original_iterator_type;
+		protected readonly Type original_iterator_type;
+		protected readonly bool is_enumerable;
 		TypeExpr iterator_type_expr;
-		bool is_enumerable;
 		public readonly bool IsStatic;
 
 		//
@@ -147,7 +150,7 @@
 		IMethodData orig_method;
 
 		MethodInfo dispose_method;
-		MoveNextMethod move_next_method;
+		Method move_next_method;
 		Constructor ctor;
 		CaptureContext cc;
 
@@ -164,8 +167,6 @@
 			Running
 		}
 
-		static int proxy_count;
-
 		public void EmitYieldBreak (ILGenerator ig)
 		{
 			ig.Emit (OpCodes.Ldarg_0);
@@ -174,7 +175,7 @@
 			ig.Emit (OpCodes.Br, move_next_error);
 		}
 
-		public void EmitMoveNext (EmitContext ec)
+		protected void EmitMoveNext (EmitContext ec)
 		{
 			ILGenerator ig = ec.ig;
 
@@ -336,33 +337,18 @@
 			point.Define (ig);
 		}
 
-		private static MemberName MakeProxyName (string name, GenericMethod generic, Location loc)
-		{
-			int pos = name.LastIndexOf ('.');
-			if (pos > 0)
-				name = name.Substring (pos + 1);
-
-			string proxy_name = "<" + name + ">__" + (proxy_count++);
-
-			if (generic != null) {
-				TypeArguments args = new TypeArguments (loc);
-				foreach (TypeParameter tparam in generic.CurrentTypeParameters)
-					args.Add (new SimpleName (tparam.Name, loc));
-				return new MemberName (proxy_name, args, loc);
-			} else
-				return new MemberName (proxy_name, loc);
-		}
-
 		//
 		// Our constructor
 		//
-		public Iterator (IMethodData m_container, DeclSpace parent, GenericMethod generic,
-				 int modifiers)
-			: base (parent.NamespaceEntry, parent,
-				MakeProxyName (m_container.MethodName.Name, generic, m_container.Location),
-				(modifiers & Modifiers.UNSAFE) | Modifiers.PRIVATE, null)
+		public Iterator (IMethodData m_container, TypeContainer parent, GenericMethod generic,
+				 int modifiers, Type iterator_type, bool is_enumerable)
+			: base (parent, generic, m_container.ParameterInfo, m_container.Block,
+				(modifiers & Modifiers.UNSAFE) | Modifiers.PRIVATE,
+				m_container.Location)
 		{
 			this.orig_method = m_container;
+			this.original_iterator_type = iterator_type;
+			this.is_enumerable = is_enumerable;
 
 			this.generic_method = generic;
 			this.container = ((TypeContainer) parent).PartialContainer;
@@ -370,34 +356,19 @@
 			this.original_block = orig_method.Block;
 			this.block = new ToplevelBlock (orig_method.Block, parameters, orig_method.Location);
 
-			if (generic != null) {
-				ArrayList constraints = new ArrayList ();
-				foreach (TypeParameter tparam in generic.TypeParameters)
-					constraints.Add (tparam.Constraints);
-
-				SetParameterInfo (constraints);
-			}
-
 			IsStatic = (modifiers & Modifiers.STATIC) != 0;
 		}
 
-		public AnonymousContainer Host {
-			get { return move_next_method; }
+		public override ConstructorInfo Constructor {
+			get { return ctor.ConstructorBuilder; }
 		}
 
-		public bool DefineIterator ()
+		protected bool DefineIterator ()
 		{
 			ec = new EmitContext (this, this, Location, null, null, ModFlags);
-			ec.CurrentAnonymousMethod = move_next_method;
+			ec.CurrentAnonymousMethod = this;
 			ec.InIterator = true;
 
-			if (!CheckType ()) {
-				Report.Error (1624, Location,
-					"The body of `{0}' cannot be an iterator block because `{1}' is not an iterator interface type",
-					orig_method.GetSignatureForError (), TypeManager.CSharpName (orig_method.ReturnType));
-				return false;
-			}
-
 			for (int i = 0; i < original_parameters.Count; i++){
 				Parameter.Modifier mod = original_parameters.ParameterModifier (i);
 				if ((mod & (Parameter.Modifier.REF | Parameter.Modifier.OUT)) != 0){
@@ -423,12 +394,47 @@
 			else
 				this_type = container.TypeBuilder;
 
-			container.AddIterator (this);
-
 			orig_method.Block = block;
+
+			return Resolve (ec);
+		}
+
+		public override bool Resolve (EmitContext ec)
+		{
+			if (!CreateMethodHost (ec))
+				return false;
+
 			return true;
 		}
 
+		protected override bool CreateMethodHost (EmitContext ec)
+		{
+			Report.Debug (64, "ITERATOR CREATE METHOD HOST", this, Block);
+
+			move_next_method = new Method (
+				this, null, TypeManager.system_boolean_expr,
+				Modifiers.PUBLIC, false,
+				new MemberName ("MoveNext", Location),
+				Parameters.EmptyReadOnlyParameters, null);
+
+			move_next_method.Block = Block;
+			AddMethod (move_next_method);
+
+			MoveNextStatement inline = new MoveNextStatement (this, Location);
+			Block.AddStatement (inline);
+
+			return true;
+		}
+
+		public override CompilerGeneratedClass CreateScopeType (ScopeInfo scope)
+		{
+			return this;
+		}
+
+		public override bool IsIterator {
+			get { return true; }
+		}
+
 		MethodInfo FetchMethodDispose ()
 		{
 			MemberList dispose_list;
@@ -447,7 +453,7 @@
 		protected override bool DoDefineMembers ()
 		{
 			ec.InIterator = true;
-			ec.CurrentAnonymousMethod = move_next_method;
+			ec.CurrentAnonymousMethod = this;
 			ec.capture_context = cc;
 
 			if (!base.DoDefineMembers ())
@@ -457,6 +463,8 @@
 			if (dispose_method == null)
 				return false;
 
+			Report.Debug (64, "ITERATOR DEFINE MEMBERS", this);
+
 			return true;
 		}
 
@@ -466,7 +474,7 @@
 				return false;
 
 			ec.InIterator = true;
-			ec.CurrentAnonymousMethod = move_next_method;
+			ec.CurrentAnonymousMethod = this;
 			ec.capture_context = cc;
 
 			ec.TypeContainer = ec.TypeContainer.Parent;
@@ -476,7 +484,7 @@
 			else
 				ec.ContainerType = ec.TypeContainer.TypeBuilder;
 
-			ec.ig = move_next_method.method.MethodBuilder.GetILGenerator ();
+			// ec.ig = move_next_method.method.MethodBuilder.GetILGenerator ();
 
 			if (!ctor.Define ())
 				return false;
@@ -489,38 +497,13 @@
 			if (!ec.ResolveTopBlock (null, block, parameters, orig_method, out unreachable))
 				return false;
 
-			original_block.CompleteContexts ();
+			original_block.CompleteContexts (ec);
 
 			cc.EmitAnonymousHelperClasses (ec);
 
-			return true;
-		}
+			ComputeMethodHost ();
 
-		TypeExpr InflateType (Type it)
-		{
-			if (generic_method == null)
-				return new TypeExpression (it, Location);
-
-			if (it.IsGenericParameter && (it.DeclaringMethod != null)) {
-				int pos = it.GenericParameterPosition;
-				it = CurrentTypeParameters [pos].Type;
-			} else if (it.IsGenericType) {
-				Type[] args = it.GetGenericArguments ();
-
-				TypeArguments inflated = new TypeArguments (Location);
-				foreach (Type t in args)
-					inflated.Add (InflateType (t));
-
-				return new ConstructedType (it, inflated, Location);
-			} else if (it.IsArray) {
-				TypeExpr et_expr = InflateType (it.GetElementType ());
-				int rank = it.GetArrayRank ();
-
-				Type et = et_expr.ResolveAsTypeTerminal (ec, false).Type;
-				it = et.MakeArrayType (rank);
-			}
-
-			return new TypeExpression (it, Location);
+			return DefineMembers ();
 		}
 
 		Parameter InflateParameter (Parameter param)
@@ -587,11 +570,6 @@
 			else
 				current_type = new TypeExpression (TypeBuilder, Location);
 
-			if (IsGeneric) {
-				foreach (TypeParameter tparam in TypeParameters)
-					tparam.InflateConstraints (current_type.Type);
-			}
-
 			parameters = InflateParameters (original_parameters, ec);
 			if (!parameters.Resolve (ec)) {
 				// TODO:
@@ -600,7 +578,6 @@
 			Define_Fields ();
 			Define_Current (false);
 			Define_Current (true);
-			Define_MoveNext ();
 			Define_Reset ();
 			Define_Dispose ();
 
@@ -622,8 +599,8 @@
 
 		void Create_Block ()
 		{
-			original_block.SetHaveAnonymousMethods (Location, move_next_method);
-			block.SetHaveAnonymousMethods (Location, move_next_method);
+			original_block.SetHaveAnonymousMethods (Location, this);
+			block.SetHaveAnonymousMethods (Location, this);
 
 			cc = original_block.CaptureContext;
 
@@ -634,7 +611,7 @@
 				Type t = this_type;
 				args.Add (new Argument (
 					new ThisParameterReference (t, Location)));
-				cc.CaptureThis (move_next_method);
+				cc.CaptureThis (this);
 			}
 
 			args.Add (new Argument (new BoolLiteral (false, Location)));
@@ -647,7 +624,11 @@
 				args.Add (new Argument (
 					new SimpleParameterReference (t, first + i, Location)));
 
-				cc.AddParameterToContext (move_next_method, name, inflated, first + i);
+				Report.Debug (64, "ITERATOR ADD PARAMETER", this, i, t, name,
+					      inflated);
+
+				cc.AddParameterToContext (
+					this, parameters [i], first + i, Location);
 			}
 
 			TypeExpr proxy_type;
@@ -723,7 +704,8 @@
 				new SetState (this, State.Running, Location),
 				Location));
 
-			ctor.Block.AddStatement (new InitScope (this, Location));
+			ExpressionStatement init_scope = GetScopeInitializer (Location);
+			ctor.Block.AddStatement (new StatementExpression (init_scope));
 		}
 
 		Statement Create_ThrowInvalidOperation ()
@@ -778,17 +760,6 @@
 			AddProperty (current);
 		}
 
-		void Define_MoveNext ()
-		{
-			move_next_method = new MoveNextMethod (this, Location);
-
-			original_block.ReParent (block, move_next_method);
-
-			move_next_method.CreateMethod (ec);
-
-			AddMethod (move_next_method.method);
-		}
-
 		void Define_GetEnumerator (bool is_generic)
 		{
 			MemberName left;
@@ -820,7 +791,7 @@
 			get_enumerator.Block = new ToplevelBlock (
 				block, parameters, Location);
 
-			get_enumerator.Block.SetHaveAnonymousMethods (Location, move_next_method);
+			get_enumerator.Block.SetHaveAnonymousMethods (Location, this);
 
 			Expression ce = new MemberAccess (
 				new SimpleName ("System.Threading.Interlocked", Location),
@@ -934,7 +905,7 @@
 
 			public override void Emit (EmitContext ec)
 			{
-				ec.CurrentAnonymousMethod = iterator.move_next_method;
+				ec.CurrentAnonymousMethod = iterator;
 
 				LocalTemporary dummy = null;
 				
@@ -996,61 +967,6 @@
 			}
 		}
 
-		protected class MoveNextMethod : AnonymousContainer
-		{
-			Iterator iterator;
-
-			public MoveNextMethod (Iterator iterator, Location loc)
-				: base (iterator.parameters, iterator.original_block, loc)
-			{
-				this.iterator = iterator;
-			}
-
-			protected override bool CreateMethodHost (EmitContext ec)
-			{
-				method = new Method (
-					iterator, null, TypeManager.system_boolean_expr,
-					Modifiers.PUBLIC, false, new MemberName ("MoveNext", loc),
-					Parameters.EmptyReadOnlyParameters, null);
-
-				method.Block = Block;
-
-				MoveNextStatement inline = new MoveNextStatement (iterator, loc);
-				Block.AddStatement (inline);
-
-				return true;
-			}
-
-			public bool CreateMethod (EmitContext ec)
-			{
-				return CreateMethodHost (ec);
-			}
-
-			public override Iterator Iterator {
-				get { return iterator; }
-			}
-
-			public void ComputeHost ()
-			{
-				ComputeMethodHost ();
-			}
-			
-			public override bool IsIterator {
-				get { return true; }
-			}
-
-			public override void CreateScopeType (EmitContext ec, ScopeInfo scope)
-			{
-				scope.ScopeTypeBuilder = iterator.TypeBuilder;
-				scope.ScopeConstructor = iterator.ctor.ConstructorBuilder;
-			}
-
-			public override void Emit (EmitContext ec)
-			{
-				throw new InternalErrorException ();
-			}
-		}
-
 		protected class MoveNextStatement : Statement {
 			Iterator iterator;
 
@@ -1067,8 +983,7 @@
 
 			protected override void DoEmit (EmitContext ec)
 			{
-				iterator.move_next_method.ComputeHost ();
-				ec.CurrentAnonymousMethod = iterator.move_next_method;
+				ec.CurrentAnonymousMethod = iterator;
 				ec.InIterator = true;
 
 				iterator.EmitMoveNext (ec);
@@ -1151,27 +1066,6 @@
 			}
 		}
 
-		protected class InitScope : Statement
-		{
-			Iterator iterator;
-
-			public InitScope (Iterator iterator, Location loc)
-			{
-				this.iterator = iterator;
-				this.loc = loc;
-			}
-
-			public override bool Resolve (EmitContext ec)
-			{
-				return true;
-			}
-
-			protected override void DoEmit (EmitContext ec)
-			{
-				iterator.cc.EmitInitScope (ec);
-			}
-		}
-
 		void Define_Reset ()
 		{
 			Method reset = new Method (
@@ -1182,7 +1076,7 @@
 
 			reset.Block = new ToplevelBlock (Location);
 			reset.Block = new ToplevelBlock (block, parameters, Location);
-			reset.Block.SetHaveAnonymousMethods (Location, move_next_method);
+			reset.Block.SetHaveAnonymousMethods (Location, this);
 
 			reset.Block.AddStatement (Create_ThrowNotSupported ());
 		}
@@ -1196,7 +1090,7 @@
 			AddMethod (dispose);
 
 			dispose.Block = new ToplevelBlock (block, parameters, Location);
-			dispose.Block.SetHaveAnonymousMethods (Location, move_next_method);
+			dispose.Block.SetHaveAnonymousMethods (Location, this);
 
 			dispose.Block.AddStatement (new DisposeMethod (this, Location));
 		}
@@ -1236,10 +1130,35 @@
 			}
 		}
 
-		bool CheckType ()
+		public static Iterator CreateIterator (IMethodData method, TypeContainer parent,
+						       GenericMethod generic, int modifiers)
 		{
-			Type ret = orig_method.ReturnType;
+			bool is_enumerable;
+			Type iterator_type;
 
+			if (!CheckType (method.ReturnType, out iterator_type, out is_enumerable)) {
+				Report.Error (1624, method.Location,
+					      "The body of `{0}' cannot be an iterator block " +
+					      "because `{1}' is not an iterator interface type",
+					      method.GetSignatureForError (),
+					      TypeManager.CSharpName (method.ReturnType));
+				return null;
+			}
+
+			Iterator iterator = new Iterator (
+				method, parent, generic, modifiers, iterator_type, is_enumerable);
+
+			if (!iterator.DefineIterator ())
+				return null;
+
+			return iterator;
+		}
+
+		static bool CheckType (Type ret, out Type original_iterator_type, out bool is_enumerable)
+		{
+			original_iterator_type = null;
+			is_enumerable = false;
+
 			if (ret == TypeManager.ienumerable_type) {
 				original_iterator_type = TypeManager.object_type;
 				is_enumerable = true;
Index: cs-parser.jay
===================================================================
--- cs-parser.jay	(revision 63019)
+++ cs-parser.jay	(working copy)
@@ -45,6 +45,9 @@
 
 		Delegate   current_delegate;
 
+		GenericMethod current_generic_method;
+		AnonymousMethodExpression current_anonymous_method;
+
 		/// <summary>
 		///   This is used by the unary_expression code to resolve
 		///   a name against a parameter.  
@@ -1074,6 +1077,7 @@
 		method.Block = (ToplevelBlock) $3;
 		current_container.AddMethod (method);
 
+		current_generic_method = null;
 		current_local_parameters = null;
 		iterator_container = null;
 
@@ -1133,6 +1137,7 @@
 				     name, (Parameters) $6, (Attributes) $1);
 
 		current_local_parameters = (Parameters) $6;
+		current_generic_method = generic;
 
 		if (RootContext.Documentation != null)
 			method.DocComment = Lexer.consume_doc_comment ();
@@ -1169,6 +1174,7 @@
 				     (int) $2, false, name, (Parameters) $6, (Attributes) $1);
 
 		current_local_parameters = (Parameters) $6;
+		current_generic_method = generic;
 
 		if (RootContext.Documentation != null)
 			method.DocComment = Lexer.consume_doc_comment ();
@@ -3396,6 +3402,7 @@
 		if (oob_stack == null)
 			oob_stack = new Stack (6);
 
+		oob_stack.Push (current_anonymous_method);
 		oob_stack.Push (current_local_parameters);
 		current_local_parameters = (Parameters)$2;
 
@@ -3403,7 +3410,12 @@
 		oob_stack.Push (current_block);
 		oob_stack.Push (top_current_block);
 		current_block = null;
-	  } 
+
+		Location loc = (Location) $1;
+		current_anonymous_method = new AnonymousMethodExpression (
+			current_anonymous_method, current_generic_method, current_container,
+			(Parameters) $2, (ToplevelBlock) top_current_block, loc);
+	  }
 	  block
 	  {
 		Location loc = (Location) $1;
@@ -3416,11 +3428,16 @@
 			ToplevelBlock anon_block = (ToplevelBlock) $4;
 
 			anon_block.Parent = current_block;
-			$$ = new AnonymousMethod (current_container, (Parameters) $2, (ToplevelBlock) top_current_block, 
-				anon_block, loc);
+
+			current_anonymous_method.Block = anon_block;
+			anon_block.SetHaveAnonymousMethods (loc, current_anonymous_method);
+
+			$$ = current_anonymous_method;
 		}
-			current_local_parameters = (Parameters) oob_stack.Pop ();
-		}
+
+		current_local_parameters = (Parameters) oob_stack.Pop ();
+		current_anonymous_method = (AnonymousMethodExpression) oob_stack.Pop ();
+	}
 	;
 
 opt_anonymous_method_signature
@@ -4000,7 +4017,8 @@
 	: OPEN_BRACE 
 	  {
 		if (current_block == null){
-			current_block = new ToplevelBlock ((ToplevelBlock) top_current_block, current_local_parameters, (Location) $1);
+			current_block = new ToplevelBlock ((ToplevelBlock) top_current_block, current_local_parameters,
+							   current_generic_method, (Location) $1);
 			top_current_block = current_block;
 		} else {
 			current_block = new Block (current_block, (Location) $1, Location.Null);
Index: convert.cs
===================================================================
--- convert.cs	(revision 63019)
+++ convert.cs	(working copy)
@@ -838,8 +838,8 @@
 				if (!TypeManager.IsDelegateType (target_type))
 					return false;
 
-				AnonymousMethod am = (AnonymousMethod) expr;
-				return am.ImplicitStandardConversionExists (target_type);
+				AnonymousMethodExpression ame = (AnonymousMethodExpression) expr;
+				return ame.ImplicitStandardConversionExists (target_type);
 			}
 
 			return false;
@@ -1325,10 +1325,11 @@
 					return null;
 				}
 
-				AnonymousMethod am = (AnonymousMethod) expr;
+				AnonymousMethodExpression ame = (AnonymousMethodExpression) expr;
+
 				int errors = Report.Errors;
 
-				Expression conv = am.Compatible (ec, target_type);
+				Expression conv = ame.Compatible (ec, target_type);
 				if (conv != null)
 					return conv;
 				
Index: anonymous.cs
===================================================================
--- anonymous.cs	(revision 63019)
+++ anonymous.cs	(working copy)
@@ -20,36 +20,387 @@
 
 namespace Mono.CSharp {
 
-	public abstract class AnonymousContainer : Expression
+	public abstract class CompilerGeneratedClass : Class
 	{
+		GenericMethod generic_method;
+		static int next_index = 0;
+
+		private static MemberName MakeProxyName (GenericMethod generic, Location loc)
+		{
+			string name = String.Format ("<>c__CompilerGenerated{0}", ++next_index);
+			if (generic != null) {
+				TypeArguments args = new TypeArguments (loc);
+				foreach (TypeParameter tparam in generic.CurrentTypeParameters)
+					args.Add (new SimpleName (tparam.Name, loc));
+				return new MemberName (name, args, loc);
+			} else
+				return new MemberName (name, loc);
+		}
+
+		protected CompilerGeneratedClass (DeclSpace parent, GenericMethod generic,
+						  int mod, Location loc)
+			: base (parent.NamespaceEntry, parent,
+				MakeProxyName (generic, loc), mod, null)
+		{
+			this.generic_method = generic;
+
+			if (generic != null) {
+				ArrayList list = new ArrayList ();
+				foreach (TypeParameter tparam in generic.CurrentTypeParameters) {
+					if (tparam.Constraints != null)
+						list.Add (tparam.Constraints.Clone ());
+				}
+				SetParameterInfo (list);
+			}
+		}
+
+		protected override bool DefineNestedTypes ()
+		{
+			Report.Debug (64, "COMPILER GENERATED NESTED", this, Name, Parent);
+
+			RootContext.RegisterCompilerGeneratedType (TypeBuilder);
+			return base.DefineNestedTypes ();
+		}
+
+		public GenericMethod GenericMethod {
+			get { return generic_method; }
+		}
+
+		public abstract ConstructorInfo Constructor {
+			get;
+		}
+
+		public TypeExpr InflateType (Type it)
+		{
+			if (generic_method == null)
+				return new TypeExpression (it, Location);
+
+			if (it.IsGenericParameter && (it.DeclaringMethod != null)) {
+				int pos = it.GenericParameterPosition;
+				it = CurrentTypeParameters [pos].Type;
+			} else if (it.IsGenericType) {
+				Type[] args = it.GetGenericArguments ();
+
+				TypeArguments inflated = new TypeArguments (Location);
+				foreach (Type t in args)
+					inflated.Add (InflateType (t));
+
+				return new ConstructedType (it, inflated, Location);
+			} else if (it.IsArray) {
+				TypeExpr et_expr = InflateType (it.GetElementType ());
+				int rank = it.GetArrayRank ();
+
+				Type et = et_expr.ResolveAsTypeTerminal (this, false).Type;
+				it = et.MakeArrayType (rank);
+			}
+
+			return new TypeExpression (it, Location);
+		}
+
+		Type parent_type;
+		CapturedVariable parent_link;
+
+		public Type ParentType {
+			get { return parent_type; }
+		}
+
+		public Field ParentLink {
+			get { return parent_link; }
+		}
+
+		protected override bool DoDefineMembers ()
+		{
+			Report.Debug (64, "DO DEFINE MEMBERS", this, Name, Parent);
+
+			CompilerGeneratedClass parent = Parent as CompilerGeneratedClass;
+			if (parent != null) {
+				parent_type = parent.CurrentType != null ?
+					parent.CurrentType : parent.TypeBuilder;
+
+				parent_link = new CapturedVariable (this, "<>parent", parent_type);
+
+				Parameter[] ctor_params = new Parameter [1];
+				ctor_params [0] = new Parameter (
+					parent_type, "parent", Parameter.Modifier.NONE,
+					null, Location);
+
+				Constructor ctor = new Constructor (
+					this, MemberName.Name, Modifiers.PUBLIC,
+					new Parameters (ctor_params),
+					new GeneratedBaseInitializer (Location),
+					Location);
+				AddConstructor (ctor);
+
+				ctor.Block = new ToplevelBlock (null, Location);
+				ctor.Block.AddStatement (new TheCtor (parent_link));
+			}
+
+			return base.DoDefineMembers ();
+		}
+
+		protected class TheCtor : Statement
+		{
+			Field parent;
+
+			public TheCtor (Field parent)
+			{
+				this.parent = parent;
+			}
+
+			public override bool Resolve (EmitContext ec)
+			{
+				return true;
+			}
+
+			protected override void DoEmit (EmitContext ec)
+			{
+				ec.ig.Emit (OpCodes.Ldarg_0);
+				ec.ig.Emit (OpCodes.Ldarg_1);
+				ec.ig.Emit (OpCodes.Stfld, parent.FieldBuilder);
+			}
+		}
+
+		protected class CapturedVariable : Field
+		{
+			public CapturedVariable (CompilerGeneratedClass helper, string name, Type type)
+				: base (helper, new TypeExpression (type, helper.Location),
+					Modifiers.INTERNAL, name, null, helper.Location)
+			{
+				helper.AddField (this);
+			}
+		}
+	}
+
+	public interface IAnonymousContainer
+	{
+		bool IsIterator {
+			get;
+		}
+
+		CompilerGeneratedClass CreateScopeType (ScopeInfo scope);
+	}
+
+	public class AnonymousMethodExpression : Expression, IAnonymousContainer
+	{
+		public readonly AnonymousMethodExpression Parent;
+		public readonly GenericMethod GenericMethod;
+		public readonly TypeContainer Host;
+		public readonly Parameters Parameters;
+		public readonly ToplevelBlock Container;
+
+		public ToplevelBlock Block;
+		protected AnonymousMethod anonymous;
+
+		public AnonymousMethod AnonymousMethod {
+			get { return anonymous; }
+		}
+
+		public AnonymousMethodExpression (AnonymousMethodExpression parent,
+						  GenericMethod generic, TypeContainer host,
+						  Parameters parameters, ToplevelBlock container,
+						  Location loc)
+		{
+			this.Parent = parent;
+			this.GenericMethod = generic;
+			this.Host = host;
+			this.Parameters = parameters;
+			this.Container = container;
+			this.loc = loc;
+
+			Report.Debug (64, "NEW ANONYMOUS METHOD EXPRESSION", this, parent, host,
+				      container, loc);
+
+			if (container != null)
+				container.SetHaveAnonymousMethods (loc, this);
+		}
+
+		public override string ExprClassName {
+			get {
+				return "anonymous method";
+			}
+		}
+
+		void Error_ParameterMismatch (Type t)
+		{
+			Report.Error (1661, loc, "Anonymous method could not be converted to delegate `" +
+				      "{0}' since there is a parameter mismatch",
+				      TypeManager.CSharpName (t));
+		}
+
+		public bool ImplicitStandardConversionExists (Type delegate_type)
+		{
+			if (Parameters == null)
+				return true;
+
+			MethodGroupExpr invoke_mg = Delegate.GetInvokeMethod (
+				Host.TypeBuilder, delegate_type, loc);
+			MethodInfo invoke_mb = (MethodInfo) invoke_mg.Methods [0];
+			ParameterData invoke_pd = TypeManager.GetParameterData (invoke_mb);
+
+			if (Parameters.Count != invoke_pd.Count)
+				return false;
+
+			for (int i = 0; i < Parameters.Count; ++i) {
+				if (invoke_pd.ParameterType (i) != Parameters.ParameterType (i))
+					return false;
+			}
+			return true;
+		}
+
+		//
+		// Returns true if this anonymous method can be implicitly
+		// converted to the delegate type `delegate_type'
+		//
+		public Expression Compatible (EmitContext ec, Type delegate_type)
+		{
+			if (anonymous != null)
+				return anonymous.AnonymousDelegate;
+
+			//
+			// At this point its the first time we know the return type that is 
+			// needed for the anonymous method.  We create the method here.
+			//
+
+			MethodGroupExpr invoke_mg = Delegate.GetInvokeMethod (
+				ec.ContainerType, delegate_type, loc);
+			MethodInfo invoke_mb = (MethodInfo) invoke_mg.Methods [0];
+			ParameterData invoke_pd = TypeManager.GetParameterData (invoke_mb);
+
+			Parameters parameters;
+			if (Parameters == null) {
+				//
+				// We provide a set of inaccessible parameters
+				//
+				Parameter [] fixedpars = new Parameter [invoke_pd.Count];
+								
+				for (int i = 0; i < invoke_pd.Count; i++){
+					fixedpars [i] = new Parameter (
+						invoke_pd.ParameterType (i),
+						"+" + i, invoke_pd.ParameterModifier (i), null, loc);
+				}
+								
+				parameters = new Parameters (fixedpars);
+				if (!parameters.Resolve (ec))
+					return null;
+			} else {
+				if (Parameters.Count != invoke_pd.Count) {
+					Report.SymbolRelatedToPreviousError (delegate_type);
+					Report.Error (1593, loc, "Delegate `{0}' does not take `{1}' arguments",
+						TypeManager.CSharpName (delegate_type), Parameters.Count.ToString ());
+					Error_ParameterMismatch (delegate_type);
+					return null;
+				}
+
+				for (int i = 0; i < Parameters.Count; ++i) {
+					Parameter.Modifier p_mod = invoke_pd.ParameterModifier (i);
+					if (Parameters.ParameterModifier (i) != p_mod && p_mod != Parameter.Modifier.PARAMS) {
+						if (p_mod == Parameter.Modifier.NONE)
+							Report.Error (1677, loc, "Parameter `{0}' should not be declared with the `{1}' keyword",
+								(i + 1).ToString (), Parameter.GetModifierSignature (Parameters.ParameterModifier (i)));
+						else
+							Report.Error (1676, loc, "Parameter `{0}' must be declared with the `{1}' keyword",
+								(i+1).ToString (), Parameter.GetModifierSignature (p_mod));
+						Error_ParameterMismatch (delegate_type);
+						return null;
+					}
+
+					if (invoke_pd.ParameterType (i) != Parameters.ParameterType (i)) {
+						Report.Error (1678, loc, "Parameter `{0}' is declared as type `{1}' but should be `{2}'",
+							(i+1).ToString (),
+							TypeManager.CSharpName (Parameters.ParameterType (i)),
+							TypeManager.CSharpName (invoke_pd.ParameterType (i)));
+						Error_ParameterMismatch (delegate_type);
+						return null;
+					}
+				}
+
+				parameters = Parameters;
+			}
+
+			//
+			// Second: the return type of the delegate must be compatible with 
+			// the anonymous type.   Instead of doing a pass to examine the block
+			// we satisfy the rule by setting the return type on the EmitContext
+			// to be the delegate type return type.
+			//
+
+			//MethodBuilder builder = method_data.MethodBuilder;
+			//ILGenerator ig = builder.GetILGenerator ();
+
+			Report.Debug (64, "COMPATIBLE", this, Parent, GenericMethod, Host,
+				      Container, Block, invoke_mb.ReturnType, delegate_type,
+				      delegate_type.IsGenericType, loc);
+
+			anonymous = new AnonymousMethod (
+				Parent != null ? Parent.AnonymousMethod : null, GenericMethod,
+				Host, parameters, Container, Block, invoke_mb.ReturnType,
+				delegate_type, loc);
+
+			if (!anonymous.Resolve (ec))
+				return null;
+
+			return anonymous.AnonymousDelegate;
+		}
+
+		public override Expression DoResolve (EmitContext ec)
+		{
+			//
+			// Set class type, set type
+			//
+
+			eclass = ExprClass.Value;
+
+			//
+			// This hack means `The type is not accessible
+			// anywhere', we depend on special conversion
+			// rules.
+			// 
+			type = TypeManager.anonymous_method_type;
+
+			if ((Parameters != null) && !Parameters.Resolve (ec))
+				return null;
+
+			return this;
+		}
+
+		public override void Emit (EmitContext ec)
+		{
+			// nothing, as we only exist to not do anything.
+		}
+
+		bool IAnonymousContainer.IsIterator {
+			get { return false; }
+		}
+
+		CompilerGeneratedClass IAnonymousContainer.CreateScopeType (ScopeInfo scope)
+		{
+			return anonymous.CreateScopeType (scope);
+		}
+	}
+
+	public abstract class AnonymousContainer : CompilerGeneratedClass, IAnonymousContainer
+	{
 		// Used to generate unique method names.
 		protected static int anonymous_method_count;
-		    
+
+		new public readonly TypeContainer Parent;
+
 		// An array list of AnonymousMethodParameter or null
 		public Parameters Parameters;
-		
+
 		//
 		// The block that makes up the body for the anonymous mehtod
 		//
 		public ToplevelBlock Block;
 
 		//
-		// The container block for this anonymous method.
-		//
-		public Block ContainingBlock;
-
-		//
 		// The implicit method we create
 		//
 		public Method method;
 
-		protected MethodInfo invoke_mb;
-		
 		// The emit context for the anonymous method
-		public EmitContext aec;
-		public string[] TypeParameters;
-		public Type[] TypeArguments;
 		protected bool unreachable;
+		protected readonly Location loc;
 
 		// The method scope
 		ScopeInfo method_scope;
@@ -70,47 +421,39 @@
 		//
 		// Points to our container anonymous method if its present
 		//
-		public AnonymousContainer ContainerAnonymousMethod;	
+		public readonly AnonymousContainer ContainerAnonymousMethod;
 
-		protected AnonymousContainer (Parameters parameters, ToplevelBlock container,
-					      ToplevelBlock block, Location l)
+		protected AnonymousContainer (AnonymousContainer parent, GenericMethod generic,
+					      TypeContainer host, Parameters parameters,
+					      ToplevelBlock container, ToplevelBlock block,
+					      int mod, Location loc)
+			: base (parent != null ? parent : host, parent != null ? null : generic,
+				mod, loc)
 		{
-			Parameters = parameters;
-			Block = block;
-			loc = l;
+			this.ContainerAnonymousMethod = parent;
+			this.Parent = (parent != null) ? parent : host;
+			this.Parameters = parameters;
+			this.Block = block;
+			this.loc = loc;
 
-			//
-			// The order is important: this setups the CaptureContext tree hierarchy.
-			//
-			if (container == null) {
+			Report.Debug (64, "NEW ANONYMOUS CONTAINER", this, parent, host, host.Name,
+				      container, parameters);
+
+			Parent.AddCompilerGeneratedClass (this);
+
+			if (container == null)
 				return;
-			}
-			container.SetHaveAnonymousMethods (l, this);
-			block.SetHaveAnonymousMethods (l, this);
-		}
 
-		protected AnonymousContainer (Parameters parameters, ToplevelBlock container,
-					      Location l):
-			this (parameters, container, new ToplevelBlock (container, parameters, l), l)
-		{
+			container.RegisterAnonymousMethod (this);
 		}
 
-		public override Expression DoResolve (EmitContext ec)
+		protected AnonymousContainer (TypeContainer host, GenericMethod generic,
+					      Parameters parameters, ToplevelBlock container,
+					      int mod, Location loc)
+			: this (null, generic, host, parameters, container, null, mod, loc)
 		{
-			//
-			// Set class type, set type
-			//
-
-			eclass = ExprClass.Value;
-
-			//
-			// This hack means `The type is not accessible
-			// anywhere', we depend on special conversion
-			// rules.
-			// 
-			type = TypeManager.anonymous_method_type;
-
-			return this;
+			Block = new ToplevelBlock (container, parameters, loc);
+			Block.SetHaveAnonymousMethods (loc, this);
 		}
 
 		public void RegisterScope (ScopeInfo scope)
@@ -164,6 +507,9 @@
 		//
 		public void ComputeMethodHost ()
 		{
+			Report.Debug (64, "COMPUTE METHOD HOST", this, computed_method_scope,
+				      method_scope, scopes_used);
+
 			if (computed_method_scope)
 				return;
 			
@@ -194,25 +540,93 @@
 				throw new Exception ("Internal error, AnonymousContainer.Scope is being used before its container is computed");
 			}
 		}
-		
-		
-		protected abstract bool CreateMethodHost (EmitContext ec);
 
-		public abstract void CreateScopeType (EmitContext ec, ScopeInfo scope);
+#if FIXME
+		public bool CreateMethod (EmitContext ec)
+		{
+			if (method != null)
+				return true;
 
-		public abstract Iterator Iterator {
-			get;
+			return CreateMethodHost (ec);
 		}
+#endif
 
+		public abstract bool Resolve (EmitContext ec);
+
+		protected abstract bool CreateMethodHost (EmitContext ec);
+
+		public abstract CompilerGeneratedClass CreateScopeType (ScopeInfo scope);
+
 		public abstract bool IsIterator {
 			get;
 		}
+
+		public override ConstructorInfo Constructor {
+			get { throw new InternalErrorException (); }
+		}
+
+		public ExpressionStatement GetScopeInitializer (Location loc)
+		{
+			return new AnonymousMethodScopeInitializer (this, loc);
+		}
+
+		public override string ToString ()
+		{
+			return String.Format ("{0} ({1})", GetType (), Name);
+		}
+
+		protected class AnonymousMethodScopeInitializer : ExpressionStatement
+		{
+			AnonymousContainer am;
+
+			public AnonymousMethodScopeInitializer (AnonymousContainer am, Location loc)
+			{
+				this.am = am;
+				this.loc = loc;
+				eclass = ExprClass.Value;
+			}
+
+			public override Expression DoResolve (EmitContext ec)
+			{
+				ScopeInfo scope = am.Scope;
+				if (scope == null) {
+					type = am.Parent.TypeBuilder;
+					return this;
+				}
+
+				AnonymousContainer container = am.ContainerAnonymousMethod;
+				if ((container != null) && (scope == container.Scope)) {
+					type = scope.ScopeType;
+					return this;
+				}
+
+				return scope.GetScopeInitializer (ec);
+			}
+
+			public override void Emit (EmitContext ec)
+			{
+				ec.ig.Emit (OpCodes.Nop);
+
+				if (ec.IsStatic)
+					ec.ig.Emit (OpCodes.Ldnull);
+				else
+					ec.ig.Emit (OpCodes.Ldarg_0);
+			}
+
+			public override void EmitStatement (EmitContext ec)
+			{
+				Emit (ec);
+			}
+		}
 	}
 
 	public class AnonymousMethod : AnonymousContainer
 	{
-		TypeContainer host;
+		public readonly Type ReturnType;
+		public readonly Type DelegateType;
 
+		public EmitContext aec;
+
 		//
 		// The value return by the Compatible call, this ensure that
 		// the code works even if invoked more than once (Resolve called
@@ -220,26 +634,24 @@
 		//
 		Expression anonymous_delegate;
 
-		public AnonymousMethod (TypeContainer host, Parameters parameters, ToplevelBlock container,
-					ToplevelBlock block, Location l)
-			: base (parameters, container, block, l)
+		public AnonymousMethod (AnonymousMethod parent, GenericMethod generic,
+					TypeContainer host, Parameters parameters,
+					ToplevelBlock container, ToplevelBlock block,
+					Type return_type, Type delegate_type, Location loc)
+			: base (parent, generic, host, parameters, container, block, 0, loc)
 		{
-			this.host = host;
+			this.ReturnType = return_type;
+			this.DelegateType = delegate_type;
 		}
 
-		public override Iterator Iterator {
-			get { return null; }
+		public Expression AnonymousDelegate {
+			get { return anonymous_delegate; }
 		}
 
 		public override bool IsIterator {
 			get { return false; }
 		}
 
-		public override void Emit (EmitContext ec)
-		{
-			// nothing, as we only exist to not do anything.
-		}
-
 		//
 		// Creates the host for the anonymous method
 		//
@@ -247,234 +659,128 @@
 		{
 			ComputeMethodHost ();
 
-			//
-			// Crude hack follows: we replace the TypeBuilder during the
-			// definition to get the method hosted in the right class
-			//
-			TypeBuilder current_type = ec.TypeContainer.TypeBuilder;
-			TypeBuilder type_host = (Scope == null ) ? current_type : Scope.ScopeTypeBuilder;
+			if (method != null)
+				return true;
 
-			if (current_type == null)
-				throw new Exception ("The current_type is null");
-			
-			if (type_host == null)
-				throw new Exception (String.Format ("Type host is null, method_host is {0}", Scope == null ? "null" : "Not null"));
+			Report.Debug (64, "CREATE METHOD HOST", this, Scope);
 
-			if (current_type != type_host)
-				method_modifiers = Modifiers.INTERNAL;
+			if ((Scope != null) && (Scope.HelperClass == null))
+				throw new InternalErrorException ();
 
-			if (current_type == type_host && ec.IsStatic){
+			method_modifiers = (Scope != null) ? Modifiers.INTERNAL : Modifiers.PRIVATE;
+
+			if ((Scope == null) && ec.IsStatic)
 				method_modifiers |= Modifiers.STATIC;
-				current_type = null;
-			} 
 
-			string name = "<#AnonymousMethod>" + anonymous_method_count++;
+			string name = "<>c__AnonymousMethod" + anonymous_method_count++;
 			MemberName member_name;
 
+			Report.Debug (64, "CREATE METHOD HOST #1",
+				      this, Scope, Scope.HelperClass.Name, name);
+
 			GenericMethod generic_method = null;
-			if (TypeParameters != null) {
+			if (DelegateType.IsGenericType) {
 				TypeArguments args = new TypeArguments (loc);
-				foreach (string t in TypeParameters)
-					args.Add (new SimpleName (t, loc));
 
+				Type[] tparam = TypeManager.GetTypeArguments (DelegateType);
+				for (int i = 0; i < tparam.Length; i++)
+					args.Add (new SimpleName (tparam [i].Name, loc));
+
 				member_name = new MemberName (name, args, loc);
 
 				generic_method = new GenericMethod (
-					ec.DeclContainer.NamespaceEntry,
-					(TypeContainer) ec.TypeContainer, member_name,
-					new TypeExpression (invoke_mb.ReturnType, loc),
-					Parameters);
+					NamespaceEntry, this, member_name,
+					new TypeExpression (ReturnType, loc), Parameters);
 
 				generic_method.SetParameterInfo (null);
 			} else
 				member_name = new MemberName (name, loc);
 
 			method = new Method (
-				(TypeContainer) ec.TypeContainer, generic_method,
-				new TypeExpression (invoke_mb.ReturnType, loc),
+				this, generic_method, new TypeExpression (ReturnType, loc),
 				method_modifiers, false, member_name, Parameters, null);
 			method.Block = Block;
 
-			//
-			// Swap the TypeBuilder while we define the method, then restore
-			//
-			if (current_type != null)
-				ec.TypeContainer.TypeBuilder = type_host;
-			bool res = method.Define ();
-			if (current_type != null)
-				ec.TypeContainer.TypeBuilder = current_type;
-
-			return res;
+			return method.Define ();
 		}
 
-		void Error_ParameterMismatch (Type t)
+		public override bool Resolve (EmitContext ec)
 		{
-			Report.Error (1661, loc, "Anonymous method could not be converted to delegate `" +
-				      "{0}' since there is a parameter mismatch", TypeManager.CSharpName (t));
-		}
-
-		public bool ImplicitStandardConversionExists (Type delegate_type)
-		{
-			if (Parameters == null)
-				return true;
-
-			MethodGroupExpr invoke_mg = Delegate.GetInvokeMethod (host.TypeBuilder, delegate_type, loc);
-			invoke_mb = (MethodInfo) invoke_mg.Methods [0];
-			ParameterData invoke_pd = TypeManager.GetParameterData (invoke_mb);
-
-			if (Parameters.Count != invoke_pd.Count)
+			if (!ec.IsAnonymousMethodAllowed) {
+				Report.Error (1706, loc,
+					      "Anonymous methods are not allowed in the " +
+					      "attribute declaration");
 				return false;
-
-			for (int i = 0; i < Parameters.Count; ++i) {
-				if (invoke_pd.ParameterType (i) != Parameters.ParameterType (i))
-					return false;
 			}
-			return true;
-		}
 
-		//
-		// Returns true if this anonymous method can be implicitly
-		// converted to the delegate type `delegate_type'
-		//
-		public Expression Compatible (EmitContext ec, Type delegate_type)
-		{
-			if (anonymous_delegate != null)
-				return anonymous_delegate;
-			
-			//
-			// At this point its the first time we know the return type that is 
-			// needed for the anonymous method.  We create the method here.
-			//
+			Report.Debug (64, "RESOLVE ANONYMOUS METHOD", this, ec, aec, Parameters);
 
-			MethodGroupExpr invoke_mg = Delegate.GetInvokeMethod (ec.ContainerType, delegate_type, loc);
-			invoke_mb = (MethodInfo) invoke_mg.Methods [0];
-			ParameterData invoke_pd = TypeManager.GetParameterData (invoke_mb);
+			if (DefineType () == null)
+				return false;
+			if (!ResolveType ())
+				return false;
 
-			if (delegate_type.IsGenericType) {
-				Type def = delegate_type.GetGenericTypeDefinition ();
-
-				if (def != delegate_type) {
-					Type[] tparam = TypeManager.GetTypeArguments (def);
-
-					TypeArguments = TypeManager.GetTypeArguments (delegate_type);
-					TypeParameters = new string [tparam.Length];
-					for (int i = 0; i < tparam.Length; i++)
-						TypeParameters [i] = tparam [i].Name;
-				}
-			}
-
-			if (Parameters == null) {
-				//
-				// We provide a set of inaccessible parameters
-				//
-				Parameter [] fixedpars = new Parameter [invoke_pd.Count];
-								
-				for (int i = 0; i < invoke_pd.Count; i++){
-					fixedpars [i] = new Parameter (
-						invoke_pd.ParameterType (i),
-						"+" + i, invoke_pd.ParameterModifier (i), null, loc);
-				}
-								
-				Parameters = new Parameters (fixedpars);
-			} else {
-				if (Parameters.Count != invoke_pd.Count) {
-					Report.SymbolRelatedToPreviousError (delegate_type);
-					Report.Error (1593, loc, "Delegate `{0}' does not take `{1}' arguments",
-						TypeManager.CSharpName (delegate_type), Parameters.Count.ToString ());
-					Error_ParameterMismatch (delegate_type);
-					return null;
-				}
-
-				for (int i = 0; i < Parameters.Count; ++i) {
-					Parameter.Modifier p_mod = invoke_pd.ParameterModifier (i);
-					if (Parameters.ParameterModifier (i) != p_mod && p_mod != Parameter.Modifier.PARAMS) {
-						if (p_mod == Parameter.Modifier.NONE)
-							Report.Error (1677, loc, "Parameter `{0}' should not be declared with the `{1}' keyword",
-								(i + 1).ToString (), Parameter.GetModifierSignature (Parameters.ParameterModifier (i)));
-						else
-							Report.Error (1676, loc, "Parameter `{0}' must be declared with the `{1}' keyword",
-								(i+1).ToString (), Parameter.GetModifierSignature (p_mod));
-						Error_ParameterMismatch (delegate_type);
-						return null;
-					}
-
-					if (invoke_pd.ParameterType (i) != Parameters.ParameterType (i)) {
-						Report.Error (1678, loc, "Parameter `{0}' is declared as type `{1}' but should be `{2}'",
-							(i+1).ToString (),
-							TypeManager.CSharpName (Parameters.ParameterType (i)),
-							TypeManager.CSharpName (invoke_pd.ParameterType (i)));
-						Error_ParameterMismatch (delegate_type);
-						return null;
-					}
-				}
-			}
-			
-			//
-			// Second: the return type of the delegate must be compatible with 
-			// the anonymous type.   Instead of doing a pass to examine the block
-			// we satisfy the rule by setting the return type on the EmitContext
-			// to be the delegate type return type.
-			//
-
-			//MethodBuilder builder = method_data.MethodBuilder;
-			//ILGenerator ig = builder.GetILGenerator ();
-
-			aec = new EmitContext (ec.ResolveContext,
-				ec.TypeContainer, ec.DeclContainer, loc, null,
-				invoke_mb.ReturnType,
+			aec = new EmitContext (
+				ec.ResolveContext, ec.TypeContainer, this, loc, null, ReturnType,
 				/* REVIEW */ (ec.InIterator ? Modifiers.METHOD_YIELDS : 0) |
 				(ec.InUnsafe ? Modifiers.UNSAFE : 0) |
 				(ec.IsStatic ? Modifiers.STATIC : 0),
 				/* No constructor */ false);
 
 			aec.CurrentAnonymousMethod = this;
-			ContainerAnonymousMethod = ec.CurrentAnonymousMethod;
-			ContainingBlock = ec.CurrentBlock;
 
-			if (aec.ResolveTopBlock (ec, Block, Parameters, null, out unreachable)){
-				anonymous_delegate = new AnonymousDelegate (
-					this, delegate_type, loc).Resolve (ec);
-				return anonymous_delegate;
-			}
-			return null;
-		}
+			Report.Debug (64, "RESOLVE ANONYMOUS METHOD #1", this, ec, aec,
+				      Parent, Parameters, Block, Block.CaptureContext);
 
-		public override Expression DoResolve (EmitContext ec)
-		{
-			if (!ec.IsAnonymousMethodAllowed) {
-				Report.Error (1706, loc, "Anonymous methods are not allowed in the attribute declaration");
-				return null;
-			}
+			ScopeInfo root = ec.capture_context.CreateRootScope (this);
+			RegisterScope (root);
 
-			if (Parameters != null && !Parameters.Resolve (ec)) {
-				return null;
+#if FIXME
+			ScopeInfo scope = Block.CaptureContext.CreateRootScope (this);
+			RegisterScope (scope);
+
+			if (ContainerAnonymousMethod != null) {
+				ScopeInfo scope = Block.CaptureContext.CreateRootScope (this);
+				ContainerAnonymousMethod.RegisterScope (scope);
 			}
+#endif
 
-			return base.DoResolve (ec);
-		}
+			bool unreachable;
+			if (!aec.ResolveTopBlock (ec, Block, Parameters, null, out unreachable))
+				return false;
 
+			Report.Debug (64, "RESOLVE ANONYMOUS METHOD #3", this, ec, aec, Block,
+				      ec.capture_context);
 
-		public override string ExprClassName {
-			get {
-				return "anonymous method";
-			}
+			if (!CreateMethodHost (ec))
+				return false;
+
+			anonymous_delegate = new AnonymousDelegate (this, DelegateType, loc).Resolve (ec);
+			if (anonymous_delegate == null)
+				return false;
+
+			return true;
 		}
 
-		public MethodInfo GetMethodBuilder ()
+		public MethodInfo GetMethodBuilder (EmitContext ec)
 		{
 			MethodInfo builder = method.MethodBuilder;
-			if (TypeArguments != null)
-				return builder.MakeGenericMethod (TypeArguments);
-			else
+			if ((Scope == null) || !IsGeneric)
 				return builder;
+
+			Expression init = Scope.GetScopeInitializer (ec);
+			MethodGroupExpr mg = (MethodGroupExpr) Expression.MemberLookup (
+				ec.ContainerType, init.Type, builder.Name, loc);
+
+			Report.Debug (64, "GET METHOD BUILDER", this, Scope, init, init.Type,
+				      builder, mg, loc);
+
+			if (mg == null)
+				throw new InternalErrorException ();
+
+			return (MethodInfo) mg.Methods [0];
 		}
 
-		public override string GetSignatureForError ()
-		{
-			string s = TypeManager.CSharpSignature (invoke_mb);
-			return s.Substring (0, s.IndexOf (".Invoke("));
-		}
-		
 		public bool EmitMethod (EmitContext ec)
 		{
 			if (!CreateMethodHost (ec))
@@ -486,6 +792,9 @@
 
 			Parameters.ApplyAttributes (builder);
 
+			Report.Debug (64, "ANONYMOUS EMIT METHOD", this, aec, Scope,
+				      aec.capture_context);
+
 			//
 			// Adjust based on the computed state of the
 			// method from CreateMethodHost
@@ -497,50 +806,30 @@
 			return true;
 		}
 
-		public override void CreateScopeType (EmitContext ec, ScopeInfo scope)
+		public override CompilerGeneratedClass CreateScopeType (ScopeInfo scope)
 		{
-			TypeBuilder container = ec.TypeContainer.TypeBuilder;
-			string name = String.Format ("<>AnonHelp<{0}>", scope.id);
+			Report.Debug (64, "ANONYMOUS METHOD CREATE SCOPE TYPE",
+				      this, scope, scope.ParentScope);
 
-			scope.ScopeTypeBuilder = container.DefineNestedType (name,
-				TypeAttributes.Sealed | TypeAttributes.BeforeFieldInit | TypeAttributes.NestedPrivate,
-					 TypeManager.object_type);
+			if (scope.ParentScope == null) {
+				if (!Define ())
+					return null;
+				if (DefineType () == null)
+					return null;
+				return this;
+			}
 
-			Type [] constructor_types = Type.EmptyTypes;
-			ConstructorBuilder ctor = scope.ScopeTypeBuilder.DefineConstructor (
-				MethodAttributes.Public | MethodAttributes.HideBySig |
-				MethodAttributes.SpecialName | MethodAttributes.RTSpecialName,
-				CallingConventions.HasThis, constructor_types);
-			TypeManager.RegisterMethod (ctor, Parameters.EmptyReadOnlyParameters);
+			AnonymousHelper helper = new AnonymousHelper (this);
 
-			ILGenerator cig = ctor.GetILGenerator ();
-			cig.Emit (OpCodes.Ldarg_0);
-			cig.Emit (OpCodes.Call, TypeManager.object_ctor);
-			cig.Emit (OpCodes.Ret);
+			if (!helper.Define ())
+				return null;
 
-			if (ec.TypeContainer.IsGeneric) {
-				TypeParameter[] tparam = ec.TypeContainer.TypeParameters;
-				string[] names = new string [tparam.Length];
-				Type[] types = new Type [tparam.Length];
+			if (helper.DefineType () == null)
+				return null;
 
-				for (int i = 0; i < names.Length; i++) {
-					names [i] = tparam [i].Name;
-					types [i] = tparam [i].Type;
-				}
+			AddCompilerGeneratedClass (helper);
 
-				scope.ScopeTypeBuilder.DefineGenericParameters (names);
-				scope.ScopeTypeBuilder.GetGenericTypeDefinition ();
-
-				scope.ScopeType = scope.ScopeTypeBuilder.MakeGenericType (types);
-			} else
-				scope.ScopeType = scope.ScopeTypeBuilder;
-
-
-			if (ec.TypeContainer.IsGeneric)
-				scope.ScopeConstructor = TypeBuilder.GetConstructor (
-					scope.ScopeType, ctor);
-			else
-				scope.ScopeConstructor = ctor;
+			return helper;
 		}
 
 		public static void Error_AddressOfCapturedVar (string name, Location loc)
@@ -549,6 +838,29 @@
 				"Local variable `{0}' or its members cannot have their address taken and be used inside an anonymous method block",
 				name);
 		}
+
+		protected class AnonymousHelper : CompilerGeneratedClass
+		{
+			ConstructorInfo ctor;
+
+			public AnonymousHelper (AnonymousMethod anonymous)
+				: base (anonymous, anonymous.GenericMethod,
+					Modifiers.PUBLIC, anonymous.Location)
+			{ }
+
+			protected override bool DoDefineMembers ()
+			{
+				if (!base.DoDefineMembers ())
+					return false;
+
+				ctor = default_constructor.ConstructorBuilder;
+				return true;
+			}
+
+			public override ConstructorInfo Constructor {
+				get { return ctor; }
+			}
+		}
 	}
 
 	//
@@ -573,54 +885,123 @@
 		
 		public override void Emit (EmitContext ec)
 		{
+			Report.Debug (64, "ANONYMOUS DELEGATE", this, am, ec.ContainerType, type,
+				      ec, ec.capture_context, loc);
+
 			if (!am.EmitMethod (ec))
 				return;
 
 			//
 			// Now emit the delegate creation.
 			//
-			if ((am.method.ModFlags & Modifiers.STATIC) == 0)
-				delegate_instance_expression = new AnonymousInstance (am);
-			
+			if ((am.method.ModFlags & Modifiers.STATIC) == 0) {
+				delegate_instance_expression = am.GetScopeInitializer (loc).Resolve (ec);
+				Report.Debug (64, "ANONYMOUS DELEGATE #0", this,
+					      delegate_instance_expression);
+
+				if (delegate_instance_expression == null)
+					throw new InternalErrorException ();
+			}
+
 			Expression ml = Expression.MemberLookup (ec.ContainerType, type, ".ctor", loc);
 			constructor_method = ((MethodGroupExpr) ml).Methods [0];
-			delegate_method = am.GetMethodBuilder ();
+			delegate_method = am.GetMethodBuilder (ec);
+			Report.Debug (64, "ANONYMOUS DELEGATE #1", constructor_method, delegate_method,
+				      delegate_method.GetType ());
 			base.Emit (ec);
 		}
+	}
 
-		class AnonymousInstance : Expression {
-			AnonymousMethod am;
-			
-			public AnonymousInstance (AnonymousMethod am)
-			{
-				this.am = am;
-				eclass = ExprClass.Value;
-			}
-
-			public override Expression DoResolve (EmitContext ec)
-			{
-				return this;
-			}
-			
-			public override void Emit (EmitContext ec)
-			{
-				am.aec.EmitMethodHostInstance (ec, am);
-			}
+	class CapturedVariable : Field
+	{
+		public CapturedVariable (ScopeInfo scope, string name, Type type)
+			: base (scope.HelperClass, scope.HelperClass.InflateType (type),
+				Modifiers.INTERNAL, name, null, scope.loc)
+		{
+			scope.HelperClass.AddField (this);
 		}
 	}
 
 	class CapturedParameter {
-		public Type Type;
-		public FieldBuilder FieldBuilder;
-		public int Idx;
+		public readonly Parameter Parameter;
+		public readonly Field Field;
+		public readonly int Idx;
 
-		public CapturedParameter (Type type, int idx)
+		public CapturedParameter (ScopeInfo scope, Parameter par, int idx)
 		{
-			Type = type;
+			this.Parameter = par;
 			Idx = idx;
+			Field = new CapturedVariable (scope, "<p:" + par.Name + ">", par.ParameterType);
 		}
 	}
 
+	public class CapturedParameterReference : Expression, IAssignMethod, IMemoryLocation, IVariable
+	{
+		ScopeInfo scope;
+		CapturedParameter cp;
+		VariableInfo vi;
+		bool prepared;
+
+		internal CapturedParameterReference (ScopeInfo scope, CapturedParameter cp,
+						     Location loc)
+		{
+			this.scope = scope;
+			this.cp = cp;
+			this.loc = loc;
+
+			type = cp.Field.MemberType;
+			eclass = ExprClass.Variable;
+		}
+
+		public VariableInfo VariableInfo {
+			get { return vi; }
+		}
+
+		public override Expression DoResolve (EmitContext ec)
+		{
+			// We are born fully resolved.
+			return this;
+		}
+
+		public override Expression DoResolveLValue (EmitContext ec, Expression right_side)
+		{
+			// We are born fully resolved.
+			return this;
+		}
+
+		LocalTemporary temp;
+
+		public override void Emit (EmitContext ec)
+		{
+			Emit (ec, false);
+		}
+
+		public void Emit (EmitContext ec, bool leave_copy)
+		{
+			scope.CaptureContext.EmitParameter (
+				ec, cp.Parameter.Name, leave_copy, prepared, ref temp);
+		}
+
+		public void EmitAssign (EmitContext ec, Expression source, bool leave_copy,
+					bool prepare_for_load)
+		{
+			prepared = prepare_for_load;
+			scope.CaptureContext.EmitAssignParameter (
+				ec, cp.Parameter.Name, source, leave_copy, prepare_for_load, ref temp);
+		}
+
+		public void AddressOf (EmitContext ec, AddressOp mode)
+		{
+			scope.CaptureContext.EmitAddressOfParameter (ec, cp.Parameter.Name);
+		}
+
+		public bool VerifyFixed ()
+		{
+			// A parameter is fixed if it's a value parameter (i.e., no modifier like out, ref, param).
+			return cp.Parameter.ModFlags == Parameter.Modifier.NONE;
+		}
+	}
+
 	//
 	// Here we cluster all the variables captured on a given scope, we also
 	// keep some extra information that might be required on each scope.
@@ -629,13 +1010,11 @@
 		public CaptureContext CaptureContext;
 		public ScopeInfo ParentScope;
 		public Block ScopeBlock;
-		public bool NeedThis = false;
 		public bool HostsParameters = false;
 		
 		// For tracking the number of scopes created.
 		public int id;
 		static int count;
-		bool inited = false;
 		
 		ArrayList locals = new ArrayList ();
 		ArrayList children = new ArrayList ();
@@ -643,40 +1022,41 @@
 		//
 		// The types and fields generated
 		//
+		public readonly Location loc;
 		public TypeBuilder ScopeTypeBuilder;
 		public Type ScopeType;
-		public ConstructorInfo ScopeConstructor;
-		public FieldBuilder THIS;
-		public FieldBuilder ParentLink;
+		public Field THIS;
 
-		//
-		// Points to the object of type `ScopeTypeBuilder' that
-		// holds the data for the scope
-		//
-		LocalBuilder scope_instance;
+		public CompilerGeneratedClass HelperClass;
+
+		ExpressionStatement scope_instance;
 		
-		public ScopeInfo (CaptureContext cc, Block b)
+		public ScopeInfo (CaptureContext cc, Block block)
 		{
 			CaptureContext = cc;
-			ScopeBlock = b;
+			ScopeBlock = block;
+			loc = cc.loc;
 			id = count++;
 
+			Report.Debug (64, "NEW SCOPE", this, cc, block);
+			Report.StackTrace ();
+
 			cc.RegisterCaptureContext ();
 		}
 
-		public void AddLocal (LocalInfo li)
+		public ScopeInfo (CaptureContext cc, Block block, CompilerGeneratedClass helper)
+			: this (cc, block)
 		{
-			if (locals.Contains (li))
-				return;
+			HelperClass = helper;
+		}
 
-			locals.Add (li);
-}
-	
-		public bool IsCaptured (LocalInfo li)
+		public Variable AddLocal (LocalInfo local)
 		{
-			return locals.Contains (li);
+			CapturedLocal cl = new CapturedLocal (this, local);
+			locals.Add (cl);
+			return cl;
 		}
-		
+
 		internal void AddChild (ScopeInfo si)
 		{
 			if (children.Contains (si))
@@ -719,8 +1099,6 @@
 			Pad ();
 			Console.WriteLine ("START");
 			indent++;
-			Pad ();
-			Console.WriteLine ("NeedThis=" + NeedThis);
 			foreach (LocalInfo li in locals){
 				Pad ();
 				Console.WriteLine ("var {0}", MakeFieldName (li.Name));
@@ -733,45 +1111,82 @@
 			Console.WriteLine ("END");
 		}
 
-		private string MakeFieldName (string local_name)
+		protected string MakeFieldName (string local_name)
 		{
 			return "<" + id + ":" + local_name + ">";
 		}
 
+		bool resolved;
+
+		public Field ParentLink {
+			get { return HelperClass.ParentLink; }
+		}
+
+		public void CreateScopeType ()
+		{
+			Report.Debug (64, "CREATE SCOPE TYPE", this, HelperClass, ParentScope);
+
+			if (HelperClass != null)
+				return;
+
+			if (ParentScope != null)
+				ParentScope.CreateScopeType ();
+
+			HelperClass = CaptureContext.Host.CreateScopeType (this);
+			ScopeTypeBuilder = HelperClass.TypeBuilder;
+
+			Report.Debug (64, "CREATE SCOPE TYPE #1", this, HelperClass, ParentScope,
+				      ScopeTypeBuilder);
+		}
+
 		public void EmitScopeType (EmitContext ec)
 		{
 			// EmitDebug ();
 
-			if (ScopeTypeBuilder != null)
+			if (resolved)
 				return;
-			
-			Type container;
-			if (ec.TypeContainer.CurrentType != null)
-				container = ec.TypeContainer.CurrentType;
-			else
-				container = ec.TypeContainer.TypeBuilder;
 
-			CaptureContext.Host.CreateScopeType (ec, this);
-			
-			if (NeedThis)
-				THIS = ScopeTypeBuilder.DefineField ("<>THIS", container, FieldAttributes.Assembly);
+			if (!(CaptureContext.Host.IsIterator))
+				HelperClass.ResolveType ();
 
+			ScopeType = HelperClass.IsGeneric ?
+				HelperClass.CurrentType : HelperClass.TypeBuilder;
+
+			Report.Debug (64, "EMIT SCOPE TYPE", this, HelperClass, CaptureContext,
+				      CaptureContext.NeedThis, ParentScope, ScopeTypeBuilder,
+				      ec, ec.DeclContainer, ec.DeclContainer.IsGeneric);
+
+			if (ParentScope != null)
+				ParentScope.EmitScopeType (ec);
+			else if (CaptureContext.NeedThis) {
+				Type container;
+				if (ec.TypeContainer.CurrentType != null)
+					container = ec.TypeContainer.CurrentType;
+				else
+					container = ec.TypeContainer.TypeBuilder;
+
+				THIS = new CapturedVariable (this, "<>THIS", container);
+			}
+
+#if FIXME
 			if (ParentScope != null){
 				if (ParentScope.ScopeTypeBuilder == null){
-					throw new Exception (String.Format ("My parent has not been initialized {0} and {1}", ParentScope, this));
+					throw new InternalErrorException (
+						"My parent has not been initialized " +
+						"{0} and {1}", ParentScope, this);
 				}
 
 				if (ParentScope.ScopeTypeBuilder != ScopeTypeBuilder)
-					ParentLink = ScopeTypeBuilder.DefineField (
-						"<>parent", ParentScope.ScopeType, FieldAttributes.Assembly);
+					ParentLink = new CapturedVariable (
+						this, "<>parent", ParentScope.ScopeType);
 			}
-			
-			if (NeedThis && ParentScope != null)
-				throw new Exception ("I was not expecting THIS && having a parent");
+#endif
 
-			foreach (LocalInfo info in locals)
-				info.FieldBuilder = ScopeTypeBuilder.DefineField (
-					MakeFieldName (info.Name), info.VariableType, FieldAttributes.Assembly);
+#if FIXME
+			foreach (LocalInfo info in locals) {
+				info.Field = new CapturedVariable (
+					this, MakeFieldName (info.Name), info.VariableType);
+			}
 
 			if (HostsParameters){
 				Hashtable captured_parameters = CaptureContext.captured_parameters;
@@ -779,101 +1194,42 @@
 				foreach (DictionaryEntry de in captured_parameters){
 					string name = (string) de.Key;
 					CapturedParameter cp = (CapturedParameter) de.Value;
-					FieldBuilder fb;
-					
-					fb = ScopeTypeBuilder.DefineField ("<p:" + name + ">", cp.Type, FieldAttributes.Assembly);
-					cp.FieldBuilder = fb;
+
+					cp.Field = new CapturedVariable (
+						this, "<p:" + name + ">", cp.Type);
 				}
 			}
+#endif
 
-			foreach (ScopeInfo si in children){
-				si.EmitScopeType (ec);
-			}
-		}
+			resolved = true;
 
-		public void CloseTypes ()
-		{
-			RootContext.RegisterCompilerGeneratedType (ScopeTypeBuilder);
+			if (!(CaptureContext.Host.IsIterator))
+				HelperClass.DefineMembers ();
+
+			Report.Debug (64, "EMIT SCOPE TYPE #1", this, HelperClass, ParentScope,
+				      ParentLink);
+
 			foreach (ScopeInfo si in children)
-				si.CloseTypes ();
+				si.EmitScopeType (ec);
 		}
 
-		//
-		// Emits the initialization code for the scope
-		//
-		public void EmitInitScope (EmitContext ec)
+		public ExpressionStatement GetScopeInitializer (EmitContext ec)
 		{
-			ILGenerator ig = ec.ig;
-
-			if (inited)
-				return;
-
-			if (ScopeConstructor == null)
-				throw new Exception ("ScopeConstructor is null for" + this.ToString ());
-			
-			if (!CaptureContext.Host.IsIterator) {
-				scope_instance = ig.DeclareLocal (ScopeType);
-				ig.Emit (OpCodes.Newobj, ScopeConstructor);
-				ig.Emit (OpCodes.Stloc, scope_instance);
+			if (scope_instance == null) {
+				scope_instance = new ScopeInitializer (this, loc);
+				if (scope_instance.Resolve (ec) == null)
+					throw new InternalErrorException ();
 			}
 
-			if (THIS != null){
-				if (CaptureContext.Host.IsIterator) {
-					ig.Emit (OpCodes.Ldarg_0);
-					ig.Emit (OpCodes.Ldarg_1);
-				} else {
-					ig.Emit (OpCodes.Ldloc, scope_instance);
-					ig.Emit (OpCodes.Ldarg_0);
-				}
-				ig.Emit (OpCodes.Stfld, THIS);
-			}
-
-			//
-			// Copy the parameter values, if any
-			//
-			int extra = ec.IsStatic ? 0 : 1;
-			if (CaptureContext.Host.IsIterator)
-				extra++;
-			if (HostsParameters){
-				Hashtable captured_parameters = CaptureContext.captured_parameters;
-				
-				foreach (DictionaryEntry de in captured_parameters){
-					CapturedParameter cp = (CapturedParameter) de.Value;
-
-					EmitScopeInstance (ig);
-					ParameterReference.EmitLdArg (ig, cp.Idx + extra);
-					ig.Emit (OpCodes.Stfld, cp.FieldBuilder);
-				}
-			}
-
-			if (ParentScope != null){
-				if (!ParentScope.inited)
-					ParentScope.EmitInitScope (ec);
-
-				if (ParentScope.ScopeTypeBuilder != ScopeTypeBuilder) {
-					//
-					// Only emit initialization in our capturecontext world
-					//
-					if (ParentScope.CaptureContext == CaptureContext){
-						EmitScopeInstance (ig);
-						ParentScope.EmitScopeInstance (ig);
-						ig.Emit (OpCodes.Stfld, ParentLink);
-					} else {
-						EmitScopeInstance (ig);
-						ig.Emit (OpCodes.Ldarg_0);
-						ig.Emit (OpCodes.Stfld, ParentLink);
-					}
-				}
-			}
-			inited = true;
+			return scope_instance;
 		}
 
-		public void EmitScopeInstance (ILGenerator ig)
+		public void EmitScopeInstance (EmitContext ec)
 		{
 			if (CaptureContext.Host.IsIterator)
-				ig.Emit (OpCodes.Ldarg_0);
+				ec.ig.Emit (OpCodes.Ldarg_0);
 			else {
-				if (scope_instance == null){
+				if (scope_instance == null) {
 					//
 					// This is needed if someone overwrites the Emit method
 					// of Statement and manually calls Block.Emit without
@@ -882,16 +1238,9 @@
 					//   ec.EmitScopeInitFromBlock (The_Block);
 					//   The_Block.Emit (ec);
 					// 
-
-					Console.WriteLine (
-				        	"The scope_instance has not been emitted, this typically means\n" +
-						"that inside the compiler someone is calling Block.Emit without\n" +
-						"first calling EmitScopeInitFromBlock for the block.  See compiler" +
-						"source code for an explanation");
-					throw new Exception ("Internal compiler error");
-					
+					throw new InternalErrorException ();
 				}
-				ig.Emit (OpCodes.Ldloc, scope_instance);
+				scope_instance.Emit (ec);
 			}
 		}
 
@@ -935,6 +1284,321 @@
 
 			return sb.ToString ();
 		}
+
+		protected class CapturedLocal : Variable {
+			public readonly ScopeInfo Scope;
+			public readonly LocalInfo Local;
+			public readonly Field Field;
+
+			public FieldExpr FieldInstance;
+
+			public CapturedLocal (ScopeInfo scope, LocalInfo local)
+			{
+				this.Scope = scope;
+				this.Local = local;
+				Field = new CapturedVariable (
+					scope, scope.MakeFieldName (local.Name), local.VariableType);
+			}
+
+			public override Type Type {
+				get { return Field.MemberType; }
+			}
+
+			public override bool NeedsTemporary {
+				get { return true; }
+			}
+
+			public override void EmitInstance (EmitContext ec)
+			{
+				ec.EmitCapturedVariableInstance (Local);
+			}
+
+			public override void Emit (EmitContext ec)
+			{
+				if (ec.capture_context == Scope.CaptureContext)
+					ec.ig.Emit (OpCodes.Ldfld, FieldInstance.FieldInfo);
+				else
+					ec.ig.Emit (OpCodes.Ldfld, Field.FieldBuilder);
+			}
+
+			public override void EmitAssign (EmitContext ec)
+			{
+				if (ec.capture_context == Scope.CaptureContext)
+					ec.ig.Emit (OpCodes.Stfld, FieldInstance.FieldInfo);
+				else
+					ec.ig.Emit (OpCodes.Stfld, Field.FieldBuilder);
+			}
+
+			public override void EmitAddressOf (EmitContext ec)
+			{
+				if (ec.capture_context == Scope.CaptureContext)
+					ec.ig.Emit (OpCodes.Ldflda, FieldInstance.FieldInfo);
+				else
+					ec.ig.Emit (OpCodes.Ldflda, Field.FieldBuilder);
+			}
+		}
+
+#if FIXME
+		protected class CapturedLocalInstance : Variable
+		{
+			public readonly LocalInfo LocalInfo;
+
+			public CapturedLocalInstance (LocalInfo local)
+			{
+				this.LocalInfo = local;
+			}
+
+			public override Type Type {
+				get { return LocalInfo.TheField.Type; }
+			}
+
+			public override bool NeedsTemporary {
+				get { return true; }
+			}
+
+			public override void EmitInstance (EmitContext ec)
+			{
+				ec.EmitCapturedVariableInstance (LocalInfo);
+			}
+
+			public override void Emit (EmitContext ec)
+			{
+				ec.ig.Emit (OpCodes.Ldfld, LocalInfo.TheField.FieldInfo);
+			}
+
+			public override void EmitAssign (EmitContext ec)
+			{
+				ec.ig.Emit (OpCodes.Stfld, LocalInfo.TheField.FieldInfo);
+			}
+
+			public override void EmitAddressOf (EmitContext ec)
+			{
+				ec.ig.Emit (OpCodes.Ldflda, LocalInfo.TheField.FieldInfo);
+			}
+		}
+#endif
+
+		protected sealed class ScopeInitializer : ExpressionStatement
+		{
+			ScopeInfo scope;
+			TypeExpr scope_type;
+			LocalTemporary scope_instance;
+			Expression scope_ctor;
+
+			FieldExpr this_field;
+			Hashtable captured_params;
+
+			ExpressionStatement parent_init;
+
+			public ScopeInitializer (ScopeInfo scope, Location loc)
+			{
+				this.scope = scope;
+				this.loc = loc;
+				eclass = ExprClass.Value;
+			}
+
+			public LocalTemporary ScopeInstance {
+				get { return scope_instance; }
+			}
+
+			public ScopeInfo Scope {
+				get { return scope; }
+			}
+
+			public bool IsIterator {
+				get { return scope.CaptureContext.Host.IsIterator; }
+			}
+
+			public override Expression DoResolve (EmitContext ec)
+			{
+				if (scope_type != null)
+					return this;
+
+				Scope.EmitScopeType (ec);
+
+				if (Scope.HelperClass == null)
+					throw new InternalErrorException (
+						"HelperClass is null for " + Scope.ToString ());
+
+				Report.Debug (64, "RESOLVE SCOPE INITIALIZER", this, Scope,
+					      Scope.ParentScope, ec, ec.TypeContainer.Name,
+					      ec.DeclContainer, ec.DeclContainer.IsGeneric);
+
+				if (ec.DeclContainer.IsGeneric)
+					scope_type = new ConstructedType (
+						Scope.ScopeType, ec.DeclContainer.TypeParameters, loc);
+				else
+					scope_type = new TypeExpression (Scope.ScopeType, loc);
+
+				scope_type = scope_type.ResolveAsTypeTerminal (ec, false);
+				if ((scope_type == null) || (scope_type.Type == null))
+					throw new InternalErrorException ();
+				type = scope_type.Type;
+
+				if (!IsIterator) {
+					scope_instance = new LocalTemporary (type);
+					ArrayList args = new ArrayList ();
+					if (Scope.HelperClass.ParentType != null) {
+						args.Add (new Argument (new SimpleThis (
+							Scope.HelperClass.ParentType, loc)));
+					}
+					scope_ctor = new New (scope_type, args, loc).Resolve (ec);
+					if (scope_ctor == null)
+						throw new InternalErrorException ();
+				}
+
+				if (Scope.THIS != null) {
+					this_field = (FieldExpr) Expression.MemberLookup (
+						ec.ContainerType, type, "<>THIS", loc);
+					Report.Debug (64, "RESOLVE SCOPE INITIALIZER #1", this, Scope, ec,
+						      ec.ContainerType, type, this_field,
+						      Scope.ParentScope);
+					if (this_field == null)
+						throw new InternalErrorException ();
+				}
+
+				if ((Scope.ParentScope != null) &&
+				    (Scope.ParentScope.ScopeTypeBuilder != Scope.ScopeTypeBuilder)) {
+					parent_init = Scope.ParentScope.GetScopeInitializer (ec);
+				}
+
+				foreach (CapturedLocal local in Scope.locals) {
+					FieldExpr fe = (FieldExpr) Expression.MemberLookup (
+						ec.ContainerType, type, local.Field.Name, loc);
+					if (fe == null)
+						throw new InternalErrorException ();
+
+					fe.InstanceExpression = this;
+					local.FieldInstance = fe;
+				}
+
+				//
+				// Copy the parameter values, if any
+				//
+				int extra = ec.IsStatic ? 0 : 1;
+				if (IsIterator)
+					extra++;
+				if (Scope.HostsParameters){
+					Hashtable hash = Scope.CaptureContext.captured_parameters;
+					captured_params = new Hashtable ();
+					foreach (CapturedParameter cp in hash.Values) {
+						FieldExpr fe = (FieldExpr) Expression.MemberLookup (
+							ec.ContainerType, type, cp.Field.Name, loc);
+						if (fe == null)
+							throw new InternalErrorException ();
+
+						captured_params.Add (cp.Idx + extra, fe);
+					}
+				}
+
+				return this;
+			}
+
+			bool initialized;
+
+			protected void EmitScopeInstance (EmitContext ec)
+			{
+				if (IsIterator)
+					ec.ig.Emit (OpCodes.Ldarg_0);
+				else {
+					try {
+						scope_instance.Emit (ec);
+					} catch {
+						Report.Debug (64, "EMIT SCOPE INSTANCE FUCK",
+							      this, Scope, ec);
+						Report.StackTrace ();
+
+						ec.ig.Emit (OpCodes.Ldarg_0);
+
+						ec.ig.Emit (OpCodes.Neg);
+						ec.ig.Emit (OpCodes.Not);
+						ec.ig.Emit (OpCodes.Neg);
+					}
+				}
+			}
+
+			static int next_id;
+			int id = ++next_id;
+
+			protected void DoEmit (EmitContext ec)
+			{
+				if (initialized)
+					return;
+				initialized = true;
+
+				Report.Debug (64, "EMIT SCOPE INIT", this, id,
+					      Scope, IsIterator, scope_instance, ec);
+
+				ec.ig.Emit (OpCodes.Nop);
+				ec.ig.Emit (OpCodes.Ldc_I4, id);
+				ec.ig.Emit (OpCodes.Pop);
+				ec.ig.Emit (OpCodes.Nop);
+
+				if (!IsIterator) {
+					scope_ctor.Emit (ec);
+					scope_instance.Store (ec);
+				}
+
+				if (Scope.THIS != null) {
+					if (IsIterator) {
+						ec.ig.Emit (OpCodes.Ldarg_0);
+						ec.ig.Emit (OpCodes.Ldarg_1);
+					} else {
+						scope_instance.Emit (ec);
+						ec.ig.Emit (OpCodes.Ldarg_0);
+					}
+					ec.ig.Emit (OpCodes.Stfld, this_field.FieldInfo);
+				}
+
+				if (Scope.HostsParameters) {
+					foreach (DictionaryEntry de in captured_params) {
+						FieldExpr fe = (FieldExpr) de.Value;
+						int idx = (int) de.Key;
+
+						EmitScopeInstance (ec);
+						ParameterReference.EmitLdArg (ec.ig, idx);
+						ec.ig.Emit (OpCodes.Stfld, fe.FieldInfo);
+					}
+				}
+
+				if (parent_init != null) {
+					Report.Debug (64, "EMIT SCOPE INIT PARENT", this, id, Scope,
+						      Scope.ParentScope, parent_init, ec);
+					parent_init.EmitStatement (ec);
+				}
+			}
+
+			public override void Emit (EmitContext ec)
+			{
+				DoEmit (ec);
+				EmitScopeInstance (ec);
+			}
+
+			public override void EmitStatement (EmitContext ec)
+			{
+				DoEmit (ec);
+			}
+
+			protected class SimpleThis : Expression
+			{
+				public SimpleThis (Type type, Location loc)
+				{
+					this.type = type;
+					this.loc = loc;
+					eclass = ExprClass.Value;
+				}
+
+				public override Expression DoResolve (EmitContext ec)
+				{
+					return this;
+				}
+
+				public override void Emit (EmitContext ec)
+				{
+					ec.ig.Emit (OpCodes.Ldarg_0);
+				}
+			}
+		}
 	}
 
 	//
@@ -973,17 +1637,17 @@
 		Hashtable captured_fields = new Hashtable ();
 		Hashtable captured_variables = new Hashtable ();
 		public Hashtable captured_parameters = new Hashtable ();
-		public AnonymousContainer Host;
-		
+		public IAnonymousContainer Host;
+
 		public CaptureContext (ToplevelBlock toplevel_owner, Location loc,
-				       AnonymousContainer host)
+				       IAnonymousContainer host)
 		{
 			cc_id = count++;
 			this.toplevel_owner = toplevel_owner;
+			this.Host = host;
 			this.loc = loc;
 
-			if (host != null)
-				Host = host;
+			Report.Debug (64, "NEW CAPTURE CONTEXT", this, toplevel_owner, loc);
 		}
 
 		void DoPath (StringBuilder sb, CaptureContext cc)
@@ -1005,7 +1669,7 @@
 				cc.Host = new_host;
 			}
 		}
-		
+
 		public override string ToString ()
 		{
 			StringBuilder sb = new StringBuilder ();
@@ -1029,41 +1693,71 @@
 			}
 		}
 
-		ScopeInfo GetScopeForBlock (Block block)
+		internal ScopeInfo CreateRootScope (AnonymousContainer host)
 		{
+			this.Host = host;
+
+			Report.Debug (64, "CREATE ROOT SCOPE", this, toplevel_owner,
+				      toplevel_owner.ScopeInfo, host);
+
+			if (toplevel_owner.ScopeInfo != null)
+				return toplevel_owner.ScopeInfo;
+
+			ScopeInfo si = new ScopeInfo (this, toplevel_owner, host);
+			si.CreateScopeType ();
+
+			toplevel_owner.ScopeInfo = si;
+			scopes.Add (toplevel_owner.ID, si);
+			return si;
+		}
+
+		internal ScopeInfo GetScopeForBlock (Block block)
+		{
 			ScopeInfo si = (ScopeInfo) scopes [block.ID];
+			Report.Debug (64, "GET SCOPE FOR BLOCK", this, block,
+				      block.ScopeInfo, block.Parent, si);
 			if (si != null)
 				return si;
-			si = new ScopeInfo (this, block);
+
+			block.ScopeInfo = si = new ScopeInfo (this, block);
+			si.CreateScopeType ();
 			scopes [block.ID] = si;
 			return si;
 		}
-		
-		public void AddLocal (AnonymousContainer am, LocalInfo li)
+
+		public Variable AddLocal (AnonymousContainer am, LocalInfo li)
 		{
-			if (li.Block.Toplevel != toplevel_owner){
-				ParentCaptureContext.AddLocal (am, li);
-				return;
-			}
+			Report.Debug (64, "ADD LOCAL", this, li.Name, loc, li.Block,
+				      li.Block.Toplevel, toplevel_owner);
+
+			if (li.Block.Toplevel != toplevel_owner)
+				return ParentCaptureContext.AddLocal (am, li);
+
 			ScopeInfo scope = GetScopeForBlock (li.Block);
 
+#if FIXME
 			//
 			// Adjust the owner
 			//
 			if (Host != null)
 				Host.RegisterScope (scope);
+#endif
 
 			//
 			// Adjust the user
 			//
 			am.RegisterScope (scope);
-			
-			if (captured_variables [li] != null)
-				return;
-			
+
+			Report.Debug (64, "ADD LOCAL #1", this, li.Name, scope);
+
+			Variable var = (Variable) captured_variables [li];
+			if (var == null) {
+				var = scope.AddLocal (li);
+				captured_variables.Add (li, var);
+			}
+
 			have_captured_vars = true;
-			captured_variables [li] = li;
-			scope.AddLocal (li);
+			return var;
 		}
 
 		//
@@ -1093,27 +1787,32 @@
 		//
 		// Records the captured parameter at the appropriate CaptureContext
 		//
-		public void AddParameter (EmitContext ec, AnonymousContainer am,
-					  string name, Type t, int idx)
+		public Expression AddParameter (EmitContext ec, Parameter par, int idx, Location loc)
 		{
-			CaptureContext cc = ContextForParameter (ec.CurrentBlock.Toplevel, name);
-
-			cc.AddParameterToContext (am, name, t, idx);
+			CaptureContext cc = ContextForParameter (ec.CurrentBlock.Toplevel, par.Name);
+			return cc.AddParameterToContext (ec.CurrentAnonymousMethod, par, idx, loc);
 		}
 
 		//
 		// Records the parameters in the context
 		//
-		public void AddParameterToContext (AnonymousContainer am, string name, Type t, int idx)
+		public Expression AddParameterToContext (AnonymousContainer am, Parameter par,
+							 int idx, Location loc)
 		{
 			if (captured_parameters == null)
 				captured_parameters = new Hashtable ();
-			if (captured_parameters [name] == null)
-				captured_parameters [name] = new CapturedParameter (t, idx);
 
 			ScopeInfo scope = GetScopeForBlock (toplevel_owner);
 			scope.HostsParameters = true;
 			am.RegisterScope (scope);
+
+			CapturedParameter cp = (CapturedParameter) captured_parameters [par.Name];
+			if (cp == null) {
+				cp = new CapturedParameter (scope, par, idx);
+				captured_parameters.Add (par.Name, cp);
+			}
+
+			return new CapturedParameterReference (scope, cp, loc);
 		}
 
 		//
@@ -1164,13 +1863,13 @@
 			}
 		}
 
-		public bool IsCaptured (LocalInfo local)
+		public bool NeedThis {
+			get { return HaveCapturedFields || referenced_this; }
+		}
+
+		public Variable GetCapturedVariable (LocalInfo local)
 		{
-			foreach (ScopeInfo si in scopes.Values){
-				if (si.IsCaptured (local))
-					return true;
-			}
-			return false;
+			return (Variable) captured_variables [local];
 		}
 
 		//
@@ -1188,45 +1887,23 @@
 
 		public void EmitAnonymousHelperClasses (EmitContext ec)
 		{
-			if (roots.Count != 0){
-				foreach (ScopeInfo root in roots){
-					//
-					// FIXME: We really should do this in a per-ScopeInfo
-					// basis, instead of having the NeedThis applied to
-					// all of the roots.
-					//
-					root.NeedThis = HaveCapturedFields || referenced_this;
-					
+			Report.Debug (64, "EMIT ANONYMOUS HELPERS");
+
+			if (roots.Count != 0) {
+				foreach (ScopeInfo root in roots)
 					root.EmitScopeType (ec);
-				}
 			} 
 		}
 
-		public void CloseAnonymousHelperClasses ()
+		public ExpressionStatement GetScopeInitializerForBlock (EmitContext ec, Block b)
 		{
-			if (roots.Count != 0)
-				foreach (ScopeInfo root in roots)
-					root.CloseTypes ();
-		}
-
-		public void EmitInitScope (EmitContext ec)
-		{
-			EmitAnonymousHelperClasses (ec);
-			if (roots.Count != 0)
-				foreach (ScopeInfo root in roots)
-					root.EmitInitScope (ec);		}
-
-		//
-		// This is called externally when we start emitting code for a block
-		// if the block has a ScopeInfo associated, emit the init code
-		//
-		public void EmitScopeInitFromBlock (EmitContext ec, Block b)
-		{
+			Report.Debug (64, "GET SCOPE INIT FOR BLOCK", this, Host, b);
 			ScopeInfo si = (ScopeInfo) scopes [b.ID];
 			if (si == null)
-				return;
+				return null;
 
-			si.EmitInitScope (ec);
+			Report.Debug (64, "GET SCOPE INIT FOR BLOCK #1", this, Host, b, si);
+			return si.GetScopeInitializer (ec);
 		}
 		
 		//
@@ -1239,12 +1916,18 @@
 			ILGenerator ig = ec.ig;
 			ScopeInfo si;
 
+			Report.Debug (64, "EMIT CAPTURED VARIABLE INSTANCE", this, li.Name,
+				      am, li.Block.Toplevel, toplevel_owner);
+
 			if (li.Block.Toplevel == toplevel_owner){
 				si = (ScopeInfo) scopes [li.Block.ID];
-				si.EmitScopeInstance (ig);
+				si.EmitScopeInstance (ec);
 				return;
 			}
 
+			Report.Debug (64, "EMIT CAPTURED VARIABLE INSTANCE #1", this, li.Name,
+				      am, am.IsIterator, li.Block.Toplevel, toplevel_owner, am.Scope);
+
 			si = am.Scope;
 			ig.Emit (OpCodes.Ldarg_0);
 			if (si != null){
@@ -1252,15 +1935,19 @@
 					return;
 				}
 
+			Report.Debug (64, "EMIT CAPTURED VARIABLE INSTANCE #2", this, li.Name,
+				      si, si.ParentLink, si.ScopeBlock, li.Block);
+
 				while (si.ScopeBlock.ID != li.Block.ID){
 					if (si.ParentLink != null)
-						ig.Emit (OpCodes.Ldfld, si.ParentLink);
+						ig.Emit (OpCodes.Ldfld, si.ParentLink.FieldBuilder);
 					si = si.ParentScope;
 					if (si == null) {
 						si = am.Scope;
-						Console.WriteLine ("Target: {0} {1}", li.Block.ID, li.Name);
+						Console.WriteLine ("Target: {0} {1}", li.Block, li.Name);
 						while (si.ScopeBlock.ID != li.Block.ID){
-							Console.WriteLine ("Trying: {0}", si.ScopeBlock.ID);
+							Console.WriteLine ("Trying: {0} {1}",
+									   si, si.ScopeBlock);
 							si = si.ParentScope;
 						}
 
@@ -1295,7 +1982,7 @@
 
 			if (ec.CurrentBlock.Toplevel == toplevel_owner) {
 				si = (ScopeInfo) scopes [toplevel_owner.ID];
-				si.EmitScopeInstance (ig);
+				si.EmitScopeInstance (ec);
 			} else {
 				si = ec.CurrentAnonymousMethod.Scope;
 				ig.Emit (OpCodes.Ldarg_0);
@@ -1303,7 +1990,7 @@
 
 			if (si != null){
 				while (si.ParentLink != null) {
-					ig.Emit (OpCodes.Ldfld, si.ParentLink);
+					ig.Emit (OpCodes.Ldfld, si.ParentLink.FieldBuilder);
 					si = si.ParentScope;
 				} 
 			}
@@ -1328,11 +2015,11 @@
 				// FIXME: implementing this.
 				//
 			}
-			ec.ig.Emit (OpCodes.Ldfld, par_info.FieldBuilder);
+			ec.ig.Emit (OpCodes.Ldfld, par_info.Field.FieldBuilder);
 
 			if (leave_copy){
 				ec.ig.Emit (OpCodes.Dup);
-				temp = new LocalTemporary (par_info.FieldBuilder.FieldType);
+				temp = new LocalTemporary (par_info.Field.MemberType);
 				temp.Store (ec);
 			}
 		}
@@ -1357,10 +2044,10 @@
 			source.Emit (ec);
 			if (leave_copy){
 				ig.Emit (OpCodes.Dup);
-				temp = new LocalTemporary (par_info.FieldBuilder.FieldType);
+				temp = new LocalTemporary (par_info.Field.MemberType);
 				temp.Store (ec);
 			}
-			ig.Emit (OpCodes.Stfld, par_info.FieldBuilder);
+			ig.Emit (OpCodes.Stfld, par_info.Field.FieldBuilder);
 			if (temp != null)
 				temp.Emit (ec);
 		}
@@ -1378,29 +2065,9 @@
 			}
 			EmitParameterInstance (ec, name);
 			CapturedParameter par_info = (CapturedParameter) captured_parameters [name];
-			ec.ig.Emit (OpCodes.Ldflda, par_info.FieldBuilder);
+			ec.ig.Emit (OpCodes.Ldflda, par_info.Field.FieldBuilder);
 		}
 
-		//
-		// The following methods are only invoked on the host for the
-		// anonymous method.
-		//
-		public void EmitMethodHostInstance (EmitContext target, AnonymousContainer am)
-		{
-			ILGenerator ig = target.ig;
-			ScopeInfo si = am.Scope;
-
-			AnonymousContainer container = am.ContainerAnonymousMethod;
-
-			if ((si == null) || ((container != null) && (si == container.Scope))) {
-				ig.Emit (OpCodes.Ldarg_0);
-				return;
-			}
-
-			si.EmitInitScope (target);
-			si.EmitScopeInstance (ig);
-		}
-
 		public void RegisterCaptureContext ()
 		{
 			toplevel_owner.RegisterCaptureContext (this);
@@ -1474,7 +2141,7 @@
 			}
 			return parent;
 		}
-		
+
 		//
 		// Links all the scopes
 		//
@@ -1483,7 +2150,9 @@
 		{
 			if (linked)
 				return;
-			
+
+			Report.Debug (64, "LINK SCOPES", this, ParentCaptureContext);
+
 			linked = true;
 			if (ParentCaptureContext != null)
 				ParentCaptureContext.LinkScopes ();
@@ -1492,9 +2161,14 @@
 			ScopeInfo [] scope_list = new ScopeInfo [scope_count];
 			scopes.Values.CopyTo (scope_list, 0);
 
+			Report.Debug (64, "LINK SCOPES #1", this, scope_list);
+
 			for (int i = 0; i < scope_count; i++){
 				ScopeInfo parent = GetParentScope (scope_list [i], scope_list);
 
+				Report.Debug (64, "LINK SCOPES #2", this, scope_list, i,
+					      scope_list [i], parent);
+
 				if (parent == null){
 					roots.Add (scope_list [i]);
 					continue;
@@ -1504,17 +2178,28 @@
 				parent.AddChild (scope_list [i]);
 			}
 
+			Report.Debug (64, "LINK SCOPES #3", this, ParentCaptureContext, roots);
+
 			//
 			// Link the roots to their parent containers if any.
 			//
 			if (ParentCaptureContext != null && roots.Count != 0){
 				ScopeInfo one_root = (ScopeInfo) roots [0];
 				bool found = false;
-				
+
+				Report.Debug (64, "LINK SCOPES #4", this, one_root,
+					      ParentCaptureContext.roots);
+
 				foreach (ScopeInfo a_parent_root in ParentCaptureContext.roots){
+					Report.Debug (64, "LINK SCOPES #5", this, a_parent_root,
+						      one_root);
+
 					if (!IsAncestor (a_parent_root, one_root))
 						continue;
 
+					Report.Debug (64, "LINK SCOPES #6", this, a_parent_root,
+						      one_root, roots);
+
 					found = true;
 					
 					// Found, link all the roots to this root
Index: expression.cs
===================================================================
--- expression.cs	(revision 63019)
+++ expression.cs	(working copy)
@@ -3309,6 +3309,7 @@
 		bool is_readonly;
 		bool prepared;
 		LocalTemporary temp;
+		Variable variable;
 
 		public LocalVariableReference (Block block, string name, Location l)
 		{
@@ -3363,20 +3364,18 @@
 			if (!VerifyAssigned (ec))
 				return null;
 
-			if (ec.CurrentAnonymousMethod != null){
-				//
-				// If we are referencing a variable from the external block
-				// flag it for capturing
-				//
-				if ((local_info.Block.Toplevel != ec.CurrentBlock.Toplevel) ||
-				    ec.CurrentAnonymousMethod.IsIterator)
-				{
-					if (local_info.AddressTaken){
-						AnonymousMethod.Error_AddressOfCapturedVar (local_info.Name, loc);
-						return null;
-					}
-					ec.CaptureVariable (local_info);
+			//
+			// If we are referencing a variable from the external block
+			// flag it for capturing
+			//
+			if (ec.MustCaptureVariable (local_info)) {
+				if (local_info.AddressTaken){
+					AnonymousMethod.Error_AddressOfCapturedVar (local_info.Name, loc);
+					return null;
 				}
+
+				variable = ec.CaptureVariable (local_info);
+				type = variable.Type;
 			}
 
 			return this;
@@ -3439,90 +3438,55 @@
 			return Name == lvr.Name && Block == lvr.Block;
 		}
 
+		public Variable Variable {
+			get { return variable != null ? variable : local_info.Variable; }
+		}
+
 		public override void Emit (EmitContext ec)
 		{
-			ILGenerator ig = ec.ig;
-
-			if (local_info.FieldBuilder == null){
-				//
-				// A local variable on the local CLR stack
-				//
-				ig.Emit (OpCodes.Ldloc, local_info.LocalBuilder);
-			} else {
-				//
-				// A local variable captured by anonymous methods.
-				//
-				if (!prepared)
-					ec.EmitCapturedVariableInstance (local_info);
-				
-				ig.Emit (OpCodes.Ldfld, local_info.FieldBuilder);
-			}
+			if (!prepared)
+				Variable.EmitInstance (ec);
+			Variable.Emit (ec);
 		}
 		
 		public void Emit (EmitContext ec, bool leave_copy)
 		{
 			Emit (ec);
-			if (leave_copy){
+			if (leave_copy) {
 				ec.ig.Emit (OpCodes.Dup);
-				if (local_info.FieldBuilder != null){
+				if (Variable.NeedsTemporary) {
 					temp = new LocalTemporary (Type);
 					temp.Store (ec);
 				}
 			}
 		}
-		
-		public void EmitAssign (EmitContext ec, Expression source, bool leave_copy, bool prepare_for_load)
+
+		public void EmitAssign (EmitContext ec, Expression source, bool leave_copy,
+					bool prepare_for_load)
 		{
 			ILGenerator ig = ec.ig;
 			prepared = prepare_for_load;
 
-			if (local_info.FieldBuilder == null){
-				//
-				// A local variable on the local CLR stack
-				//
-				if (local_info.LocalBuilder == null)
-					throw new Exception ("This should not happen: both Field and Local are null");
-
-				source.Emit (ec);
-				if (leave_copy)
-					ec.ig.Emit (OpCodes.Dup);
-				ig.Emit (OpCodes.Stloc, local_info.LocalBuilder);
-			} else {
-				//
-				// A local variable captured by anonymous methods or itereators.
-				//
-				ec.EmitCapturedVariableInstance (local_info);
-
-				if (prepare_for_load)
-					ig.Emit (OpCodes.Dup);
-				source.Emit (ec);
-				if (leave_copy){
-					ig.Emit (OpCodes.Dup);
+			Variable.EmitInstance (ec);
+			if (prepare_for_load)
+				ig.Emit (OpCodes.Dup);
+			source.Emit (ec);
+			if (leave_copy) {
+				ig.Emit (OpCodes.Dup);
+				if (Variable.NeedsTemporary) {
 					temp = new LocalTemporary (Type);
 					temp.Store (ec);
 				}
-				ig.Emit (OpCodes.Stfld, local_info.FieldBuilder);
-				if (temp != null)
-					temp.Emit (ec);
 			}
+			Variable.EmitAssign (ec);
+			if (temp != null)
+				temp.Emit (ec);
 		}
 		
 		public void AddressOf (EmitContext ec, AddressOp mode)
 		{
-			ILGenerator ig = ec.ig;
-
-			if (local_info.FieldBuilder == null){
-				//
-				// A local variable on the local CLR stack
-				//
-				ig.Emit (OpCodes.Ldloca, local_info.LocalBuilder);
-			} else {
-				//
-				// A local variable captured by anonymous methods or iterators
-				//
-				ec.EmitCapturedVariableInstance (local_info);
-				ig.Emit (OpCodes.Ldflda, local_info.FieldBuilder);
-			}
+			Variable.EmitInstance (ec);
+			Variable.EmitAddressOf (ec);
 		}
 
 		public override string ToString ()
@@ -3636,15 +3600,6 @@
 						par.Name);
 					return false;
 				}
-
-				//
-				// If we are referencing the parameter from the external block
-				// flag it for capturing
-				//
-				//Console.WriteLine ("Is parameter `{0}' local? {1}", name, block.IsLocalParameter (name));
-				if (!block.Toplevel.IsLocalParameter (name)){
-					ec.CaptureParameter (name, type, idx);
-				}
 			}
 
 			return true;
@@ -3684,6 +3639,9 @@
 			if (is_out && ec.DoFlowAnalysis && (!ec.OmitStructFlowAnalysis || !vi.TypeInfo.IsStruct) && !IsAssigned (ec, loc))
 				return null;
 
+			if (ec.MustCaptureParameter (block, name))
+				return ec.capture_context.AddParameter (ec, par, idx, loc);
+
 			return this;
 		}
 
@@ -3694,6 +3652,9 @@
 
 			SetAssigned (ec);
 
+			if (ec.MustCaptureParameter (block, name))
+				return ec.capture_context.AddParameter (ec, par, idx, loc);
+
 			return this;
 		}
 
@@ -3742,8 +3703,11 @@
 			ILGenerator ig = ec.ig;
 			int arg_idx = idx;
 
-			if (ec.HaveCaptureInfo && ec.IsParameterCaptured (name)){				
-				ec.EmitParameter (name, leave_copy, prepared, ref temp);
+			Report.Debug (64, "EMIT PARAMETER REF", this, name, ec.capture_context,
+				      ec.CurrentBlock, ec.CurrentBlock.Toplevel, loc);
+
+			if (ec.HaveCaptureInfo && ec.IsParameterCaptured (name)) {
+				ec.capture_context.EmitParameter (ec, name, leave_copy, prepared, ref temp);
 				return;
 			}
 
@@ -3777,15 +3741,14 @@
 		{
 			prepared = prepare_for_load;
 			if (ec.HaveCaptureInfo && ec.IsParameterCaptured (name)){
-				ec.EmitAssignParameter (name, source, leave_copy, prepare_for_load, ref temp);
+				ec.capture_context.EmitAssignParameter (
+					ec, name, source, leave_copy, prepare_for_load, ref temp);
 				return;
 			}
 
 			ILGenerator ig = ec.ig;
 			int arg_idx = idx;
-			
-			
-			
+
 			if (!ec.MethodIsStatic)
 				arg_idx++;
 
@@ -3818,7 +3781,7 @@
 		public void AddressOf (EmitContext ec, AddressOp mode)
 		{
 			if (ec.HaveCaptureInfo && ec.IsParameterCaptured (name)){
-				ec.EmitAddressOfParameter (name);
+				ec.capture_context.EmitAddressOfParameter (ec, name);
 				return;
 			}
 			
Index: codegen.cs
===================================================================
--- codegen.cs	(revision 63019)
+++ codegen.cs	(working copy)
@@ -363,12 +363,7 @@
 		///    The current iterator
 		/// </summary>
 		public Iterator CurrentIterator {
-			get {
-				if (CurrentAnonymousMethod != null)
-					return CurrentAnonymousMethod.Iterator;
-				else
-					return null;
-			}
+			get { return CurrentAnonymousMethod as Iterator; }
 		}
 
 		/// <summary>
@@ -529,12 +524,6 @@
 			get { return capture_context != null; }
 		}
 
-		public void EmitScopeInitFromBlock (Block b)
-		{
-			if (capture_context != null)
-				capture_context.EmitScopeInitFromBlock (this, b);
-		}
-
 		// <summary>
 		//   Starts a new code branching.  This inherits the state of all local
 		//   variables and parameters from the current branching.
@@ -618,17 +607,12 @@
 			current_flow_branching = current_flow_branching.Parent;
 		}
 
-		public void CaptureVariable (LocalInfo li)
+		public Variable CaptureVariable (LocalInfo li)
 		{
-			capture_context.AddLocal (CurrentAnonymousMethod, li);
 			li.IsCaptured = true;
+			return capture_context.AddLocal (CurrentAnonymousMethod, li);
 		}
 
-		public void CaptureParameter (string name, Type t, int idx)
-		{
-			capture_context.AddParameter (this, CurrentAnonymousMethod, name, t, idx);
-		}
-
 		public void CaptureThis ()
 		{
 			capture_context.CaptureThis (CurrentAnonymousMethod);
@@ -664,25 +648,14 @@
 		}
 
 		//
-		// Emits the instance pointer for the host method
-		//
-		public void EmitMethodHostInstance (EmitContext target, AnonymousMethod am)
-		{
-			if (capture_context != null)
-				capture_context.EmitMethodHostInstance (target, am);
-			else if (IsStatic)
-				target.ig.Emit (OpCodes.Ldnull);
-			else
-				target.ig.Emit (OpCodes.Ldarg_0);
-		}
-
-		//
 		// Returns whether the `local' variable has been captured by an anonymous
 		// method
 		//
-		public bool IsCaptured (LocalInfo local)
+		public Variable GetCapturedVariable (LocalInfo local)
 		{
-			return capture_context.IsCaptured (local);
+			if (capture_context != null)
+				return capture_context.GetCapturedVariable (local);
+			return null;
 		}
 
 		public bool IsParameterCaptured (string name)
@@ -691,6 +664,25 @@
 				return capture_context.IsParameterCaptured (name);
 			return false;
 		}
+
+		public bool MustCaptureParameter (Block block, string name)
+		{
+			if (CurrentAnonymousMethod == null)
+				return false;
+			if (CurrentAnonymousMethod.IsIterator)
+				return true;
+			else
+				return !block.Toplevel.IsLocalParameter (name);
+		}
+
+		public bool MustCaptureVariable (LocalInfo local)
+		{
+			if (CurrentAnonymousMethod == null)
+				return false;
+			if (CurrentAnonymousMethod.IsIterator)
+				return true;
+			return local.Block.Toplevel != CurrentBlock.Toplevel;
+		}
 		
 		public void EmitMeta (ToplevelBlock b)
 		{
@@ -788,7 +780,9 @@
 				}
 			}
 
-			block.CompleteContexts ();
+			if (!block.CompleteContexts (this))
+				return false;
+
 			resolved = true;
 			return true;
 		}
@@ -829,12 +823,6 @@
 					ig.Emit (OpCodes.Ret);
 				}
 			}
-
-			//
-			// Close pending helper classes if we are the toplevel
-			//
-			if (capture_context != null && capture_context.ParentToplevel == null)
-				capture_context.CloseAnonymousHelperClasses ();
 		}
 
 		/// <summary>
@@ -995,6 +983,8 @@
 				HasReturnLabel = true;
 		}
 
+		static int next_temp = 0;
+
 		//
 		// Emits the proper object to address fields on a remapped
 		// variable/parameter to field in anonymous-method/iterator proxy classes.
@@ -1004,14 +994,22 @@
 			ig.Emit (OpCodes.Ldarg_0);
 			if (capture_context != null && CurrentAnonymousMethod != null){
 				ScopeInfo si = CurrentAnonymousMethod.Scope;
+				ig.Emit (OpCodes.Ldc_I4, ++next_temp);
+				ig.Emit (OpCodes.Pop);
+				Report.Debug (64, "EMIT THIS", this, capture_context,
+					      CurrentAnonymousMethod, next_temp, si);
+
 				while (si != null){
+					Report.Debug (64, "EMIT THIS #1", this, capture_context,
+						      CurrentAnonymousMethod, next_temp, si,
+						      si.THIS, si.ParentLink);
 					if (si.ParentLink != null)
-						ig.Emit (OpCodes.Ldfld, si.ParentLink);
+						ig.Emit (OpCodes.Ldfld, si.ParentLink.FieldBuilder);
 					if (si.THIS != null){
-						if (need_address && TypeManager.IsValueType (si.THIS.FieldType))
-							ig.Emit (OpCodes.Ldflda, si.THIS);
+						if (need_address && TypeManager.IsValueType (si.THIS.MemberType))
+							ig.Emit (OpCodes.Ldflda, si.THIS.FieldBuilder);
 						else
-							ig.Emit (OpCodes.Ldfld, si.THIS);
+							ig.Emit (OpCodes.Ldfld, si.THIS.FieldBuilder);
 						break;
 					}
 					si = si.ParentScope;
@@ -1030,21 +1028,6 @@
 			
 			capture_context.EmitCapturedVariableInstance (this, li, CurrentAnonymousMethod);
 		}
-
-		public void EmitParameter (string name, bool leave_copy, bool prepared, ref LocalTemporary temp)
-		{
-			capture_context.EmitParameter (this, name, leave_copy, prepared, ref temp);
-		}
-
-		public void EmitAssignParameter (string name, Expression source, bool leave_copy, bool prepare_for_load, ref LocalTemporary  temp)
-		{
-			capture_context.EmitAssignParameter (this, name, source, leave_copy, prepare_for_load, ref temp);
-		}
-
-		public void EmitAddressOfParameter (string name)
-		{
-			capture_context.EmitAddressOfParameter (this, name);
-		}
 		
 		public Expression GetThis (Location loc)
 		{
Index: statement.cs
===================================================================
--- statement.cs	(revision 63019)
+++ statement.cs	(working copy)
@@ -962,23 +962,31 @@
 		}
 	}
 
+	public abstract class Variable
+	{
+		public abstract Type Type {
+			get;
+		}
+
+		public abstract bool NeedsTemporary {
+			get;
+		}
+
+		public abstract void EmitInstance (EmitContext ec);
+
+		public abstract void Emit (EmitContext ec);
+
+		public abstract void EmitAssign (EmitContext ec);
+
+		public abstract void EmitAddressOf (EmitContext ec);
+	}
+
 	//
 	// The information about a user-perceived local variable
 	//
 	public class LocalInfo {
 		public Expression Type;
 
-		//
-		// Most of the time a variable will be stored in a LocalBuilder
-		//
-		// But sometimes, it will be stored in a field (variables that have been
-		// hoisted by iterators or by anonymous methods).  The context of the field will
-		// be stored in the EmitContext
-		//
-		//
-		public LocalBuilder LocalBuilder;
-		public FieldBuilder FieldBuilder;
-
 		public Type VariableType;
 		public readonly string Name;
 		public readonly Location Location;
@@ -986,6 +994,11 @@
 
 		public VariableInfo VariableInfo;
 
+		Variable var;
+		public Variable Variable {
+			get { return var; }
+		}
+
 		[Flags]
  		enum Flags : byte {
  			Used = 1,
@@ -1022,18 +1035,22 @@
 			Location = l;
 		}
 
-		public void DeclareLocal (ILGenerator ig)
+		public void ResolveVariable (EmitContext ec)
 		{
-			if (Pinned) {
-				//
-				// This is needed to compile on both .NET 1.x and .NET 2.x
-				// the later introduced `DeclareLocal (Type t, bool pinned)'
-				//
-				LocalBuilder = TypeManager.DeclareLocalPinned (ig, VariableType);
-				return;
+			var = ec.GetCapturedVariable (this);
+			if (var == null) {
+				LocalBuilder builder;
+				if (Pinned)
+					//
+					// This is needed to compile on both .NET 1.x and .NET 2.x
+					// the later introduced `DeclareLocal (Type t, bool pinned)'
+					//
+					builder = TypeManager.DeclareLocalPinned (ec.ig, VariableType);
+				else
+					builder = ec.ig.DeclareLocal (VariableType);
+
+				var = new LocalVariable (this, builder);
 			}
-			if (!IsThis && !IsConstant)
-				LocalBuilder = ig.DeclareLocal (VariableType);
 		}
 
 		public bool IsThisAssigned (EmitContext ec, Location loc)
@@ -1185,6 +1202,46 @@
 				flags = value ? (flags | Flags.IsThis) : (flags & ~Flags.IsThis);
 			}
 		}
+
+		protected class LocalVariable : Variable
+		{
+			public readonly LocalInfo LocalInfo;
+			LocalBuilder builder;
+
+			public LocalVariable (LocalInfo local, LocalBuilder builder)
+			{
+				this.LocalInfo = local;
+				this.builder = builder;
+			}
+
+			public override Type Type {
+				get { return LocalInfo.VariableType; }
+			}
+
+			public override bool NeedsTemporary {
+				get { return false; }
+			}
+
+			public override void EmitInstance (EmitContext ec)
+			{
+				// Do nothing.
+			}
+
+			public override void Emit (EmitContext ec)
+			{
+				ec.ig.Emit (OpCodes.Ldloc, builder);
+			}
+
+			public override void EmitAssign (EmitContext ec)
+			{
+				ec.ig.Emit (OpCodes.Stloc, builder);
+			}
+
+			public override void EmitAddressOf (EmitContext ec)
+			{
+				ec.ig.Emit (OpCodes.Ldloca, builder);
+			}
+		}
 	}
 		
 	/// <summary>
@@ -1275,6 +1332,8 @@
 		//
 		Block switch_block;
 
+		ExpressionStatement scope_init;
+
 		protected static int id;
 
 		int this_id;
@@ -1679,6 +1738,8 @@
 			}
 		}
 
+		public ScopeInfo ScopeInfo;
+
 		/// <summary>
 		///   Emits the variable declarations and labels.
 		/// </summary>
@@ -1793,37 +1854,17 @@
 		//
 		public void EmitMeta (EmitContext ec)
 		{
-			ILGenerator ig = ec.ig;
-			
+			if (ec.capture_context != null)
+				scope_init = ec.capture_context.GetScopeInitializerForBlock (ec, this);
+
 			if (variables != null){
-				bool have_captured_vars = ec.HaveCapturedVariables ();
-				
-				foreach (DictionaryEntry de in variables){
-					LocalInfo vi = (LocalInfo) de.Value;
-
-					if (have_captured_vars && ec.IsCaptured (vi))
-						continue;
-
-					vi.DeclareLocal (ig);
-				}
+				foreach (LocalInfo vi in variables.Values)
+					vi.ResolveVariable (ec);
 			}
 
 			if (temporary_variables != null) {
-				AnonymousContainer am = ec.CurrentAnonymousMethod;
-				TypeBuilder scope = null;
-				if ((am != null) && am.IsIterator) {
-					scope = am.Scope.ScopeTypeBuilder;
-					if (scope == null)
-						throw new InternalErrorException ();
-				}
-				foreach (LocalInfo vi in temporary_variables) {
-					if (scope != null) {
-						if (vi.FieldBuilder == null)
-							vi.FieldBuilder = scope.DefineField (
-								vi.Name, vi.VariableType, FieldAttributes.Assembly);
-					} else
-						vi.LocalBuilder = ig.DeclareLocal (vi.VariableType);
-				}
+				foreach (LocalInfo vi in temporary_variables)
+					vi.ResolveVariable (ec);
 			}
 
 			if (children != null){
@@ -2031,15 +2072,18 @@
 						string name = (string) de.Key;
 						LocalInfo vi = (LocalInfo) de.Value;
 
+#if FIXME
 						if (vi.LocalBuilder == null)
 							continue;
 
 						ec.DefineLocalVariable (name, vi.LocalBuilder);
+#endif
 					}
 				}
 			}
 			ec.Mark (StartLocation, true);
-			ec.EmitScopeInitFromBlock (this);
+			if (scope_init != null)
+				scope_init.EmitStatement (ec);
 			DoEmit (ec);
 			ec.Mark (EndLocation, true); 
 
@@ -2083,11 +2127,13 @@
 		// Pointer to the host of this anonymous method, or null
 		// if we are the topmost block
 		//
+		GenericMethod generic;
 		ToplevelBlock container;
 		CaptureContext capture_context;
 		FlowBranchingToplevel top_level_branching;
 
 		Hashtable capture_contexts;
+		ArrayList anonymous_methods;
 		ArrayList children;
 
 		public bool HasVarargs {
@@ -2110,16 +2156,37 @@
 			capture_contexts [cc] = cc;
 		}
 
-		public void CompleteContexts ()
+		public void RegisterAnonymousMethod (AnonymousContainer am)
 		{
-			if (capture_contexts == null)
-				return;
+			if (anonymous_methods == null)
+				anonymous_methods = new ArrayList ();
+			anonymous_methods.Add (am);
+		}
 
-			foreach (CaptureContext cc in capture_contexts.Keys){
-				cc.LinkScopes ();
+		public bool CompleteContexts (EmitContext ec)
+		{
+			Report.Debug (64, "TOPLEVEL COMPLETE CONTEXTS", this, capture_contexts);
+
+			if (capture_contexts != null) {
+				foreach (CaptureContext cc in capture_contexts.Keys)
+					cc.LinkScopes ();
 			}
+
+#if FIXME
+			if (anonymous_methods != null) {
+				foreach (AnonymousContainer am in anonymous_methods)
+					if (!am.CreateMethod (ec))
+						return false;
+			}
+#endif
+
+			return true;
 		}
 
+		public GenericMethod GenericMethod {
+			get { return generic; }
+		}
+
 		public CaptureContext ToplevelBlockCaptureContext {
 			get { return capture_context; }
 		}
@@ -2144,6 +2211,13 @@
 			this (container, (Flags) 0, parameters, start)
 		{
 		}
+
+		public ToplevelBlock (ToplevelBlock container, Parameters parameters, GenericMethod generic,
+				      Location start) :
+			this (container, parameters, start)
+		{
+			this.generic = generic;
+		}
 		
 		public ToplevelBlock (Parameters parameters, Location start) :
 			this (null, (Flags) 0, parameters, start)
@@ -2169,7 +2243,7 @@
 		{
 		}
 
-		public void SetHaveAnonymousMethods (Location loc, AnonymousContainer host)
+		public void SetHaveAnonymousMethods (Location loc, IAnonymousContainer host)
 		{
 			if (capture_context == null)
 				capture_context = new CaptureContext (this, loc, host);
@@ -3299,7 +3373,7 @@
 			}
 
 			public abstract void Emit (EmitContext ec);
-			public abstract void EmitExit (ILGenerator ig);
+			public abstract void EmitExit (EmitContext ec);
 		}
 
 		class ExpressionEmitter : Emitter {
@@ -3313,14 +3387,14 @@
 				// Store pointer in pinned location
 				//
 				converted.Emit (ec);
-				ec.ig.Emit (OpCodes.Stloc, vi.LocalBuilder);
+				vi.Variable.EmitAssign (ec);
 			}
 
-			public override void EmitExit (ILGenerator ig)
+			public override void EmitExit (EmitContext ec)
 			{
-				ig.Emit (OpCodes.Ldc_I4_0);
-				ig.Emit (OpCodes.Conv_U);
-				ig.Emit (OpCodes.Stloc, vi.LocalBuilder);
+				ec.ig.Emit (OpCodes.Ldc_I4_0);
+				ec.ig.Emit (OpCodes.Conv_U);
+				vi.Variable.EmitAssign (ec);
 			}
 		}
 
@@ -3350,13 +3424,13 @@
 					return;
 
 				converted.Emit (ec);
-				ig.Emit (OpCodes.Stloc, vi.LocalBuilder);
+				vi.Variable.EmitAssign (ec);
 			}
 
-			public override void EmitExit(ILGenerator ig)
+			public override void EmitExit (EmitContext ec)
 			{
-				ig.Emit (OpCodes.Ldnull);
-				ig.Emit (OpCodes.Stloc, pinned_string);
+				ec.ig.Emit (OpCodes.Ldnull);
+				ec.ig.Emit (OpCodes.Stloc, pinned_string);
 			}
 		}
 
@@ -3554,13 +3628,11 @@
 			if (has_ret)
 				return;
 
-			ILGenerator ig = ec.ig;
-
 			//
 			// Clear the pinned variable
 			//
 			for (int i = 0; i < data.Length; i++) {
-				data [i].EmitExit (ig);
+				data [i].EmitExit (ec);
 			}
 		}
 	}
@@ -3772,22 +3844,24 @@
 				
 				ig.BeginCatchBlock (c.CatchType);
 
+#if FIXME
 				if (c.VarBlock != null)
 					ec.EmitScopeInitFromBlock (c.VarBlock);
+#endif
 				if (c.Name != null){
 					vi = c.Block.GetLocalInfo (c.Name);
 					if (vi == null)
 						throw new Exception ("Variable does not exist in this block");
 
-					if (vi.IsCaptured){
+					if (vi.Variable.NeedsTemporary) {
 						LocalBuilder e = ig.DeclareLocal (vi.VariableType);
 						ig.Emit (OpCodes.Stloc, e);
-						
-						ec.EmitCapturedVariableInstance (vi);
+
+						vi.Variable.EmitInstance (ec);
 						ig.Emit (OpCodes.Ldloc, e);
-						ig.Emit (OpCodes.Stfld, vi.FieldBuilder);
+						vi.Variable.EmitAssign (ec);
 					} else
-						ig.Emit (OpCodes.Stloc, vi.LocalBuilder);
+						vi.Variable.EmitAssign (ec);
 				} else
 					ig.Emit (OpCodes.Pop);
 
@@ -4164,7 +4238,7 @@
 
 			Type var_type = texpr.Type;
 
-			if (expr.eclass == ExprClass.MethodGroup || expr is AnonymousMethod) {
+			if (expr.eclass == ExprClass.MethodGroup || expr is AnonymousMethodExpression) {
 				Report.Error (446, expr.Location, "Foreach statement cannot operate on a `{0}'",
 					expr.ExprClassName);
 				return false;
@@ -4220,7 +4294,7 @@
 			{
 				EmitThis (ec);
 				ec.ig.Emit (OpCodes.Ldc_I4_0);
-				EmitStore (ec.ig);
+				EmitStore (ec);
 			}
 
 			public void Increment (EmitContext ec)
@@ -4229,7 +4303,7 @@
 				Emit (ec);
 				ec.ig.Emit (OpCodes.Ldc_I4_1);
 				ec.ig.Emit (OpCodes.Add);
-				EmitStore (ec.ig);
+				EmitStore (ec);
 			}
 		}
 
@@ -4323,7 +4397,7 @@
 
 					lengths [i].EmitThis (ec);
 					((ArrayAccess) access).EmitGetLength (ec, i);
-					lengths [i].EmitStore (ig);
+					lengths [i].EmitStore (ec);
 				}
 
 				for (int i = 0; i < rank; i++) {
