<?xml version="1.0"?>
<!DOCTYPE monodoc SYSTEM "http://www.go-mono.org/monodoc.dtd">
<monodoc language="">
    <class name="System.Text.RegularExpressions.Regex" assembly="System">
        <summary>TODO</summary>
        <remarks>TODO</remarks>
        <constructor name="Regex(System.String)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="pattern">TODO</param>
        </constructor>
        <constructor name="Regex(System.String, System.Text.RegularExpressions.RegexOptions)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="pattern">TODO</param>
            <param name="options">TODO</param>
        </constructor>
        <property name="Options">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <value>TODO</value>
        </property>
        <property name="RightToLeft">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <value>TODO</value>
        </property>
        <property name="GroupCount">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <value>TODO</value>
        </property>
        <method name="GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="info">TODO</param>
            <param name="context">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="ToString">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <returns>TODO</returns>
        </method>
        <method name="CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[], System.Reflection.AssemblyName)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="regexes">TODO</param>
            <param name="aname">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[], System.Reflection.AssemblyName, System.Reflection.Emit.CustomAttributeBuilder[])">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="regexes">TODO</param>
            <param name="aname">TODO</param>
            <param name="attribs">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[], System.Reflection.AssemblyName, System.Reflection.Emit.CustomAttributeBuilder[], System.String)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="regexes">TODO</param>
            <param name="aname">TODO</param>
            <param name="attribs">TODO</param>
            <param name="resourceFile">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="Escape(System.String)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="str">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="Unescape(System.String)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="str">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="IsMatch(System.String, System.String)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="input">TODO</param>
            <param name="pattern">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="Match(System.String, System.String)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="input">TODO</param>
            <param name="pattern">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="Match(System.String, System.String, System.Text.RegularExpressions.RegexOptions)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="input">TODO</param>
            <param name="pattern">TODO</param>
            <param name="options">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="Replace(System.String, System.String, System.Text.RegularExpressions.MatchEvaluator)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="input">TODO</param>
            <param name="pattern">TODO</param>
            <param name="evaluator">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="Replace(System.String, System.String, System.Text.RegularExpressions.MatchEvaluator, System.Text.RegularExpressions.RegexOptions)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="input">TODO</param>
            <param name="pattern">TODO</param>
            <param name="evaluator">TODO</param>
            <param name="options">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="Replace(System.String, System.String, System.String)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="input">TODO</param>
            <param name="pattern">TODO</param>
            <param name="replacement">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="Replace(System.String, System.String, System.String, System.Text.RegularExpressions.RegexOptions)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="input">TODO</param>
            <param name="pattern">TODO</param>
            <param name="replacement">TODO</param>
            <param name="options">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="Split(System.String, System.String)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="input">TODO</param>
            <param name="pattern">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="Split(System.String, System.String, System.Text.RegularExpressions.RegexOptions)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="input">TODO</param>
            <param name="pattern">TODO</param>
            <param name="options">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="GetGroupNames">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <returns>TODO</returns>
        </method>
        <method name="GetGroupNumbers">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <returns>TODO</returns>
        </method>
        <method name="GroupNameFromNumber(System.Int32)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="i">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="GroupNumberFromName(System.String)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="name">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="IsMatch(System.String)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="input">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="IsMatch(System.String, System.Int32)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="input">TODO</param>
            <param name="startat">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="Match(System.String)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="input">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="Match(System.String, System.Int32)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="input">TODO</param>
            <param name="startat">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="Match(System.String, System.Int32, System.Int32)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="input">TODO</param>
            <param name="startat">TODO</param>
            <param name="length">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="Matches(System.String)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="input">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="Matches(System.String, System.Int32)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="input">TODO</param>
            <param name="startat">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="Replace(System.String, System.Text.RegularExpressions.MatchEvaluator)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="input">TODO</param>
            <param name="evaluator">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="Replace(System.String, System.Text.RegularExpressions.MatchEvaluator, System.Int32)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="input">TODO</param>
            <param name="evaluator">TODO</param>
            <param name="count">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="Replace(System.String, System.Text.RegularExpressions.MatchEvaluator, System.Int32, System.Int32)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="input">TODO</param>
            <param name="evaluator">TODO</param>
            <param name="count">TODO</param>
            <param name="startat">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="Replace(System.String, System.String)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="input">TODO</param>
            <param name="replacement">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="Replace(System.String, System.String, System.Int32)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="input">TODO</param>
            <param name="replacement">TODO</param>
            <param name="count">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="Replace(System.String, System.String, System.Int32, System.Int32)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="input">TODO</param>
            <param name="replacement">TODO</param>
            <param name="count">TODO</param>
            <param name="startat">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="Split(System.String)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="input">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="Split(System.String, System.Int32)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="input">TODO</param>
            <param name="count">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="Split(System.String, System.Int32, System.Int32)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="input">TODO</param>
            <param name="count">TODO</param>
            <param name="startat">TODO</param>
            <returns>TODO</returns>
        </method>
    </class>
</monodoc>