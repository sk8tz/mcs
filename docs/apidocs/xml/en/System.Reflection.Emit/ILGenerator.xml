<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE monodoc SYSTEM "http://www.go-mono.org/monodoc.dtd">
<monodoc language="en">
    <class name="System.Reflection.Emit.ILGenerator" assembly="corlib">
        <summary>TODO</summary>
        <remarks>TODO</remarks>
        <method name="UsingNamespace(System.String)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="usingNamespace">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="ThrowException(System.Type)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="exceptionType">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="MarkSequencePoint(System.Diagnostics.SymbolStore.ISymbolDocumentWriter, System.Int32, System.Int32, System.Int32, System.Int32)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="document">TODO</param>
            <param name="startLine">TODO</param>
            <param name="startColumn">TODO</param>
            <param name="endLine">TODO</param>
            <param name="endColumn">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="MarkLabel(System.Reflection.Emit.Label)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="loc">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="EndScope">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <returns>TODO</returns>
        </method>
        <method name="EndExceptionBlock">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <returns>TODO</returns>
        </method>
        <method name="EmitWriteLine(System.String)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="val">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="EmitWriteLine(System.Reflection.Emit.LocalBuilder)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="lbuilder">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="EmitWriteLine(System.Reflection.FieldInfo)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="field">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="Emit(System.Reflection.Emit.OpCode, System.Type)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="opcode">TODO</param>
            <param name="type">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="Emit(System.Reflection.Emit.OpCode, System.String)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="opcode">TODO</param>
            <param name="val">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="Emit(System.Reflection.Emit.OpCode, System.Single)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="opcode">TODO</param>
            <param name="val">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="Emit(System.Reflection.Emit.OpCode, System.Reflection.Emit.SignatureHelper)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="opcode">TODO</param>
            <param name="shelper">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="Emit(System.Reflection.Emit.OpCode, System.SByte)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="opcode">TODO</param>
            <param name="val">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="Emit(System.Reflection.Emit.OpCode, System.Reflection.MethodInfo)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="opcode">TODO</param>
            <param name="method">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="Emit(System.Reflection.Emit.OpCode, System.Reflection.Emit.LocalBuilder)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="opcode">TODO</param>
            <param name="lbuilder">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="Emit(System.Reflection.Emit.OpCode, System.Reflection.Emit.Label[])">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="opcode">TODO</param>
            <param name="labels">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="Emit(System.Reflection.Emit.OpCode, System.Reflection.Emit.Label)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="opcode">TODO</param>
            <param name="label">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="Emit(System.Reflection.Emit.OpCode, System.Int64)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="opcode">TODO</param>
            <param name="val">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="Emit(System.Reflection.Emit.OpCode, System.Int32)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="opcode">TODO</param>
            <param name="val">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="Emit(System.Reflection.Emit.OpCode, System.Int16)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="opcode">TODO</param>
            <param name="val">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="Emit(System.Reflection.Emit.OpCode, System.Reflection.FieldInfo)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="opcode">TODO</param>
            <param name="field">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="Emit(System.Reflection.Emit.OpCode, System.Double)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="opcode">TODO</param>
            <param name="val">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="Emit(System.Reflection.Emit.OpCode, System.Reflection.ConstructorInfo)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="opcode">TODO</param>
            <param name="constructor">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="Emit(System.Reflection.Emit.OpCode, System.Byte)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="opcode">TODO</param>
            <param name="val">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="Emit(System.Reflection.Emit.OpCode)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="opcode">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="DefineLabel">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <returns>TODO</returns>
        </method>
        <method name="DeclareLocal(System.Type)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="localType">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="BeginScope">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <returns>TODO</returns>
        </method>
        <method name="BeginFinallyBlock">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <returns>TODO</returns>
        </method>
        <method name="BeginFaultBlock">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <returns>TODO</returns>
        </method>
        <method name="BeginExceptionBlock">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <returns>TODO</returns>
        </method>
        <method name="BeginExceptFilterBlock">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <returns>TODO</returns>
        </method>
        <method name="BeginCatchBlock(System.Type)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="exceptionType">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="EmitCall(System.Reflection.Emit.OpCode, System.Reflection.MethodInfo, System.Type[])">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="opcode">TODO</param>
            <param name="methodinfo">TODO</param>
            <param name="optionalParamTypes">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="EmitCalli(System.Reflection.Emit.OpCode, System.Reflection.CallingConventions, System.Type, System.Type[], System.Type[])">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="opcode">TODO</param>
            <param name="call_conv">TODO</param>
            <param name="returnType">TODO</param>
            <param name="paramTypes">TODO</param>
            <param name="optionalParamTypes">TODO</param>
            <returns>TODO</returns>
        </method>
    </class>
</monodoc>