<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE monodoc SYSTEM "http://www.go-mono.org/monodoc.dtd">
<monodoc language="en">
    <class name="System.Reflection.Emit.TypeBuilder" assembly="corlib">
        <summary>TODO</summary>
        <remarks>TODO</remarks>
        <field name="UnspecifiedTypeSize">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
        </field>
        <property name="Assembly">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <value>TODO</value>
        </property>
        <property name="AssemblyQualifiedName">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <value>TODO</value>
        </property>
        <property name="BaseType">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <value>TODO</value>
        </property>
        <property name="DeclaringType">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <value>TODO</value>
        </property>
        <property name="UnderlyingSystemType">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <value>TODO</value>
        </property>
        <property name="FullName">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <value>TODO</value>
        </property>
        <property name="GUID">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <value>TODO</value>
        </property>
        <property name="Module">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <value>TODO</value>
        </property>
        <property name="Name">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <value>TODO</value>
        </property>
        <property name="Namespace">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <value>TODO</value>
        </property>
        <property name="PackingSize">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <value>TODO</value>
        </property>
        <property name="ReflectedType">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <value>TODO</value>
        </property>
        <property name="MemberType">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <value>TODO</value>
        </property>
        <property name="TypeHandle">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <value>TODO</value>
        </property>
        <method name="InvokeMember(System.String, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object, System.Object[], System.Reflection.ParameterModifier[], System.Globalization.CultureInfo, System.String[])">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="name">TODO</param>
            <param name="invokeAttr">TODO</param>
            <param name="binder">TODO</param>
            <param name="target">TODO</param>
            <param name="args">TODO</param>
            <param name="modifiers">TODO</param>
            <param name="culture">TODO</param>
            <param name="namedParameters">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="GetProperties(System.Reflection.BindingFlags)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="bindingAttr">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="GetMethods(System.Reflection.BindingFlags)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="bindingAttr">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="GetMembers(System.Reflection.BindingFlags)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="bindingAttr">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="GetFields(System.Reflection.BindingFlags)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="bindingAttr">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="GetField(System.String, System.Reflection.BindingFlags)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="name">TODO</param>
            <param name="bindingAttr">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="GetConstructors(System.Reflection.BindingFlags)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="bindingAttr">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="GetNestedTypes(System.Reflection.BindingFlags)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="bindingAttr">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="GetNestedType(System.String, System.Reflection.BindingFlags)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="name">TODO</param>
            <param name="bindingAttr">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="GetEvents(System.Reflection.BindingFlags)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="bindingAttr">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="GetEvent(System.String, System.Reflection.BindingFlags)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="name">TODO</param>
            <param name="bindingAttr">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="GetElementType">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <returns>TODO</returns>
        </method>
        <method name="GetInterfaces">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <returns>TODO</returns>
        </method>
        <method name="GetInterface(System.String, System.Boolean)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="name">TODO</param>
            <param name="ignoreCase">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="IsDefined(System.Type, System.Boolean)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="attributeType">TODO</param>
            <param name="inherit">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="GetCustomAttributes(System.Type, System.Boolean)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="attributeType">TODO</param>
            <param name="inherit">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="GetCustomAttributes(System.Boolean)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="inherit">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="AddDeclarativeSecurity(System.Security.Permissions.SecurityAction, System.Security.PermissionSet)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="action">TODO</param>
            <param name="pset">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="AddInterfaceImplementation(System.Type)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="interfaceType">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="DefineNestedType(System.String)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="name">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="DefineNestedType(System.String, System.Reflection.TypeAttributes)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="name">TODO</param>
            <param name="attr">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="DefineNestedType(System.String, System.Reflection.TypeAttributes, System.Type)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="name">TODO</param>
            <param name="attr">TODO</param>
            <param name="parent">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="DefineNestedType(System.String, System.Reflection.TypeAttributes, System.Type, System.Type[])">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="name">TODO</param>
            <param name="attr">TODO</param>
            <param name="parent">TODO</param>
            <param name="interfaces">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="DefineNestedType(System.String, System.Reflection.TypeAttributes, System.Type, System.Int32)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="name">TODO</param>
            <param name="attr">TODO</param>
            <param name="parent">TODO</param>
            <param name="typesize">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="DefineNestedType(System.String, System.Reflection.TypeAttributes, System.Type, System.Reflection.Emit.PackingSize)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="name">TODO</param>
            <param name="attr">TODO</param>
            <param name="parent">TODO</param>
            <param name="packsize">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="DefineNestedType(System.String, System.Reflection.TypeAttributes, System.Type, System.Reflection.Emit.PackingSize, System.Int32)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="name">TODO</param>
            <param name="attr">TODO</param>
            <param name="parent">TODO</param>
            <param name="packsize">TODO</param>
            <param name="typesize">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="DefineConstructor(System.Reflection.MethodAttributes, System.Reflection.CallingConventions, System.Type[])">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="attributes">TODO</param>
            <param name="callingConvention">TODO</param>
            <param name="parameterTypes">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="DefineDefaultConstructor(System.Reflection.MethodAttributes)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="attributes">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="DefineMethod(System.String, System.Reflection.MethodAttributes, System.Type, System.Type[])">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="name">TODO</param>
            <param name="attributes">TODO</param>
            <param name="returnType">TODO</param>
            <param name="parameterTypes">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="DefineMethod(System.String, System.Reflection.MethodAttributes, System.Reflection.CallingConventions, System.Type, System.Type[])">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="name">TODO</param>
            <param name="attributes">TODO</param>
            <param name="callingConvention">TODO</param>
            <param name="returnType">TODO</param>
            <param name="parameterTypes">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="DefinePInvokeMethod(System.String, System.String, System.String, System.Reflection.MethodAttributes, System.Reflection.CallingConventions, System.Type, System.Type[], System.Runtime.InteropServices.CallingConvention, System.Runtime.InteropServices.CharSet)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="name">TODO</param>
            <param name="dllName">TODO</param>
            <param name="entryName">TODO</param>
            <param name="attributes">TODO</param>
            <param name="callingConvention">TODO</param>
            <param name="returnType">TODO</param>
            <param name="parameterTypes">TODO</param>
            <param name="nativeCallConv">TODO</param>
            <param name="nativeCharSet">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="DefinePInvokeMethod(System.String, System.String, System.Reflection.MethodAttributes, System.Reflection.CallingConventions, System.Type, System.Type[], System.Runtime.InteropServices.CallingConvention, System.Runtime.InteropServices.CharSet)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="name">TODO</param>
            <param name="dllName">TODO</param>
            <param name="attributes">TODO</param>
            <param name="callingConvention">TODO</param>
            <param name="returnType">TODO</param>
            <param name="parameterTypes">TODO</param>
            <param name="nativeCallConv">TODO</param>
            <param name="nativeCharSet">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="DefineMethodOverride(System.Reflection.MethodInfo, System.Reflection.MethodInfo)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="methodInfoBody">TODO</param>
            <param name="methodInfoDeclaration">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="DefineField(System.String, System.Type, System.Reflection.FieldAttributes)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="fieldName">TODO</param>
            <param name="type">TODO</param>
            <param name="attributes">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="DefineProperty(System.String, System.Reflection.PropertyAttributes, System.Type, System.Type[])">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="name">TODO</param>
            <param name="attributes">TODO</param>
            <param name="returnType">TODO</param>
            <param name="parameterTypes">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="DefineTypeInitializer">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <returns>TODO</returns>
        </method>
        <method name="CreateType">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <returns>TODO</returns>
        </method>
        <method name="SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="customBuilder">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="SetCustomAttribute(System.Reflection.ConstructorInfo, System.Byte[])">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="con">TODO</param>
            <param name="binaryAttribute">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="DefineEvent(System.String, System.Reflection.EventAttributes, System.Type)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="name">TODO</param>
            <param name="attributes">TODO</param>
            <param name="eventtype">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="DefineInitializedData(System.String, System.Byte[], System.Reflection.FieldAttributes)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="name">TODO</param>
            <param name="data">TODO</param>
            <param name="attributes">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="DefineUninitializedData(System.String, System.Int32, System.Reflection.FieldAttributes)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="name">TODO</param>
            <param name="size">TODO</param>
            <param name="attributes">TODO</param>
            <returns>TODO</returns>
        </method>
        <method name="SetParent(System.Type)">
            <summary>TODO</summary>
            <remarks>TODO</remarks>
            <param name="parentType">TODO</param>
            <returns>TODO</returns>
        </method>
    </class>
</monodoc>