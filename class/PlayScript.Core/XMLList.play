// Copyright 2013 Zynga Inc.
//	
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//		
//      Unless required by applicable law or agreed to in writing, software
//      distributed under the License is distributed on an "AS IS" BASIS,
//      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//      See the License for the specific language governing permissions and
//      limitations under the License.

package {

	public /*final*/ dynamic class XMLList
	{
		public function XMLList (value:*=null)
		{

		}
	}
/*
	import System.Xml.*;
	import System.Collections.*;
	import System.Collections.Generic.*;
	import System.Linq.*;

	public class XMLList implements IEnumerable.<XML> {
	
		var mList:List.<XML> = new List.<XML>();

		//
		// Methods
		//
		
		public function XMLList(value:Object) {
			if (value == null) {
				// empty
			}
			else {
				throw new System.NotImplementedException();
			}
		}

		internal function XMLList(value:XmlNodeList)
		{
			// create list of XML from node list

			for each ( var node:XmlNode in value) {
				if (node is XmlElement) {
					mList.Add(new XML(node));
				}
			}
		}

		internal function XMLList ()
		{		
		}
		
		public function attribute(attributeName:String):String {
			if (mList.Count != 1)
				throw new System.NotImplementedException();
			
			return mList[0].attribute(attributeName);
		}
		
		public function attributes():XMLList {
			throw new System.NotImplementedException();
		}
		
		public function child(propertyName:Object):XMLList {
			throw new System.NotImplementedException();
		}
		
		public function children():XMLList {
			throw new System.NotImplementedException();
		}
		
		public function comments():XMLList {
			throw new System.NotImplementedException();
		}
		
		public function contains(value:XML):Boolean {
			throw new System.NotImplementedException();
		}
		
		public function copy():XMLList {
			throw new System.NotImplementedException();
		}

		public function descendants():XMLList {
			throw new System.NotImplementedException();
		}
						
		public function descendants(name:Object):XMLList {
			throw new System.NotImplementedException();
		}
		
		public function elements():XMLList {
			throw new System.NotImplementedException();
		}
		
		public function elements(name:String):XMLList {
			if (mList.Count == 0)
				return new XMLList();

			if (mList.Count != 1)
				throw new System.NotImplementedException();

			return mList[0].elements(name);
		}
		
		public function hasComplexContent():Boolean {
			throw new System.NotImplementedException();
		}
		
		public function hasOwnProperty(p:String):Boolean {
			throw new System.NotImplementedException();
		}
		
		public function hasSimpleContent():Boolean {
			throw new System.NotImplementedException();
		}
		
		public function length():int {
			throw new System.NotImplementedException();
		}
		
		public function normalize():XMLList {
			throw new System.NotImplementedException();
		}
		
		public function parent():Object {
			throw new System.NotImplementedException();
		}
		
		public function processingInstructions(name:String = "*"):XMLList {
			throw new System.NotImplementedException();
		}
		
		public function propertyIsEnumerable(p:String):Boolean {
			throw new System.NotImplementedException();
		}
		
		public function text():XMLList {
			throw new System.NotImplementedException();
		}
		
		public function toString():String {
			throw new System.NotImplementedException();
		}
		
		public function toXMLString():String {
			throw new System.NotImplementedException();
		}
		
		public function valueOf():Object {
			throw new System.NotImplementedException();
		}
		
		public indexer this(index:int):XML {
			get { throw new System.NotImplementedException(); }
		}
		
		public static implicit operator String (list:XMLList) {
			throw new System.NotImplementedException();
		}
		
		function IEnumerable.<XML>.GetEnumerator() : IEnumerator.<XML> {
			return mList.GetEnumerator();
		}
		
		function IEnumerable.GetEnumerator() : IEnumerator { 
			return mList.GetEnumerator();
		}
	}
*/
}
