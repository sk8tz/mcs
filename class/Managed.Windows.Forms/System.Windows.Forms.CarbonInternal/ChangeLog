2007-12-21  Geoff Norton  <gnorton@novell.com>

	* *Handler.cs: Update the ProcessEvent method to pass the callref
	in as well.
	* ControlHandler.cs: Direct the kEventControlDrag events to our
	Dnd implementation.
	* EventHandler.cs: Register kEventControlDrag event callbacks and 
	HIObject subclassing callbacks.
	* KeyboardHandler.cs: Keep some key modifiers in a Keys state.
	* MouseHandler.cs: Dont prevent non-hwnd events from going to the next
	Event handler.
	* Dnd.cs: Initial D&D implementation.  Supports dragging internally
	and from finder->mwf apps.
	* Pasteboard.cs: Initial clipboard support.
	* HIObjectHandler.cs: Subclass HIView and run our own specialized
	native object constructor.  This is required for dnd.

2007-12-07  Geoff Norton  <gnorton@novell.com>

	* ControlHandler.cs: Properly update our invalidated information when
	Quartz asks us to redraw.  This helps fix TabControl but introduces
	over-zealous drawing causing our flicker.  Implement visibility tracking
	to generate out WM_SHOWWINDOW calls.  Refactor mouse tracking to live
	entirely in MouseHandler.
	* EventHandler.cs: Unregister some events we no longer handle.  Register
	the new MouseEvents that we do handle.
	* KeyboardHandler.cs: Implement some more key translations.
	* MouseHandler.cs:  Handle all mouse events at the application level now
	This allows us to paint while dragging the mouse, and handle double
	click events properly.
	* WindowHandler.cs: Properly generate WM_SHOWWINDOW messages when
	our application window is exposed.

2007-11-21  Geoff Norton  <gnorton@novell.com>

	* ControlHandler.cs: Allow custom HIView to get keyboard focus.
	* Enums.cs: Remove some unused Enums.
	* EventHandler.cs: Make controls listen to kEventControlGetFocusPart
	* KeyboardHandler.cs: Get the focus control from Carbon before returning control from the function

2007-11-15  Geoff Norton  <gnorton@novell.com>

	* EventHandler.cs: The new event handler dispatcher for the Carbon port.
	Every event is dispatched thru this class and directed to the appropriate
	event type handler.
	* ApplicationHandler.cs: Handles the application level events AppActivated
	and AppDeactivated.  We hook these to remove overlay windows when the application
	looses focus.
	* ControlHandler.cs: Handles the control level events Click, Track, Draw and BoundsChanged.
	Translates these events to their WndProc equivalents and routes them to the appropriate
	Control.
	* KeyboardHandler.cs: Handles the keyboard level events KeyDown, KeyUp, KeyRepeat, KeyModifiersChanged
	translated them to the WndProc message and routes it to the keyboard focus control.
	* MouseHandler.cs: Handles the global mouse events and sends the appropriate WM_MOUSEMOVE to the 
	control affected.
	* WindowHandler.cs: Handles the window level events BoundsChanged and Close and resizes the Hwnds
	or destroys them accordingly.
	* EventHandlerBase.cs: Base class for all the EventHandlers.
	* IEventHandler.cs: Interface declaring the methods needed for all EventHandlers.
	* Enums.cs: Contains needed enums for the Carbon port.
	* Structs.cs: Contains all the needed structs for the Carbon port.
