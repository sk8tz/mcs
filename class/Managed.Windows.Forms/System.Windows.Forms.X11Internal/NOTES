Application.Idle is invoked on the same thread used to add the event

our hacky double buffering only works on the client area, not the nc
area.  need to move to a more XplatUI solution involving server-side
drawing surfaces (pixmaps in the X case).

right now the expose/configure event aggregating is done in the
XEventThread (in the hwnd code, but in the thread running the x event
loop).  There is probably a way to get it to run in the thread doing
GetMessage, probably by making GetMessage know about both the xevent
and paint queue's, and having it consume the x queue until there's
nothing left, doing the AddExpose stuff there.  then, once the xqueue
is empty, consume the paint queue.  This has the added benefit of
making the paint queue a ThreadQueue local thing - no locking will be
needed on it, since the only thing touching it will be the thread
running the message pump.

-- need to check if Invalidate can be called from other threads in
.net, and if it is called, whether or not anything happens.
