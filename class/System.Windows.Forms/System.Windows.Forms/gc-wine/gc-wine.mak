### Generated by Winemaker


### Generic autoconf variables

TOPSRCDIR             = .
TOPOBJDIR             = .
SRCDIR                = .


SUBDIRS               =
DLLS                  = gc.dll
EXES                  =



### Common settings

DEFINES               =
INCLUDE_PATH          = -Iinclude
DLL_PATH              =
LIBRARY_PATH          =
LIBRARIES             =


### gc.dll sources and settings

gc_wine_dll_MODULE    = gc.dll
gc_wine_dll_BASEMODULE= gc
gc_wine_dll_APPMODE   =
gc_wine_dll_C_SRCS    = allchblk.c \
			alloc.c \
			blacklst.c \
			checksums.c \
			dbg_mlc.c \
			dyn_load.c \
			finalize.c \
			gcj_mlc.c \
			headers.c \
			mach_dep.c \
			malloc.c \
			mallocx.c \
			mark.c \
			mark_rts.c \
			misc.c \
			new_hblk.c \
			obj_map.c \
			os_dep.c \
			ptr_chck.c \
			reclaim.c \
			stubborn.c \
			typd_mlc.c \
			win32_threads.c
gc_wine_dll_CXX_SRCS  = gc_cpp.cpp
gc_wine_dll_RC_SRCS   =
gc_wine_dll_SPEC_SRCS = gc.dll.spec
gc_wine_dll_DLL_PATH  = -L$(WINE_DLL_ROOT)
gc_wine_dll_DLLS      = advapi32 \
			comdlg32 \
			gdi32 \
			kernel32 \
			odbc32 \
			ole32 \
			oleaut32 \
			shell32 \
			user32 \
			winspool
gc_wine_dll_LIBRARY_PATH=
gc_wine_dll_LIBRARIES =
gc_wine_dll_DEPENDS   =

gc_wine_dll_OBJS      = $(gc_wine_dll_C_SRCS:.c=.o) \
			$(gc_wine_dll_CXX_SRCS:.cpp=.o) \
			$(EXTRA_OBJS)



### Global source lists

C_SRCS                = $(gc_wine_dll_C_SRCS)
CXX_SRCS              = $(gc_wine_dll_CXX_SRCS)
RC_SRCS               = $(gc_wine_dll_RC_SRCS)
SPEC_SRCS             = $(gc_wine_dll_SPEC_SRCS)



### Generic autoconf targets

all: wineapploader $(SUBDIRS) $(DLLS:%=%.so) $(EXES:%=%.so)

wineapploader: wineapploader.in
	sed -e 's,@bindir\@,$(bindir),g' -e 's,@winelibdir\@,.,g' $(SRCDIR)/wineapploader.in >$@ || $(RM) $@


# Copyright 2000 Francois Gouget for CodeWeavers
# fgouget@codeweavers.com
#
# Global rules shared by all makefiles     -*-Makefile-*-
#
# Each individual makefile must define the following variables:
# TOPOBJDIR    : top-level object directory
# SRCDIR       : source directory for this module
#
# Each individual makefile may define the following additional variables:
#
# SUBDIRS      : subdirectories that contain a Makefile
# DLLS         : WineLib libraries to be built
# EXES         : WineLib executables to be built
#
# CEXTRA       : extra c flags (e.g. '-Wall')
# CXXEXTRA     : extra c++ flags (e.g. '-Wall')
# WRCEXTRA     : extra wrc flags (e.g. '-p _SysRes')
# DEFINES      : defines (e.g. -DSTRICT)
# INCLUDE_PATH : additional include path
# LIBRARY_PATH : additional library path
# LIBRARIES    : additional Unix libraries to link with
#
# C_SRCS       : C sources for the module
# CXX_SRCS     : C++ sources for the module
# RC_SRCS      : resource source files
# SPEC_SRCS    : interface definition files


# Where is Wine

WINE_INCLUDE_ROOT = /usr/include/wine
WINE_INCLUDE_PATH = -I/usr/include/wine
WINE_LIBRARY_ROOT =
WINE_LIBRARY_PATH = 
WINE_DLL_ROOT     = /usr/local/lib
WINE_DLL_PATH     = -L/usr/local/lib/wine

LDPATH            = LD_LIBRARY_PATH=":$$LD_LIBRARY_PATH"

# Where are the MFC

ATL_INCLUDE_ROOT = 
ATL_INCLUDE_PATH = 
MFC_INCLUDE_ROOT = 
MFC_INCLUDE_PATH = 
MFC_LIBRARY_ROOT = 
MFC_LIBRARY_PATH = 

# Global definitions and options

GLOBAL_DEFINES      = -DSILENT -DGC_BUILD -DALL_INTERIOR_POINTERS -DGC_WIN32_THREADS -D_WIN32
GLOBAL_INCLUDE_PATH = 
GLOBAL_DLL_PATH     = 
GLOBAL_DLLS         = 
GLOBAL_LIBRARY_PATH = 
GLOBAL_LIBRARIES    = 

# First some useful definitions

SHELL     = /bin/sh
CC        = gcc
CPP       = gcc -E
CXX       = g++
WRC       = /usr/local/bin/wrc
CFLAGS    = -g -O2 -fPIC $(CEXTRA)
CXXFLAGS  = -g -O2 -fpermissive -fno-for-scope $(CXXEXTRA)
WRCFLAGS  = -J -m $(WRCEXTRA)
OPTIONS   =  -D_REENTRANT
LIBS      = -lm  $(LIBRARY_PATH)
DIVINCL   = $(GLOBAL_INCLUDE_PATH) -I$(SRCDIR) $(INCLUDE_PATH) $(WINE_INCLUDE_PATH)
ALLCFLAGS = $(DIVINCL) $(CFLAGS) $(GLOBAL_DEFINES) $(DEFINES) $(OPTIONS)
ALLCXXFLAGS=$(DIVINCL) $(CXXFLAGS) $(GLOBAL_DEFINES) $(DEFINES) $(OPTIONS)
ALL_DLL_PATH  = $(DLL_PATH) $(GLOBAL_DLL_PATH) $(WINE_DLL_PATH)
ALL_LIBRARY_PATH = $(LIBRARY_PATH) $(GLOBAL_LIBRARY_PATH) $(WINE_LIBRARY_PATH)
WINE_LIBRARIES = -lwine -lwine_unicode -lwine_uuid
ALL_LIBRARIES = $(LIBRARIES:%=-l%) $(GLOBAL_LIBRARIES:%=-l%) $(WINE_LIBRARIES)
LDSHARED  = $(CC) -shared
LDXXSHARED= $(CXX) -shared
LDDLLFLAGS= -Wl,-Bsymbolic
STRIP     = strip
STRIPFLAGS= --strip-unneeded
LN_S      = ln -s
RM        = rm -f
MV        = mv
MKDIR     = mkdir -p
WINE      = /usr/local/bin/wine
WINEBUILD = /usr/local/bin/winebuild


# Installation infos

INSTALL         = install
INSTALL_PROGRAM = $(INSTALL)
INSTALL_SCRIPT  = $(INSTALL)
INSTALL_DATA    = $(INSTALL) -m 644
prefix          = /usr/local
exec_prefix     = ${prefix}
bindir          = ${exec_prefix}/bin
libdir          = ${exec_prefix}/lib
infodir         = ${prefix}/info
mandir          = ${prefix}/man
dlldir          = ${exec_prefix}/lib/wine

prog_manext     = 1
conf_manext     = 5

OBJS            = $(C_SRCS:.c=.o) $(CXX_SRCS:.cpp=.o) \
                  $(SPEC_SRCS:.spec=.spec.o)
CLEAN_FILES     = *.spec.c y.tab.c y.tab.h lex.yy.c \
                  core *.orig *.rej \
                  \\\#*\\\# *~ *% .\\\#*
DISTCLEAN_FILES = config.* Makefile Make.rules

# Implicit rules

.SUFFIXES: .cpp .rc .res .spec .spec.c .spec.o

.c.o:
	$(CC) -c $(ALLCFLAGS) -o $@ $<

.cpp.o:
	$(CXX) -c $(ALLCXXFLAGS) -o $@ $<

.cc.o:
	$(CXX) -c $(ALLCXXFLAGS) -o $@ $<

.cxx.o:
	$(CXX) -c $(ALLCXXFLAGS) -o $@ $<

.rc.res:
	$(LDPATH) $(WRC) $(WRCFLAGS) $(DIVINCL) -o $@ $<

.PHONY: all install uninstall clean distclean depend dummy

# 'all' target first in case the enclosing Makefile didn't define any target

all: Makefile

# Rules for makefile

Makefile: 

# Rules for cleaning

$(SUBDIRS:%=%/__clean__): dummy
	cd `dirname $@` && $(MAKE) clean

$(EXTRASUBDIRS:%=%/__clean__): dummy
	-cd `dirname $@` && $(RM) $(CLEAN_FILES)

clean:: $(SUBDIRS:%=%/__clean__) $(EXTRASUBDIRS:%=%/__clean__)
	$(RM) $(CLEAN_FILES) $(RC_SRCS:.rc=.res) $(OBJS) $(EXES:%.exe=%) $(EXES:%=%.so) $(EXES:%=%.spec.o) $(DLLS:%=%.so) $(DLLS:%=%.spec.o)

# Rule for distcleaning

distclean: clean
	$(RM) $(DISTCLEAN_FILES)

# Rules for installing

$(SUBDIRS:%=%/__install__): dummy
	cd `dirname $@` && $(MAKE) install

$(SUBDIRS:%=%/__uninstall__): dummy
	cd `dirname $@` && $(MAKE) uninstall

# Misc. rules

$(SUBDIRS): dummy
	@cd $@ && $(MAKE)

dummy:

# End of global rules

install::
	_list="$(SUBDIRS)"; for i in $$_list; do (cd $$i; $(MAKE) install) || exit 1; done
	_list="$(EXES:%.exe=%)"; for i in $$_list; do $(INSTALL_SCRIPT) $$i $(bindir); done
	_list="$(EXES:%=%.so) $(DLLS:%=%.so)"; for i in $$_list; do $(INSTALL_PROGRAM) $$i $(dlldir); done

uninstall::
	_list="$(SUBDIRS)"; for i in $$_list; do (cd $$i; $(MAKE) uninstall) || exit 1; done
	_list="$(EXES:%.exe=%)"; for i in $$_list; do $(RM) $(bindir)/$$i;done
	_list="$(EXES:%=%.so) $(DLLS:%=%.so)"; for i in $$_list; do $(RM) $(dlldir)/$$i;done

clean::
	$(RM) wineapploader $(EXES:%.exe=%)

### Target specific build rules

$(gc_wine_dll_MODULE).spec.c: $(gc_wine_dll_SPEC_SRCS) $(gc_wine_dll_RC_SRCS:.rc=.res) $(gc_wine_dll_OBJS)
	$(LDPATH) $(WINEBUILD) -fPIC -o $@  $(gc_wine_dll_SPEC_SRCS:%=--spec %) $(gc_wine_dll_RC_SRCS:%.rc=%.res) $(gc_wine_dll_OBJS) $(gc_wine_dll_DLL_PATH) $(WINE_DLL_PATH) $(GLOBAL_DLL_PATH) $(gc_wine_dll_DLLS:%=-l%) $(GLOBAL_DLLS:%=-l%)

$(gc_wine_dll_MODULE).so: $(gc_wine_dll_MODULE).spec.o $(gc_wine_dll_OBJS) $(gc_wine_dll_DEPENDS)
	$(LDXXSHARED) $(LDDLLFLAGS) -o $@ $(gc_wine_dll_OBJS) $(gc_wine_dll_MODULE).spec.o $(gc_wine_dll_LIBRARY_PATH) $(ALL_LIBRARY_PATH) $(gc_wine_dll_LIBRARIES:%=-l%) $(ALL_LIBRARIES) $(LIBS)


