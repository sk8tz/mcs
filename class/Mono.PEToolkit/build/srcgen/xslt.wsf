<?xml version="1.0"?>

<!--
 | Author: Sergey Chaban <serge@wildwestsoftware.com>
 -->

<job id="xslt">

  <runtime>

    <description></description>

    <named name="inFile"
           type="string"
           required="true"
           helpstring=""
    />

    <named name="styleFile"
           type="string"
           required="true"
           helpstring=""
    />

    <named name="outFile"
           type="string"
           required="false"
           helpstring=""
    />


    <named name="unicode"
           type="boolean"
           required="false"
           helpstring=""
    />

    <named name="timestamp"
           type="boolean"
           required="false"
           helpstring=""
    />


    <named name="timing"
           type="boolean"
           required="false"
           helpstring=""
    />

    <unnamed name="params"
           type="string"
           many="true"
           required="false"
           helpstring=""
    />

  </runtime>

<script language="JScript"><![CDATA[

	function Filter(str) {
		this.data=str.split("\r\n");
		this.namespaces=new Array();
		this.pos=0;
		this.numLines=0;
		this.docComment=false;
		this.indent="";
		this.readLine=Filter_readLine;
	}

	function Filter_readLine() {

		if (this.data==null
		|| this.data.length==0
		|| this.pos>=this.data.length)
			return null;

		var res=this.data[this.pos++];

		if (res.charCodeAt(0)==127) {
			this.docComment^=true;
			if (this.docComment) {
				var n=res.charCodeAt(1)-0x30;
				this.indent="";
				for (var i=0;i<n;i++,this.indent+="\t");
			}
			res=this.readLine();
		} else if (this.docComment) {
			res=this.indent+"/// "+res;
		} else if (res.charCodeAt(0)==126) {
			var ns=res.substr(1);
			if (this.namespaces[ns]==null) {
				this.namespaces[ns]=true;
				res="using "+ns+";";
			} else {
				res=this.readLine();
			}
		}
		++this.numLines;
		return res;
	}



	var isUnicode=false;
	var timestamp=true;
	var timing=false;

	var start=0;
	var ellapsed=0;


	function writeFile(fileName,data) {
		var res=0;
		try {
			var fso=WScript.CreateObject("Scripting.FileSystemObject");
			var txtStream=fso.CreateTextFile(fileName,true,isUnicode);
			if (false) {
				txtStream.Write(data);
			} else {
				var filter=new Filter(data);
				var str=filter.readLine();
				while (str!=null) {
					txtStream.WriteLine(str);
					str=filter.readLine();
				}
				res=filter.numLines;
			}
			txtStream.Close();
		} catch (e) {
			WScript.Echo("writeFile() error: "+e);
		}
		return res;
	}

	var xmlFile=WScript.Arguments.Named.Item("inFile");
	var xslFile=WScript.Arguments.Named.Item("styleFile");
	var outFile=WScript.Arguments.Named.Item("outFile");

	var unicodeFlag=WScript.Arguments.Named.Item("unicode");
	isUnicode=(unicodeFlag!=null)?unicodeFlag:false;

	var timestampFlag=WScript.Arguments.Named.Item("timestamp");
	timestamp=(timestampFlag!=null)?timestampFlag:true;

	var timingFlag=WScript.Arguments.Named.Item("timing");
	timing=(timingFlag!=null)?timingFlag:false;

	var writeToFile=(outFile!=null);

	var params=new Array();


	for (var i=0;i<WScript.Arguments.Unnamed.Count;i++) {
		var prm=WScript.Arguments.Unnamed.Item(i);
		var nv=prm.split("=");
		if (nv.length==2) {
			params[params.length]={name:nv[0],value:nv[1]};
		}
	}

	if (timestamp) {
		params[params.length]={name:"time-stamp",value:(new Date()).toGMTString()};
	}

	var res;
	var xmlObj,xslObj;

	var xmlVer="";

	try {
		xmlObj=WScript.CreateObject("Msxml2.FreeThreadedDOMDocument"+xmlVer);
		xslObj=WScript.CreateObject("Msxml2.FreeThreadedDOMDocument"+xmlVer);
	} catch (e) {
		WScript.Echo("This script requires MSXML 3.0 (release) or better.")
		WScript.Quit(-1);
	}


	xmlObj.async=false;
	res=xmlObj.load(xmlFile);
	if (!res) {
		WScript.Echo("Unable to load source file.")
		WScript.Quit(-1);
	}

	xslObj.async=false;
	res=xslObj.load(xslFile);
	if (!res) {
		WScript.Echo("Unable to load stylesheet file.")
		WScript.Quit(-1);
	}

	var template=WScript.CreateObject("Msxml2.XSLTemplate"+xmlVer);
	template.stylesheet=xslObj;
	var processor=template.createProcessor();
	processor.input=xmlObj;
	for (var i in params) {
		processor.addParameter(params[i].name,params[i].value);
	}

	start=(new Date()).valueOf();
	res=processor.transform();
	ellapsed=(new Date()).valueOf()-start;

	if (timing) {
		WScript.Echo("Transform took "+ellapsed+" ms.")
	}

	var n=0;
	var output=processor.output;

	if (writeToFile) {
		n=writeFile(outFile,output);
	} else {
		var filter=new Filter(output);
		var str=filter.readLine();
		while (str!=null) {
			WScript.Echo(str);
			str=filter.readLine();
		}
		n=filter.numLines;
	}


	WScript.Quit(0);

]]></script>

</job>
