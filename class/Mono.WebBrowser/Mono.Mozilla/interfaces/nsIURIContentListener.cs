// THIS FILE AUTOMATICALLY GENERATED BY xpidl2cs.pl
// EDITING IS PROBABLY UNWISE
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
// 
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
// Copyright (c) 2007, 2008 Novell, Inc.
//
// Authors:
//	Andreia Gaita (avidigal@novell.com)
//

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using System.Text;

namespace Mono.Mozilla {

	[Guid ("94928AB3-8B63-11d3-989D-001083010E9B")]
	[InterfaceType (ComInterfaceType.InterfaceIsIUnknown)]
	[ComImport ()]
	internal interface nsIURIContentListener {

#region nsIURIContentListener
		[PreserveSigAttribute]
		[MethodImpl (MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
		int onStartURIOpen (
				[MarshalAs (UnmanagedType.Interface)]   nsIURI aURI, out bool ret);

		[PreserveSigAttribute]
		[MethodImpl (MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
		int doContent (
				[MarshalAs (UnmanagedType.LPStr)]   string aContentType,
				   bool aIsContentPreferred,
				[MarshalAs (UnmanagedType.Interface)]   nsIRequest aRequest,
				[MarshalAs (UnmanagedType.Interface)]  out nsIStreamListener aContentHandler, out bool ret);

		[PreserveSigAttribute]
		[MethodImpl (MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
		int isPreferred (
				[MarshalAs (UnmanagedType.LPStr)]   string aContentType,
				[MarshalAs (UnmanagedType.LPStr)]  ref string aDesiredContentType, out bool ret);

		[PreserveSigAttribute]
		[MethodImpl (MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
		int canHandleContent (
				[MarshalAs (UnmanagedType.LPStr)]   string aContentType,
				   bool aIsContentPreferred,
				[MarshalAs (UnmanagedType.LPStr)]  ref string aDesiredContentType, out bool ret);

		[PreserveSigAttribute]
		[MethodImpl (MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
		int getLoadCookie ( out IntPtr ret);

		[PreserveSigAttribute]
		[MethodImpl (MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
		int setLoadCookie ( IntPtr value);

		[PreserveSigAttribute]
		[MethodImpl (MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
		int getParentContentListener ([MarshalAs (UnmanagedType.Interface)]  out nsIURIContentListener ret);

		[PreserveSigAttribute]
		[MethodImpl (MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
		int setParentContentListener ([MarshalAs (UnmanagedType.Interface)]  nsIURIContentListener value);

#endregion
	}


	internal class nsURIContentListener {
		public static nsIURIContentListener GetProxy (Mono.WebBrowser.IWebBrowser control, nsIURIContentListener obj)
		{
			object o = Base.GetProxyForObject (control, typeof(nsIURIContentListener).GUID, obj);
			return o as nsIURIContentListener;
		}
	}
}
