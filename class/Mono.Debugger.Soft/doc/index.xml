<Overview>
  <Assemblies>
    <Assembly Name="Mono.Debugger" Version="0.0.0.0">
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
  </Assemblies>
  <Remarks>
    <para>This API is used to communicate with the debugging agent running 
	inside a mono runtime.
	</para>
    <para>The API is based on and is very similar to the <format type="text/html"><a href="http://java.sun.com/j2se/1.5.0/docs/guide/jpda/jdi/index.html">Java Debug Interface.</a> If documentation is missing, the JDI documentation can be consulted instead.</format></para>
    <para>
	In this documentation, debuggee refers to the remote process running the mono runtime which this API communicates with.
	</para>
    <para>A <c>Mirror</c> object represents an entity in the debuggee. There is usually one mirror subclass for each type of entity, i.e. <c>TypeMirror</c> for types, <c>AppDomainMirror</c> for application domains etc. These classes usually have a similar set of properties/methods as their non-mirror counterparts, the difference is that calling these properties/methods might result in a remote call to the debuggee to request information. The results of these remote calls are usually cached in the mirror object, so when multiple calls are made to <c>TypeMirror.Name</c>, for example, only the first call involves a remote operation. The <c>ToString()/Equals()/GetHashCode ()</c> methods are an exception, these are guaranteed to only access local state.
	</para>
    <para>Differences between this API and JDI:
	<list type="bullet"><item><term>There is only one namespace, instead of 5 in JDI.</term></item><item><term>The API uses classes, while JDI uses interfaces.</term></item><item><term>No SPI interface yet.</term></item><item><term>Information is accessed using C# properties instead of methods.</term></item><item><term>There are fewer classes, i.e. <c>EventQueue</c>/<c>EventRequestManager</c> is integrated into <c>VirtualMachine</c>.</term></item><item><term>Values which have primitive types i.e. int are represented by a class called <c>PrimitiveValue</c>, instead of a separate class for each primitive type.</term></item></list></para>
  </Remarks>
  <Copyright>(C) 2009 Novell, Inc.</Copyright>
  <Types>
    <Namespace Name="Mono.Debugger">
      <Type Name="AppDomainMirror" Kind="Class" />
      <Type Name="ArrayMirror" Kind="Class" />
      <Type Name="AssemblyLoadEvent" Kind="Class" />
      <Type Name="AssemblyMirror" Kind="Class" />
      <Type Name="BreakpointEvent" Kind="Class" />
      <Type Name="BreakpointEventRequest" Kind="Class" />
      <Type Name="CustomAttributeDataMirror" Kind="Class" />
      <Type Name="CustomAttributeNamedArgumentMirror" Kind="Structure" />
      <Type Name="CustomAttributeTypedArgumentMirror" Kind="Structure" />
      <Type Name="EnumMirror" Kind="Class" />
      <Type Name="ErrorCode" Kind="Enumeration" />
      <Type Name="ErrorHandlerEventArgs" Kind="Class" />
      <Type Name="Event" Kind="Class" />
      <Type Name="EventRequest" Kind="Class" />
      <Type Name="EventType" Kind="Enumeration" />
      <Type Name="FieldInfoMirror" Kind="Class" />
      <Type Name="ILInstruction" Kind="Class" />
      <Type Name="IMirror" Kind="Interface" />
      <Type Name="InvalidStackFrameException" Kind="Class" />
      <Type Name="InvocationException" Kind="Class" />
      <Type Name="LaunchOptions" Kind="Class" />
      <Type Name="LocalVariable" Kind="Class" />
      <Type Name="Location" Kind="Class" />
      <Type Name="MethodBodyMirror" Kind="Class" />
      <Type Name="MethodEntryEvent" Kind="Class" />
      <Type Name="MethodEntryEventRequest" Kind="Class" />
      <Type Name="MethodExitEvent" Kind="Class" />
      <Type Name="MethodExitEventRequest" Kind="Class" />
      <Type Name="MethodMirror" Kind="Class" />
      <Type Name="Mirror" Kind="Class" />
      <Type Name="ModuleMirror" Kind="Class" />
      <Type Name="ObjectCollectedException" Kind="Class" />
      <Type Name="ObjectMirror" Kind="Class" />
      <Type Name="ParameterInfoMirror" Kind="Class" />
      <Type Name="PrimitiveValue" Kind="Class" />
      <Type Name="PropertyInfoMirror" Kind="Class" />
      <Type Name="StackFrame" Kind="Class" />
      <Type Name="StackFrameType" Kind="Enumeration" />
      <Type Name="StepDepth" Kind="Enumeration" />
      <Type Name="StepEvent" Kind="Class" />
      <Type Name="StepEventRequest" Kind="Class" />
      <Type Name="StepSize" Kind="Enumeration" />
      <Type Name="StringMirror" Kind="Class" />
      <Type Name="StructMirror" Kind="Class" />
      <Type Name="SuspendPolicy" Kind="Enumeration" />
      <Type Name="ThreadDeathEvent" Kind="Class" />
      <Type Name="ThreadMirror" Kind="Class" />
      <Type Name="ThreadStartEvent" Kind="Class" />
      <Type Name="TypeLoadEvent" Kind="Class" />
      <Type Name="TypeMirror" Kind="Class" />
      <Type Name="Value" Kind="Class" />
      <Type Name="VirtualMachine" Kind="Class" />
      <Type Name="VirtualMachineManager" Kind="Class" />
      <Type Name="VMDeathEvent" Kind="Class" />
      <Type Name="VMDisconnectedException" Kind="Class" />
      <Type Name="VMDisconnectEvent" Kind="Class" />
      <Type Name="VMMismatchException" Kind="Class" />
      <Type Name="VMStartEvent" Kind="Class" />
    </Namespace>
  </Types>
  <Title>Mono.Debugger</Title>
</Overview>
