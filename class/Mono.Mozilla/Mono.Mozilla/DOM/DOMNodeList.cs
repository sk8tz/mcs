//// THIS FILE AUTOMATICALLY GENERATED BY xpidl2cs.pl
//// EDITING IS PROBABLY UNWISE
//// Permission is hereby granted, free of charge, to any person obtaining
//// a copy of this software and associated documentation files (the
//// "Software"), to deal in the Software without restriction, including
//// without limitation the rights to use, copy, modify, merge, publish,
//// distribute, sublicense, and/or sell copies of the Software, and to
//// permit persons to whom the Software is furnished to do so, subject to
//// the following conditions:
//// 
//// The above copyright notice and this permission notice shall be
//// included in all copies or substantial portions of the Software.
//// 
//// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
//// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
//// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
//// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
//// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
//// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
//// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
////
//// Copyright (c) 2008 Novell, Inc.
////
//// Authors:
////	Andreia Gaita (avidigal@novell.com)
////
//

using System;
using System.Collections;
using Mono.WebBrowser;
using Mono.WebBrowser.DOM;

namespace Mono.Mozilla.DOM
{
	internal class DOMNodeList : DOMObject, IDOMNodeList, IList
	{
		private IWebBrowser control;
		private nsIDOMNodeList unmanagedNodes;
		private DOMNode [] nodes;
		
		public DOMNodeList(IWebBrowser control, nsIDOMNodeList nodeList) : base (control)
		{
			unmanagedNodes = nsDOMNodeList.GetProxy (control, nodeList);
		}
		
		#region IDisposable Members
		protected override  void Dispose (bool disposing)
		{
			if (!disposed) {
				if (disposing) {
					Clear ();
					unmanagedNodes = null;
				}
			}
			base.Dispose(disposing);
		}		
		#endregion

		#region Private
		private void Clear () 
		{
			if (nodes != null) {
				for (int i = 0; i < nodes.Length; i++) {
					nodes[i] = null;
				}
				nodes = null;
			}
		}
		
		private void Load ()
		{
			Clear ();
			uint count;
			unmanagedNodes.getLength (out count);
			nodes = new DOMNode[count];
			for (int i = 0; i < count; i++) {
				nsIDOMNode node;
				unmanagedNodes.item ((uint)i, out node);
				nodes[i] = new DOMNode (control, node);
			}
		}
		#endregion
		
		#region IEnumerable members
		public IEnumerator GetEnumerator ()
		{
			return new DOMNodeListEnumerator (this);
		}
		#endregion
		
		#region ICollection members
		public void CopyTo (Array dest, int index)
		{
			
		}
	
		public int Count {
			get {
				if (nodes == null)
					Load ();
				return nodes.GetLength(1); 
			}
		}
		
		object ICollection.SyncRoot {
			get { return this; }
		}
		
		bool ICollection.IsSynchronized {
			get { return false; }
		}

		#endregion
		
		#region IList members
		public bool IsReadOnly {
			get { return true;}
		}

		bool IList.IsFixedSize {
			get { return true;}
		}

		void IList.RemoveAt  (int index) {
			
		}
		
		void IList.Remove (object node) {
		}
		
		void IList.Insert (int index, object value) {
			
		}
		
		int IList.IndexOf (object node) {
			return -1;
		}
		
		bool IList.Contains (object node)
		{
			return false;
		}
		
		void IList.Clear () {
			this.Clear ();
		}
		
		int IList.Add (object node) {
			return -1;
		}
		
		object IList.this [int index] {
			get { return this [index]; }
			set {}
		}
		
		public DOMNode this [int index] {
			get {
				if (index < 0 || index >= Count)
					throw new ArgumentOutOfRangeException ("index");
				return nodes [index];								
			}
			set {}
		}
		
		#endregion

		internal class DOMNodeListEnumerator : IEnumerator {

			private DOMNodeList collection;
			private int index = -1;

			public DOMNodeListEnumerator (DOMNodeList collection)
			{
				this.collection = collection;
			}

			public object Current {
				get {
					if (index == -1)
						return null;
					return collection [index];
				}
			}

			public bool MoveNext ()
			{
				if (index + 1 >= collection.Count)
					return false;
				index++;
				return true;
			}

			public void Reset ()
			{
				index = -1;
			}
		}
		
	}	
}
