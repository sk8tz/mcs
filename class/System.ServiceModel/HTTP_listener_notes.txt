* ASP.NET integration and HTTP standalone service process flow

** Basic process flow

- ServiceHost opens a ChannelDispatcher for each service endpoint.
- ChannelDispatcher builds an IChannelListener (such as HttpSimpleChannelListener`1 or AspNetChannelListener`1) for each service endpoint (which contains a Binding that is used to build channel listeners).
- IChannelListener itself does not provide any service loop. Instead, the ChannelDispatcher starts a service loop.
-- IChannelListener only has methods for receiving requests that must be explicitly invoked for each request (i.e. to repeatedly process requests it must invoke receiver methods every time, unlike ServiceHost.Open() method).
- Inside the service loop, IChannelListener tries to accept channels such as HttpSimpleReplyChannel`1 or AspNetReplyChannel`1. Channels can be created only under the service throttle limitation (ServiceThrottle).
- A channel then tries to receive requests (TryReceiveRequest or BeginTryReceiveRequest)
- When WSDLs are enabled, ServiceMetadataExtension populates another ChannelDispatcher that serves HTTP requests to WSDLs.
-- It is important to understand that during this process it populates HTTP channel listener onto the same port and even possibly onto the same target URL, differentiating only by the request parameter (e.g. "?wsdl"). This causes a lot of confusion on both IHttpHandler (for ASP.NET) and HttpListener (for non-ASP.NET).
- Inside (abstract) HttpChannelListener`1, it internally has (abstract) HttpListenerManager which manages the actual HTTP listeners.
-- This intermediate stuff is required to manage HTTP listeners across the actual HttpChannelListeners because more than one channel listeners might use the identical HTTP listener; only one HttpListener can listen to a specific URI prefix, while (as explained above) WSDL support dispatcher may listen to the same URI only differentiating the query parameter.

** non-ASP.NET-specific process flow

- HttpSimpleChannelListener`1 implements IChannelListener`1, HttpSimpleReplyChannel implements IReplyChannel`1, and HttpSimpleRequestContext extends RequestContext.
- HttpSimpleChannelListener`1 internally creates HttpSimpleListenerManager that manages HttpListeners. The management here includes sharing HttpListeners between the channel listeners that have the identical Uri (see WSDL section above).
- When HttpSimpleChannelListener`1.[Begin]TryReceiveRequest() is invoked, then it subsequently calls HttpListener.BeginGetContext() to retrieve the context.


** ASP.NET-specific process flow

- An IHttpHandler manages one ServiceHost. IChannelListener is bound to a ChannelDispatcher. Hence, IChannelListener has a ServiceHost to which it is bound.
- HttpListener is designed to explicitly call [Begin]GetContext() method for each request processing. i.e. it is pull-based process.
- ASP.NET processing (IHttpHandler.ProcessRequest() method) is designed to be invoked by the ASP.NET runtime i.e. it is push-based process.
-- while WCF channels must be created by ChannelDispatcher, the ASP.NET channels must not be instantiated and returned immediately by IHttpHandler.ProcessRequest(), but have to wait for calls to IChannelListener.[Begin]AcceptChannel() at first.
-- Then, AspNetChannelListener`1 retrieves HttpContext. It has to wait for one if there is no HttpContext in the IHttpHandler)
-- Due to the process flow explained above, the IHttpHandler cannot handle the request when it receives a request. Instead, it has to store the HttpContext for IChannelListers' use.
-- Note that when there is WSDL extension, there is *another* IChannelListener that could be mapped to the identical URL i.e. which could be mapped to the identical IHttpHandler instance.

Call process flow:
- IHttpHandler.ProcessRequest()
  - optionally create ServiceHost and
  - calls ServiceHost.Open()
  - ChannelDispatcher.StartLoop()
  - AspNetChannelListener.[Begin]AcceptChannel() when throttling allows.
  - AspNetReplyChannel.[Begin]TryReceiveRequest()

** Bugs

There is not a few bugs on service implementations and there often are reasons:

- ServiceThrottle is currently disabled to serve only 1 request per channel listener. ASP.NET channels somehow fails to manage multiple concurrent channels.
-- On the other hand, TCP duplex channels used to fail to serve requests when the throttle is 1. It was due to failure in managing closed channels (while it is duplex and hence it has to maintain channels until it is explicitly closed, clients often, or mostly, disconnects without any notice. So it had to be changed to explicitly check if the connection is available at any beginning of the request processing).
-- It still fails to handle repeating requests, or some sequence of operations, onto the same channel.
-- ASP.NET integration somehow fails to serve the first request, which is caused by a missing SvcHttpHandler registration.

