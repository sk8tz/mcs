<project SchemaVersion="1.3">
    <assemblies>
        <assembly location=".\bin\Debug\NunitWeb.dll" documentation=".\bin\Debug\NunitWeb.xml" />
    </assemblies>
    <namespaces>
        <namespace name="MonoTests.SystemWeb.Framework"><para>The idea of the framework is as the following. A web application root is created
in a temp directory. All currently referenced and loaded assemblies are copied
to the /bin folder. Starting from this point, <see cref="HttpRuntime.ProcessRequest()"/> is
able to process any requests, compiling aspx, themes, master pages, etc. if
necessary.
</para>
<para>Few words about the API.</para>
<para>
WebTest is the central class of the framework. It's instances are typically
created in Nunit testcases. WebTest instances carry the information from the
testcase appdomain into the web application appdomain, and back. The most
important properties of <see cref="WebTest"/> are Request and Invoker. The request carries all
the information, necessary to create an HttpWorkerRequest in the web appdomain.
The invoker carries all the callbacks which have to be invoked to perform the
tests in the web appdomain. Here is an example of using the WebTest, Request,
and Invoker.
</para>
<example>
<code>
[Test]
public void TestCase1 ()
{
	WebTest t = new WebTest ();
	t.Invoker = PageInvoker.CreateOnLoad (TestCase1OnLoad));
	t.Request.Url = "MyPage.aspx";
	string htmlRes = t.Run();
	//HtmlDiff on htmlRes ...
}

static public void TestCase1OnLoad (Page p) //invoked in the web appdomain
{
	Assert.AreEqual ("White", p.StyleSheetTheme);
}
</code>
</example>

There is a support for postback. The flow goes like this: you make a first
request like:

<example>
<code>
WebTest t = new WebTest ("SomePage.aspx");
t.Run ();
</code>
</example>

Then you use the response to create a FormRequest:

<example>
<code>
FormRequest f = new FormRequest (t.Response);
</code>
</example>

This will parse the response, and use action URL, GET/POST method and all
hidden fields (VIEWSTATE, etc.) You might add more query parameters, like

<example>
<code>
f.Controls.Add (new BaseControl ("button1", ""));
f.Controls.Add (new BaseControl ("textbox1", "some text");
</code>
</example>

and run the second request:

<example>
<code>
t.Request = f;
t.Run ();
</code>
</example>

It can be useful to install some callbacks for the second request, before
calling to t.Run(), like the following:

<example>
<code>
t.Invoker = PageInvoker.CreateOnLoad (MyDelegate);
</code>
</example>

the delegate for the above test might look like:

<example>
<code>
t.Invoker = PageInvoker.CreateOnLoad (MyDelegate);

static public void MyDelegate (Page p)
{
	Assert.IsTrue (p.IsPostBack);
	Assert.AreEqual ("some text", ((TextControl)p.FindControl ("textbox1")).Text);
}
</code>
</example>


</namespace>
    </namespaces>
    <documenters>
        <documenter name="JavaDoc">
            <property name="OutputDirectory" value=".\doc\" />
            <property name="SkipNamespacesWithoutSummaries" value="True" />
        </documenter>
        <documenter name="LaTeX">
            <property name="OutputDirectory" value=".\doc\" />
            <property name="TextFileFullName" value="Documentation.tex" />
            <property name="TexFileBaseName" value="Documentation" />
            <property name="LatexCompiler" value="latex" />
            <property name="TexFileFullPath" value=".\doc\Documentation.tex" />
        </documenter>
        <documenter name="LinearHtml">
            <property name="OutputDirectory" value=".\doc\" />
            <property name="Title" value="Web Hosting Test Framework" />
            <property name="IncludeHierarchy" value="True" />
            <property name="CopyrightText" value="Andrew Skiba &lt;andrews@mainsoft.com&gt;" />
            <property name="FeedbackEmailAddress" value="andrews@mainsoft.com" />
        </documenter>
        <documenter name="MSDN">
            <property name="OutputDirectory" value=".\doc\" />
            <property name="HtmlHelpName" value="NunitWeb" />
            <property name="Title" value="Web Hosting Test Framework" />
            <property name="SkipNamespacesWithoutSummaries" value="True" />
            <property name="CopyrightText" value="Andrew Skiba &lt;andrews@mainsoft.com&gt;" />
            <property name="FeedbackEmailAddress" value="andrews@mainsoft.com" />
        </documenter>
        <documenter name="MSDN 2003">
            <property name="OutputDirectory" value=".\doc\" />
            <property name="Title" value="An NDoc Documented Class Library" />
        </documenter>
        <documenter name="VS.NET 2003">
            <property name="OutputDirectory" value=".\doc\" />
            <property name="HtmlHelpName" value="Documentation" />
            <property name="Title" value="An NDoc documented library" />
        </documenter>
        <documenter name="XML">
            <property name="OutputFile" value=".\doc\doc.xml" />
        </documenter>
    </documenters>
</project>