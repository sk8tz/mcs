// $ANTLR 2.7.2: "jscript-lexer-parser.g" -> "JScriptLexer.cs"$

namespace Microsoft.JScript
{
	public class JScriptParserTokenTypes
	{
		public const int EOF = 1;
		public const int NULL_TREE_LOOKAHEAD = 3;
		public const int LITERAL_function = 4;
		public const int IDENTIFIER = 5;
		public const int OPEN_PARENS = 6;
		public const int CLOSE_PARENS = 7;
		public const int OPEN_BRACE = 8;
		public const int CLOSE_BRACE = 9;
		public const int COMMA = 10;
		public const int SEMI_COLON = 11;
		public const int LITERAL_try = 12;
		public const int LITERAL_catch = 13;
		public const int LITERAL_finally = 14;
		public const int LITERAL_throw = 15;
		public const int LITERAL_switch = 16;
		public const int LITERAL_default = 17;
		public const int COLON = 18;
		public const int LITERAL_case = 19;
		public const int LITERAL_with = 20;
		public const int LITERAL_return = 21;
		public const int LITERAL_break = 22;
		public const int LITERAL_continue = 23;
		public const int LITERAL_do = 24;
		public const int LITERAL_while = 25;
		public const int LITERAL_for = 26;
		public const int LITERAL_var = 27;
		public const int LITERAL_in = 28;
		public const int LITERAL_if = 29;
		public const int LITERAL_else = 30;
		public const int ASSIGN = 31;
		public const int LITERAL_new = 32;
		// "." = 33
		public const int OPEN_BRACKET = 34;
		public const int CLOSE_BRACKET = 35;
		// "(" = 36
		// ")" = 37
		// "[" = 38
		// "]" = 39
		public const int DOT = 40;
		public const int INCREMENT = 41;
		public const int DECREMENT = 42;
		public const int LITERAL_delete = 43;
		public const int LITERAL_void = 44;
		public const int LITERAL_typeof = 45;
		public const int PLUS = 46;
		public const int MINUS = 47;
		public const int BITWISE_NOT = 48;
		public const int LOGICAL_NOT = 49;
		public const int MULT = 50;
		public const int DIVISION = 51;
		public const int MODULE = 52;
		public const int SHIFT_LEFT = 53;
		public const int SHIFT_RIGHT = 54;
		public const int UNSIGNED_SHIFT_RIGHT = 55;
		public const int LESS_THAN = 56;
		public const int GREATER_THAN = 57;
		public const int LESS_EQ = 58;
		public const int GREATER_EQ = 59;
		public const int LITERAL_instanceof = 60;
		public const int EQ = 61;
		public const int NEQ = 62;
		public const int STRICT_EQ = 63;
		public const int STRICT_NEQ = 64;
		public const int BITWISE_AND = 65;
		public const int BITWISE_XOR = 66;
		public const int BITWISE_OR = 67;
		public const int LOGICAL_AND = 68;
		public const int LOGICAL_OR = 69;
		public const int INTERR = 70;
		public const int MULT_ASSIGN = 71;
		public const int DIV_ASSIGN = 72;
		public const int MOD_ASSIGN = 73;
		public const int ADD_ASSIGN = 74;
		public const int SUB_ASSIGN = 75;
		public const int SHIFT_LEFT_ASSIGN = 76;
		public const int SHIFT_RIGHT_ASSIGN = 77;
		public const int AND_ASSIGN = 78;
		public const int XOR_ASSIGN = 79;
		public const int OR_ASSIGN = 80;
		public const int LITERAL_this = 81;
		public const int LITERAL_null = 82;
		public const int LITERAL_true = 83;
		public const int LITERAL_false = 84;
		public const int STRING_LITERAL = 85;
		public const int DECIMAL_LITERAL = 86;
		public const int HEX_INTEGER_LITERAL = 87;
		public const int LINE_FEED = 88;
		public const int CARRIAGE_RETURN = 89;
		public const int LINE_SEPARATOR = 90;
		public const int PARAGRAPH_SEPARATOR = 91;
		public const int TAB = 92;
		public const int VERTICAL_TAB = 93;
		public const int FORM_FEED = 94;
		public const int SPACE = 95;
		public const int NO_BREAK_SPACE = 96;
		public const int SL_COMMENT = 97;
		
	}
}
