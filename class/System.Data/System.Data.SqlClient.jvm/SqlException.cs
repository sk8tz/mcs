/* 
 * @(#)SqlException.java    1.0 01/01/03
 *
 * Copyright 2002 Mainsoft Corporation. All Rights Reserved.
 *
 * This software is the proprietary information of Mainsoft Corporation.
 * Use is subject to license terms.
 *
 */
namespace System.Data.SqlClient
{

    using java.sql;

    using System;
	using System.Data.ProviderBase;

    /**
     * The exception that is thrown when SQL Server returns a warning or error.
     * This class cannot be inherited.
     *
     * @author  Pavel Sandler
     * @version 1.0, 01/01/03
     */

    /*
    * CURRENT LIMITATIONS
    * 1. Constructor for serialization SqlException(SerializationInfo info, StreamingContext sc) 
    *    is not supported.
    * 2. Method "void GetObjectData(...,...)" is not supported (serialization)
    */

    public sealed class SqlException : AbstractDbException
    {
		internal SqlException(Exception cause, SqlConnection connection) : base(cause, connection) {}

		internal SqlException(SQLException cause, SqlConnection connection) : base(cause, connection) {}

		internal SqlException(string message, SQLException cause, SqlConnection connection) : base(message, cause, connection) {}

		protected override AbstractDbErrorCollection DbErrors {
			get {
				return Errors;
			}
		}

        

        /**
         * Gets the severity level of the error returned from the SQL Server .NET 
         * Data Provider.
         * @return severity level of the first error in the collection.
         */
        public byte Class
        {
            get
            {
				SqlErrorCollection errors = Errors;
				return errors.Count > 0 ? errors[0].Class : (byte)0;
            }
        }

        /**
         * Gets a collection of one or more SqlError objects that give detailed 
         * information about exceptions generated by the SQL Server .NET Data Provider.
         * @return collection of SqlError objects
         */
        public SqlErrorCollection Errors
        {
            get
            {
                return new SqlErrorCollection(_cause, _connection);
            }
        }

        /**
         * Gets the line number within the Transact-SQL command batch or stored 
         * procedure that generated the error.
         * @return line number of the first error in the collection.
         */
        public int LineNumber
        {
            get
            {
				SqlErrorCollection errors = Errors;
				return errors.Count > 0 ? errors[0].LineNumber : 0;
            }
        }

        /**
         * Gets a number that identifies the type of error.
         * @return number that identifies the type of first error in the collection
         */
        public int Number
        {
            get
            {
				SqlErrorCollection errors = Errors;
				return errors.Count > 0 ? errors[0].Number : 0;
            }
        }

        /**
         * Gets the name of the stored procedure or remote procedure call (RPC) 
         * that generated the error.
         * @return name of the stored procedure 
         */
        public String Procedure
        {
            get
            {
				SqlErrorCollection errors = Errors;
				return errors.Count > 0 ? errors[0].Procedure : null;
            }
        }

        /**
         * Gets the name of the computer running an instance of SQL Server 
         * that generated the error.
         * @return name of the computer where error generated
         */
        public String Server
        {
            get
            {
				SqlErrorCollection errors = Errors;
				return errors.Count > 0 ? errors[0].Server : null;
            }
        }


        /**
         * Gets a numeric error code from SQL Server that represents an error, 
         * warning or "no data found" message. 
         * @return numeric error code from SQL Server
         */
        public byte State
        {
            get
            {
				SqlErrorCollection errors = Errors;
				return errors.Count > 0 ? errors[0].State : (byte)0;
            }
        }
    }
}