//
// RSAOAEPKeyExchangeDeformatterTest.cs - NUnit Test Cases for RSAOAEPKeyExchangeDeformatter
//
// Author:
//	Sebastien Pouliot (spouliot@motus.com)
//
// (C) 2002 Motus Technologies Inc. (http://www.motus.com)
//

using NUnit.Framework;
using System;
using System.Security.Cryptography;

namespace MonoTests.System.Security.Cryptography {

public class RSAOAEPKeyExchangeDeformatterTest : TestCase {
	protected static RSA key;

	protected override void SetUp () 
	{
		// generating a keypair is REALLY long and the framework
		// makes sure that we generate one (even if create an object
		// to import an existing key)
		if (key == null) {
			key = RSA.Create ();
			key.ImportParameters (AllTests.GetRsaKey (true));
		}
	}

	protected override void TearDown () {}

	public void AssertEquals (string msg, byte[] array1, byte[] array2) 
	{
		AllTests.AssertEquals (msg, array1, array2);
	}

	// LAMESPEC: RSAOAEPKeyExchangeDeformatter.RNG versus RSAOAEPKeyExchangeFormatter.Rng
	public void TestProperties () 
	{
		RSAOAEPKeyExchangeDeformatter keyex = new RSAOAEPKeyExchangeDeformatter ();
		keyex.SetKey (key);
		AssertNull("RSAOAEPKeyExchangeDeformatter.Parameters", keyex.Parameters);
		AssertEquals("RSAOAEPKeyExchangeDeformatter.ToString()", "System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter", keyex.ToString ());
	}
/* commented until I've the test vectors
	// TestExchangeMin (1)
	// Test vector (EM) generated by CryptoAPI on Windows
	public void TestCapiExchangeMin() 
	{
		byte[] M = { 0x01 };
		byte[] EM = { 0x50, 0x33, 0xF3, 0x42, 0x52, 0x59, 0x71, 0x2D, 0x6E, 0x25, 0x5E, 0x06, 0xC3, 0x27, 0x94, 0xA6, 0xD1, 0x8E, 0x13, 0x90, 0x54, 0x5C, 0x12, 0x58, 0x7A, 0xC9, 0xB6, 0x3F, 0x4D, 0x2E, 0x97, 0xCC, 0x3A, 0x94, 0x24, 0xE8, 0x11, 0x1F, 0xD6, 0x7F, 0x37, 0x36, 0xAB, 0x6F, 0x3F, 0xB4, 0x1B, 0xB8, 0x13, 0x87, 0xC8, 0xBE, 0x00, 0x24, 0x02, 0x0F, 0xF6, 0x2E, 0xEA, 0x48, 0x8A, 0x6F, 0xC8, 0xF6, 0x0B, 0xAB, 0xF4, 0x02, 0xA5, 0xE2, 0x5A, 0xAA, 0xB5, 0x9E, 0xC2, 0x6E, 0xFF, 0xA6, 0xEC, 0xEC, 0xD0, 0xA2, 0x3F, 0x00, 0x93, 0xE9, 0xF3, 0xAA, 0x08, 0xA2, 0xD2, 0x11, 0x1B, 0x3F, 0x3E, 0x59, 0xB0, 0xBA, 0x47, 0x17, 0x8F, 0xF4, 0xEB, 0x34, 0xA5, 0xC4, 0xA4, 0x09, 0x43, 0xC4, 0x7B, 0x71, 0x2C, 0x4B, 0x9E, 0x2D, 0x22, 0x96, 0xBB, 0x52, 0xDD, 0x2B, 0x59, 0xED, 0xD6, 0xCA, 0xEB, 0xE6 };

		AsymmetricKeyExchangeDeformatter keyback = new RSAOAEPKeyExchangeDeformatter (key);
		byte[] Mback = keyback.DecryptKeyExchange (EM);
		AssertEquals ("RSAOAEPKeyExchangeDeformatter 1", M, Mback);
	}

	// test with a message 128 bits (16 bytes) long
	// Test vector (EM) generated by CryptoAPI on Windows
	public void TestCapiExchange128() 
	{
		byte[] M = { 0xd4, 0x36, 0xe9, 0x95, 0x69, 0xfd, 0x32, 0xa7, 0xc8, 0xa0, 0x5b, 0xbc, 0x90, 0xd3, 0x2c, 0x49 };
		byte[] EM = { 0x2D, 0xA3, 0xB0, 0xED, 0x1F, 0x13, 0x13, 0xBA, 0xAA, 0x26, 0xA7, 0x00, 0x76, 0x94, 0x0A, 0xDA, 0xFB, 0x4E, 0x14, 0x98, 0xD3, 0xF6, 0x26, 0x65, 0xCE, 0x7E, 0xB9, 0x23, 0xEF, 0xDE, 0x6E, 0xAB, 0x72, 0x33, 0xF3, 0x6F, 0xA9, 0x9B, 0xEC, 0x18, 0xC9, 0xB7, 0xC7, 0xE8, 0xE8, 0x55, 0xC4, 0x83, 0x1E, 0xF5, 0xDA, 0xCF, 0x5A, 0x53, 0xB0, 0x60, 0x42, 0xF4, 0x55, 0xEE, 0x00, 0x80, 0x92, 0x28, 0xA9, 0x0E, 0x2D, 0x9D, 0x49, 0x10, 0x65, 0x00, 0x21, 0x82, 0xCC, 0x05, 0xA3, 0x62, 0xAD, 0xCC, 0x5B, 0xE3, 0x8E, 0xAE, 0x01, 0x96, 0x81, 0xF6, 0x7B, 0x52, 0xB9, 0x6F, 0xE3, 0x06, 0x3A, 0x48, 0x4D, 0x87, 0xB9, 0xA3, 0xEA, 0x69, 0xD1, 0xFE, 0x8D, 0x82, 0x33, 0xE3, 0x05, 0xEB, 0x00, 0xA2, 0xA6, 0xDC, 0x95, 0xE4, 0xAC, 0x4E, 0xF4, 0x03, 0xC3, 0xFE, 0xA2, 0xE8, 0xB6, 0xBB, 0xBE, 0xD1 };

		AsymmetricKeyExchangeDeformatter keyback = new RSAOAEPKeyExchangeDeformatter (key);
		byte[] Mback = keyback.DecryptKeyExchange (EM);
		AssertEquals ("RSAOAEPKeyExchangeFormatter 1", M, Mback);
	}

	// test with a message 160 bits (20 bytes) long
	// Test vector (EM) generated by CryptoAPI on Windows
	public void TestCapiExchange192() 
	{
		byte[] M = { 0xd4, 0x36, 0xe9, 0x95, 0x69, 0xfd, 0x32, 0xa7, 0xc8, 0xa0, 0x5b, 0xbc, 0x90, 0xd3, 0x2c, 0x49, 0x00, 0x00, 0x00, 0x00 };
		byte[] EM = { 0x10, 0x79, 0x3A, 0x88, 0x04, 0x4B, 0xA5, 0x18, 0xD6, 0xCE, 0x97, 0x9B, 0xFF, 0xE8, 0xB4, 0xF5, 0x8D, 0x60, 0x07, 0xCD, 0x5F, 0x89, 0xA6, 0xCF, 0x5B, 0x90, 0x96, 0xC7, 0xF6, 0xD7, 0xF2, 0xCA, 0x7C, 0x13, 0x5A, 0x62, 0xB4, 0xED, 0xF4, 0xD7, 0x5C, 0x99, 0x4C, 0x07, 0xF4, 0x9F, 0x96, 0xE6, 0xBF, 0x2B, 0x82, 0x85, 0x38, 0x2C, 0x03, 0xBD, 0x61, 0x07, 0xF6, 0x05, 0x15, 0x55, 0xBF, 0xA9, 0x3B, 0xF5, 0x10, 0x96, 0x81, 0x01, 0x58, 0x5F, 0x61, 0x43, 0x52, 0x77, 0x71, 0x9C, 0x92, 0xEF, 0xD5, 0xE2, 0x60, 0x3F, 0x82, 0x69, 0x9F, 0xAF, 0xC2, 0xE1, 0x68, 0xB7, 0x5E, 0x62, 0xAC, 0x61, 0x6A, 0x1B, 0x46, 0x03, 0xF6, 0x7C, 0x20, 0x47, 0xF7, 0x6E, 0x7D, 0x35, 0x2A, 0xF6, 0x9C, 0xDA, 0x8A, 0xED, 0xAC, 0x1A, 0xC8, 0xF6, 0x4E, 0x7D, 0x21, 0xAC, 0x18, 0xEB, 0xA7, 0x68, 0xE0, 0xE2 };

		AsymmetricKeyExchangeDeformatter keyback = new RSAOAEPKeyExchangeDeformatter (key);
		byte[] Mback = keyback.DecryptKeyExchange (EM);
		AssertEquals ("RSAOAEPKeyExchangeFormatter 1", M, Mback);
	}

	// Max = (key size in bytes) - 2 * (hash length) - 2
	// Test vector (EM) generated by CryptoAPI on Windows
	public void TestCapiExchangeMax() 
	{
		byte[] M = new byte [(key.KeySize >> 3) - 2 * 20 - 2];
		byte[] EM = { 0x4B, 0x3F, 0x77, 0xE1, 0xA0, 0x6C, 0xD9, 0xFA, 0x19, 0x69, 0x21, 0xC4, 0x67, 0x2B, 0x0F, 0x2A, 0x0E, 0xCB, 0xAF, 0xAD, 0x08, 0xA5, 0xD2, 0x9B, 0xDC, 0x04, 0xDE, 0x8F, 0x13, 0xE4, 0x81, 0x25, 0xAF, 0xC5, 0x82, 0x51, 0xA9, 0x39, 0xAF, 0x82, 0xFF, 0xC7, 0x4F, 0x04, 0xE4, 0x21, 0xAC, 0xEE, 0x2F, 0x44, 0x78, 0x11, 0x29, 0x74, 0x3F, 0x74, 0xC1, 0x38, 0xC5, 0x43, 0x29, 0x2F, 0x0C, 0x7B, 0xDB, 0x2E, 0xE5, 0xA8, 0x6A, 0xEE, 0x6A, 0x14, 0xCC, 0x4E, 0x53, 0x8C, 0x0C, 0xEE, 0x23, 0x24, 0xDC, 0x9B, 0x75, 0x7C, 0xAD, 0x0C, 0xAC, 0x13, 0xC5, 0x02, 0x9E, 0x5D, 0x65, 0x76, 0xCB, 0xD4, 0xBF, 0x70, 0x43, 0xBE, 0x28, 0x67, 0x3F, 0x5D, 0x93, 0x38, 0x67, 0x4B, 0x25, 0x59, 0xF7, 0x8E, 0x4F, 0xCE, 0x2B, 0x2F, 0xA7, 0x4C, 0x68, 0x4C, 0xCC, 0x5F, 0xF3, 0x0A, 0xB7, 0xAA, 0x54, 0x7C };

		AsymmetricKeyExchangeDeformatter keyback = new RSAOAEPKeyExchangeDeformatter (key);
		byte[] Mback = keyback.DecryptKeyExchange (EM);
		AssertEquals ("RSAOAEPKeyExchangeFormatter 1", M, Mback);
	}
*/
	// TestExchangeMin (1)
	// Test vector (EM) generated by Mono on Windows
	public void TestMonoExchangeMin() 
	{
		byte[] M = { 0x01 };
		byte[] EM = { 0x87, 0xDC, 0xC4, 0x52, 0xBE, 0x2E, 0x42, 0x65, 0xAF, 0x50, 0xBE, 0x19, 0xAD, 0xE9, 0xC1, 0x6A, 0x42, 0x2E, 0x62, 0xBE, 0x8B, 0x8B, 0xEC, 0x08, 0x68, 0x92, 0x5D, 0x50, 0x45, 0x83, 0x00, 0xD0, 0xD2, 0xFE, 0x5D, 0xA0, 0x20, 0x22, 0xB4, 0x51, 0x23, 0x63, 0xEA, 0x54, 0x26, 0xEB, 0x2C, 0x15, 0x87, 0x6F, 0x2C, 0x1E, 0xD3, 0x7E, 0x2A, 0x2E, 0x4B, 0x90, 0xE6, 0xFE, 0x39, 0x6D, 0x6D, 0x4B, 0x6A, 0xB7, 0x2F, 0x66, 0xDE, 0xD5, 0x13, 0x48, 0xF5, 0x02, 0xCE, 0x62, 0x0C, 0xDF, 0x7D, 0x31, 0x60, 0x25, 0xAC, 0x91, 0xC3, 0xB6, 0xDD, 0xB9, 0x39, 0x33, 0xCA, 0xAC, 0x29, 0x4B, 0xAD, 0xB7, 0x9A, 0xE8, 0x9A, 0x2C, 0x4E, 0xDF, 0x11, 0x78, 0xB9, 0x05, 0xA9, 0x42, 0xE0, 0xD3, 0xF2, 0x13, 0x77, 0x80, 0x01, 0xB4, 0xB0, 0x72, 0x31, 0x11, 0xFC, 0x35, 0x9C, 0x19, 0x53, 0xDE, 0xCA, 0xCC };

		AsymmetricKeyExchangeDeformatter keyback = new RSAOAEPKeyExchangeDeformatter (key);
		try {
			byte[] Mback = keyback.DecryptKeyExchange (EM);
			AssertEquals ("RSAOAEPKeyExchangeDeformatter 1", M, Mback);
		}
		catch (CryptographicException) {
			// not supported by every version of Windows
			// Minimum: Windows 2000 + High Encryption Pack
		}
	}

	// test with a message 128 bits (16 bytes) long
	// Test vector (EM) generated by Mono on Windows
	public void TestMonoExchange128() 
	{
		byte[] M = { 0xd4, 0x36, 0xe9, 0x95, 0x69, 0xfd, 0x32, 0xa7, 0xc8, 0xa0, 0x5b, 0xbc, 0x90, 0xd3, 0x2c, 0x49 };
		byte[] EM = { 0x56, 0x2A, 0x9B, 0x7A, 0x4E, 0x17, 0xDB, 0x8E, 0x76, 0x54, 0x2B, 0xA6, 0xC3, 0x73, 0xB7, 0x32, 0xC2, 0x5E, 0xB0, 0x37, 0x19, 0xFD, 0xBE, 0x57, 0x71, 0xD6, 0xA2, 0xD3, 0x5C, 0xE4, 0x14, 0x9E, 0x3D, 0x03, 0x8E, 0xE9, 0x88, 0x50, 0x96, 0x61, 0x91, 0x53, 0x8B, 0xAC, 0xFA, 0x08, 0x14, 0xA0, 0xC0, 0x05, 0x49, 0xE2, 0x57, 0xBD, 0xE6, 0x68, 0x44, 0xAE, 0x72, 0x57, 0x86, 0xE5, 0xEF, 0x18, 0x9C, 0xF1, 0x88, 0x7E, 0x82, 0x22, 0x04, 0x6C, 0x44, 0xCF, 0x88, 0x1F, 0x34, 0x65, 0x78, 0xA0, 0xF3, 0x5A, 0x37, 0x9E, 0x3A, 0x24, 0x1E, 0xCC, 0x9F, 0x5D, 0x56, 0x3F, 0x67, 0xFF, 0x5D, 0xCB, 0x31, 0xA9, 0x94, 0x70, 0xF7, 0x19, 0xD2, 0xE5, 0x87, 0x50, 0xAA, 0xA5, 0xF9, 0x4D, 0x29, 0x66, 0xB6, 0xA1, 0xEF, 0x7D, 0x64, 0x81, 0xC6, 0x2D, 0xF1, 0xC9, 0x05, 0x27, 0xDE, 0x1E, 0x48, 0x13 };

		AsymmetricKeyExchangeDeformatter keyback = new RSAOAEPKeyExchangeDeformatter (key);
		try {
			byte[] Mback = keyback.DecryptKeyExchange (EM);
			AssertEquals ("RSAOAEPKeyExchangeFormatter 1", M, Mback);
		}
		catch (CryptographicException) {
			// not supported by every version of Windows
			// Minimum: Windows 2000 + High Encryption Pack
		}
	}

	// test with a message 160 bits (20 bytes) long
	// Test vector (EM) generated by Mono on Windows
	public void TestMonoExchange192() 
	{
		byte[] M = { 0xd4, 0x36, 0xe9, 0x95, 0x69, 0xfd, 0x32, 0xa7, 0xc8, 0xa0, 0x5b, 0xbc, 0x90, 0xd3, 0x2c, 0x49, 0x00, 0x00, 0x00, 0x00 };
		byte[] EM = { 0x28, 0x58, 0xA9, 0xCA, 0xDC, 0xDA, 0x26, 0x17, 0x19, 0x35, 0x2F, 0xBF, 0x14, 0x57, 0xF4, 0x18, 0x91, 0x81, 0x95, 0x7C, 0x70, 0x8A, 0x68, 0x77, 0x42, 0xF7, 0x70, 0xCB, 0xF6, 0x13, 0xCB, 0xE2, 0x0B, 0xD5, 0x96, 0x93, 0xA5, 0x7B, 0x4D, 0x88, 0x9B, 0x85, 0xB5, 0x08, 0x02, 0x84, 0xA9, 0xEB, 0xF3, 0xCC, 0xF2, 0x2C, 0xBE, 0xC9, 0x11, 0xDD, 0x04, 0x30, 0x73, 0x9A, 0xCC, 0x74, 0x68, 0xC7, 0x53, 0x69, 0xD6, 0x9D, 0x4D, 0xCD, 0x75, 0x60, 0x18, 0x85, 0xDD, 0xE7, 0x48, 0x50, 0xDC, 0xD6, 0x3B, 0x10, 0x10, 0x29, 0x16, 0x60, 0x6C, 0x71, 0xC2, 0x83, 0xC0, 0x9F, 0x52, 0x50, 0xCB, 0xF7, 0x5F, 0x23, 0xF4, 0x86, 0x1A, 0x02, 0x6D, 0x68, 0x0B, 0x0B, 0x0D, 0xAE, 0x0D, 0xE6, 0x29, 0x6A, 0x0E, 0xC6, 0x8C, 0x14, 0x9C, 0xC6, 0x09, 0xB7, 0x9E, 0x29, 0x19, 0x4E, 0xE0, 0x6F, 0xD8, 0x23 };

		AsymmetricKeyExchangeDeformatter keyback = new RSAOAEPKeyExchangeDeformatter (key);
		try {
			byte[] Mback = keyback.DecryptKeyExchange (EM);
			AssertEquals ("RSAOAEPKeyExchangeFormatter 1", M, Mback);
		}
		catch (CryptographicException) {
			// not supported by every version of Windows
			// Minimum: Windows 2000 + High Encryption Pack
		}
	}

	// Max = (key size in bytes) - 2 * (hash length) - 2
	// Test vector (EM) generated by Mono on Windows
	public void TestMonoExchangeMax() 
	{
		byte[] M = new byte [(key.KeySize >> 3) - 2 * 20 - 2];
		byte[] EM = { 0x78, 0x6B, 0xFA, 0x33, 0x7A, 0x29, 0xD5, 0x46, 0x13, 0x14, 0x83, 0xF5, 0xF7, 0x5D, 0xF8, 0xE3, 0x77, 0xCC, 0xB4, 0x51, 0x62, 0xBB, 0x77, 0x57, 0xFA, 0x3E, 0x4E, 0x17, 0xF1, 0xC9, 0x97, 0x3C, 0xA9, 0xE6, 0x10, 0x6A, 0x83, 0xC3, 0x63, 0x41, 0x46, 0x32, 0x54, 0xB3, 0x1A, 0x66, 0x84, 0x33, 0x24, 0x69, 0x5E, 0xA7, 0x69, 0x6D, 0x87, 0x7A, 0xED, 0xAB, 0x8E, 0x0E, 0x8C, 0xD1, 0x9B, 0xED, 0x3F, 0x37, 0xF1, 0x3A, 0x38, 0x0C, 0x7A, 0x7E, 0xD1, 0xE4, 0x9D, 0x7D, 0xB8, 0xF3, 0xE5, 0xBF, 0xEB, 0x28, 0xCC, 0xF2, 0x2F, 0x26, 0x70, 0x7D, 0x49, 0x05, 0x2B, 0x82, 0xBB, 0xEB, 0x8A, 0x17, 0x80, 0x76, 0xCA, 0xF3, 0xD3, 0xB9, 0x5C, 0x7A, 0x5E, 0x0B, 0x1A, 0x50, 0x7E, 0x00, 0x44, 0x8F, 0xD5, 0xD3, 0xA2, 0xA7, 0xBE, 0xA8, 0xC7, 0x9B, 0x49, 0x47, 0x7E, 0x9A, 0x0D, 0xFE, 0x4D, 0x29 };

		AsymmetricKeyExchangeDeformatter keyback = new RSAOAEPKeyExchangeDeformatter (key);
		try {
			byte[] Mback = keyback.DecryptKeyExchange (EM);
			AssertEquals ("RSAOAEPKeyExchangeFormatter 1", M, Mback);
		}
		catch (CryptographicException) {
			// not supported by every version of Windows
			// Minimum: Windows 2000 + High Encryption Pack
		}
	}

	// TestExchangeTooBig
	public void TestExchangeTooBig() 
	{
		AsymmetricKeyExchangeDeformatter keyex = new RSAOAEPKeyExchangeDeformatter (key);
		byte[] EM = new byte [(key.KeySize >> 3) + 1];
		try {
			// invalid format
			byte[] M = keyex.DecryptKeyExchange (EM);
			Fail ("Expected CryptographicException but got none");
		}
		catch (CryptographicException) {
			// this is what we expect
		}
		catch (Exception e) {
			Fail ("Expected CryptographicException but got : " + e.ToString ());
		}
	}
}

}
