
Tue Nov 19 13:03:27 CET 2002 Paolo Molaro <lupus@ximian.com>

	* UTF8Encoding.cs: fix GetByteCount (), too.

2002-11-19  Miguel de Icaza  <miguel@ximian.com>

	* UnicodeEncoding.cs: the bytemark should only be used to return
	information in GetPreamble, not to actually encode the information
	on the stream.  That is taken care of by the Stream classes.

	* UTF8Encoding.cs: ditto.

2002-11-13  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* StringBuilder.cs: only move the remaining chars in Remove.

2002-11-05  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* Encoding.cs: unixConsoleEncoding is now the same as Default. Avoid
	locking whenever possible.

2002-10-30  Miguel de Icaza  <miguel@ximian.com>

	* Encoding.cs (UTF8Unmarked): New static property, used to return
	a no-markers UTf8 encoder, used in a few places in the class library.

2002-09-06  Miguel de Icaza  <miguel@ximian.com>

	* Encoding.cs (UTF8, Unicode): Create with a preamble, that is
	what the Microsoft version does.

	(UnixConsoleEncoding): New internal method, used to get the
	encoding, in the future, this should pull the locale, map to
	charset and then code page. 

Wed Sep 4 14:01:25 CEST 2002 Paolo Molaro <lupus@ximian.com>

	* Encoding.cs: use icall to get default codepage.
	* DefaultEncoding.cs: remove useless class.

Mon Aug 26 16:44:54 CEST 2002 Paolo Molaro <lupus@ximian.com>

	* *.cs: change to conform to mono coding style.

2002-08-24  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* ASCIIEncoding.cs:
	* Decoder.cs:
	* Encoder.cs:
	* Encoding.cs:
	* UTF7Encoding.cs:
	* UTF8Encoding.cs:
	* UnicodeEncoding.cs: added Serializable attribute.

2002-08-24  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* StringBuilder.cs: improved performace by using String.InternalCopyTo
	instead of using ToCharArray all over the place (more that 50% of
	speed improvement when using Append).

Wed Aug 21 20:02:04 CEST 2002 Paolo Molaro <lupus@ximian.com>

	* *.cs: imported the code donated by Rhys Weatherley
	<rweather@southern-storm.com.au>.

2002-08-18  Dick Porter  <dick@ximian.com>

	* Encoding.cs: Make GetString() return a useful representation of
	the bytes, rather than "System.Char[]"

2002-08-03  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* StringBuilder.cs: added IndexerName to indexer.

2002-08-01  Jason Diamond <jason@injektilo.org>

	* Encoding.cs: Use GetByteCount instead of GetMaxByteCount when
	converting chars to bytes.

2002-07-13  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* StringBuilder.cs: updated comments. MaxCapacity always returns
	Int32.MaxValue.

2002-06-21  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* StringBuilder.cs: implemented AppendFormat methods using
	String.Format. Thanks Paolo!

	This makes xsp generate correct C# output in linux :-). I still need
	to do more testing, though.

Mon Jun 3 12:58:40 CEST 2002 Paolo Molaro <lupus@ximian.com>

	* ASCIIEncoding.cs: fixed handling of 0 bytecount.

2002-05-19  Martin Baulig  <martin@gnome.org>

	* Encoder.cs (IConvEncoder.GetByteCount, IConvEncoder.GetBytes):
	Added exception handling.

	* Decoder.cs (IConvDecoder.GetCharCount, IConvDecoder.GetChars):
	Added exception handling.

2002/04/02  Nick Drochak <ndrochak@gol.com>

	* StringBuilder.cs (Append): Removed obsolete overload.

2002-03-21  Mike Kestner  <mkestner@speakeasy.net>

	* ASCIIEncoding.cs : Fix off by one error in Get(Char|Byte)Count.

Thu Mar 21 17:38:19 CET 2002 Paolo Molaro <lupus@ximian.com>

	* StringBuilder.cs: no need to intern the string returned by ToString().

2002-03-17  Mike Kestner  <mkestner@speakeasy.net>

	* ASCIIEncoding.cs: Implement all the overridden methods. No longer
	  dependent on iconv icalls.
	* Encoding.cs: Fix count bugs in GetBytes and GetChars. Add virtual
	  to GetBytes.

Wed Mar 13 00:26:29 CET 2002 Paolo Molaro <lupus@ximian.com>

	* StringBuilder.cs: make ToString() return a interned string, this
	seems to be required to make switch on string work.

Fri Mar 8 17:29:58 CET 2002 Paolo Molaro <lupus@ximian.com>

	* StringBuilder.cs: make Append(char) do the smart thing.

2002-01-05  Ravi Pratap  <ravi@ximian.com>

	* ASCIIEncoding.cs, Encoding.cs, UTF7Encoding.cs, 
	UnicodeEncoding.cs: MonoTODO attribute marking.

	* StringBuilder.cs : Ditto.
	
Wed Nov 14 17:05:22 CET 2001 Paolo Molaro <lupus@ximian.com>

	* Encoding.cs: renamed some fields.
	* StringBuilder.cs: CLSCompliant updates.

2001-10-29  Nick Drochak  <ndrochak@gol.com>

	* StringBuilder.cs: Throw exceptions when constructor paramter(s) are
		invalid. Just like MS does (as best as I can tell).

	Tests for these exceptions are now added to the unit tests as well.

2001-10-25  Nick Drochak  <ndrochak@gol.com>

	* StringBuilder.cs: Throw exception if they try to make a StringBuilder
		whose capacity is greater than the MaxCapacity.

	I added some tests for the constructors and the above exception. More
	coming soon.

2001-10-23  Nick Drochak  <ndrochak@gol.com>

	* StringBuilder.cs: Refactored constructor code into just one
	constructor. All the other construtors call it. Also supplied missing
	constructors so the class has all those in the spec.

	Added the MaxCapacity property as well, however this needs to be 
	completed to return a value is related to the available system memory.

2001-10-07  Miguel de Icaza  <miguel@ximian.com>

	* Encoding.cs, UTF8Encoding.cs, UTF7Encoding.cs, ASCIIEncoding.cs,
	UnicodeEncoding.cs: Corrected API.

	* UTF8Encoding.cs: Checked in changes from Rafael.

2001-08-28  Dietmar Maurer  <dietmar@ximian.com>

	* UTF8Encoding.cs: impl. clumsy GetBytes

2001-07-16  Marcin Szczepanski <marcins@zipworld.com.au>

	* StringBuilder.cs (Text): Fixed.

	* StringBuilderTest.cs: Implement Test suite.

2001-07-12  Marcin Szczepanski <marcins@zipworld.com.au>

	* StringBuilder.cs: Implemented.

	The only methods left unimplemented are the AppendFormat( ... )
	ones just because it's probably better to wait until some of the
	Format related classes are implemented.  I've put that as a TODO
	comment at the top and created the methods with a "nop" body.

2001-06-26  Sean MacIsaac  <macisaac@ximian.com>

	* UnicodeEncoding.cs: Members added so that a clean compile is
	possible.

	* ASCIIEncoding.cs: Members added so that a clean compile is
	possible.

	* UTF7Encoding.cs: Members added so that a clean compile is
	possible.

	* UTF8Encoding.cs: Members added so that a clean compile is
	possible.

	* Encoding.cs: All public members included.  Most members
	unimplemented.
