2005-05-11  Sebastien Pouliot  <sebastien@ximian.com> 

	* CompressedStack.cs: Allow merging of an existing CompressedStack
	with the actual stack of the current Thread.
	* Thread.cs: GetCompressedStack and SetCompressedStack are public 
	before 2.0 but couldn't be seen with mono-api-info because of it's 
	LinkDemand for the ECMA public key. Removed unused CompressedStack
	private field (now part of the ExecutionContext).

2005-05-09  Sebastien Pouliot  <sebastien@ximian.com> 

	* CompressedStack.cs: GetCompressedStack is public before 2.0 but 
	couldn't be seen with mono-api-info because of it's LinkDemand for
	the ECMA public key. Stack capture occurs here if none exists on the
	current thread.

2005-04-28 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* ReaderWriterLock.cs: fix random ApplicationException errors. Tested
	with the System.Web.Cache stress program. Patch by Eyal Alayuf
	(Mainsoft). Fixes 74598.

2005-04-28  Sebastien Pouliot  <sebastien@ximian.com>

	* Thread.cs: Added property to get the ExecutionContext in 2.0. Fixed
	GetCompressedStack and made SetCompressedStack available (as internal)
	before NET_2_0.

2005-04-28  Sebastien Pouliot  <sebastien@ximian.com> 
 
	* AsyncFlowControl.cs: Updated wrt beta2.
	* ExecutionContext.cs: Updated wrt beta2. Class is now internal in 
	NET_1_1 to allow the compressed stack propagation to other threads.
	* CompressedStack.cs: Updated wrt beta2. Class is internal in NET_1_1 
	to allow the compressed stack propagation to other threads.
	* ContextCallback.cs: Updated wrt beta2.
	* HostExecutionContext.cs: Updated wrt beta2.
	* HostExecutionContextManager.cs: Updated wrt beta2.
	* Thread.cs: Added internal property to get the ExecutionContext.

2005-04-19  Zoltan Varga  <vargaz@freemail.hu>

	* Thread.cs: Add some unused fields.

2005-04-07 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* ThreadPool.cs: BindHandle does nothing now.

2005-04-07 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* Thread.cs: clear the Unstarted bit before calling Start_internal.
	Fixes bug #72738.

2005-04-04  Ben Maurer  <bmaurer@ximian.com>

	* Thread.cs: Do argument checking for Current[UI]Culture to make
	the exception more clear for a null value being set.

2005-03-24  Sebastien Pouliot  <sebastien@ximian.com>

	* CompressedStack.cs: Added LinkDemand for UnmanagedCode and ECMA 
	public key on GetCompressedStack method.
	* Mutex: Added LinkDemand for UnmanagedCode to create named (system 
	wide) mutexes.
	* Thread.cs: Added LinkDemand for ECMA public key on [Get|Set]
	CompressedStack methods.
	* WaitHandle.cs: Added LinkDemand and InheritanceDemand for 
	UnmanagedCode on set Handle property.

2005-03-10  Zoltan Varga  <vargaz@freemail.hu>

	* Thread.cs: Make slothash a ThreadStatic field. Fixes #65414.

2005-02-21  Zoltan Varga  <vargaz@freemail.hu>

	* Monitor.cs Interlocked.cs: Add net 2.0 ReliabilityContractAttributes.

2005-02-20  Zoltan Varga  <vargaz@freemail.hu>

	* Interlocked.cs: Applied patch from Luca Barbieri (luca.barbieri@gmail.com). Add NET 2.0 methods.

Tue Feb 15 18:19:11 CET 2005 Paolo Molaro <lupus@ximian.com>

	* Thread.cs: make the slothash a field in MonoThread.

2005-01-27  Sebastien Pouliot  <sebastien@ximian.com>

	* Overlapped.cs: Added check for ControlPolicy and ControlEvidence for
	Unsafe pack. Added MonoTODO for missing security stack propagation.
	* Thread.cs: Add security checks for ControlThread.
	* ThreadPool.cs: Added declarative security checks.

Thu Jan 13 18:15:32 CET 2005 Paolo Molaro <lupus@ximian.com>

	* Thread.cs: implement stacksize and parameterized
	start functionality (requires matching runtime).

2005-01-12 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* ThreadAbortException.cs: added private serialization .ctor.

2004-12-20  Sebastien Pouliot  <sebastien@ximian.com>

	* CompressedStack.cs: Implemented most todo so it's usable for CAS.
	* CompressedStackSwitcher.cs: Implemented most todo.
	* Thread.cs: Implement support for getting/setting CompressedStack.

2004-12-15  Zoltan Varga  <vargaz@freemail.hu>

	* Thread.cs: Change type of culture_info and ui_culture_info to 
	IntPtr. Implement correct culture handling for the UI culture as
	well.

2004-12-14  Zoltan Varga  <vargaz@freemail.hu>

	* Thread.cs: Optimize CurrentCulture to avoid initializing the
	serialization infrastructure in the common case when the culture is
	not set explicitly.

2004-12-06  Zoltan Varga  <vargaz@freemail.hu>

	* Thread.cs: Add new fields 'serialized_culture_info{_len}'.
	
	* Thread.cs (CurrentCulture): Fix leaking of culture info objects 
	across appdomains. Partially fixes #50049.

2004-12-05  Miguel de Icaza  <miguel@ximian.com>

	* AutoResetEvent.cs (Set, Reset): If we are disposed, throw a
	ObjectDisposedEvent, helped track the WebConnection destructor
	issue. 

2004-09-16 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* Timer.cs: don't invoke the callback twice when the timer changes.
	Fixes bug #66116.

2004-09-08  Marek Safar  <marek.safar@seznam.cz>

	* Interlocked.cs: Class is static in NET_2_0.

2004-09-04  Sebastien Pouliot  <sebastien@ximian.com>

	* Thread.cs: Changed an imperative security demand to declarative
	(unsupported) so it doesn't (for now) call the security runtime.

2004-08-20  Sebastien Pouliot  <sebastien@ximian.com>

	* Thread.cs: Added Fx 2.0 properties/methods/attributes.

2004-08-12  Sebastien Pouliot  <sebastien@ximian.com>

	* CompressedStackSwitcher.cs: Added missing [ComVisible] and 
	[ReliabilityContract] attributes.
	* ExecutionContext.cs: Added missing [ComVisible] and 
	[Serializable] attributes.
	* HostExecutionContext.cs: Added missing [ComVisible] attribute.
	* HostExecutionContextManager.cs: Added missing [ComVisible] and 
	[ReliabilityContract] attributes.
	* HostExecutionContextSwitcher.cs: Added missing Equals and 
	GetHashCode methods and [ComVisible] and [ReliabilityContract] attrs.
	* ParameterizedThreadStart.cs: New delegate in NET_2_0.
	* SendOrPostCallback.cs: Added missing [ComVisible] attribute.
	* SynchronizationContext.cs: Added new (2.0 beta1) methods Copy and
	WaitHelper. Added missing [ComVisible] and [ReliabilityContract] attrs.
	* SynchronizationContextSwitcher.cs: Added missing [ComVisible] and 
	[ReliabilityContract] attributes.

2004-08-08  Sebastien Pouliot  <sebastien@ximian.com>

	* HostExecutionContext.cs: Fx 2.0 stub required for AppDomain.
	* HostExecutionContextManager.cs: Fx 2.0 stub required for AppDomain.
	* HostExecutionContextSwitcher.cs: Fx 2.0 stub required for AppDomain.

2004-08-04 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* Timer.cs: don't invoke the callback if the period changes before the
	due time. Fixes bug #62421.

2004-07-27  Lluis Sanchez Gual  <lluis@novell.com>

	* ExecutionContext.cs, ExecutionContextSwitcher.cs, 
	  SynchronizationContext.cs, SynchronizationContextSwitcher.cs: Added
	  2.0 stubs.

2004-07-15  Dick Porter  <dick@ximian.com>

	* Thread.cs: Hold a lock in GetNamedDataSlot.  Fixes bug 61582,
	based on patch by Sébastien Robitaille
	(sebastien.robitaille@croesus.com).  Also fix instances of
	lock(typeof(Thread)) to lock a private object instead.

2004-07-14  Sebastien Pouliot  <sebastien@ximian.com>

	* AsyncFlowControl.cs: New structure in Fx 2.0 required in 
	System.Security namespace.
	* CompressedStackSwitcher.cs: New structure in Fx 2.0 required in 
	System.Security namespace.
	* ContextCallback.cs: New delegate in Fx 2.0 required in 
	System.Security namespace.
	* CompressedStack.cs: Updated API for NET_2_0 profile.

2004-07-10  Lluis Sanchez Gual  <lluis@ximian.com>

	* SendOrPostCallback.cs: New delegate.

2004-06-24  Dick Porter  <dick@ximian.com>

	* Mutex.cs: Implement the createdNew parameter

2004-06-15  Gert Driesen <drieseng@users.sourceforge.net>

	* Thread.cs: changed return type of VolatileRead to UIntPtr
	* ThreadPool.cs: set return type of SetMinThreads to bool

2004-06-15  Lluis Sanchez Gual  <lluis@ximian.com>

	* Thread.cs: Added new fields to keep sync with MonoThread.
	  Removed state changes in Sleep and Join. The state change is now done
	  in the icall. For accessing to internal fields lock with synch_lock
	  instead of this, which can be a source of deadlocks.

2004-06-15  Lluis Sanchez Gual  <lluis@ximian.com>

	* Timer.cs: Don't abort the thread if Dispose() is called from the runner
	  thread.

2004-06-11  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* Thread.cs:
	(CurrentPrincipal): lock on CurrentThread, not typeof (Thread) and set
	the thread IPrincipal if we get it from the AppDomain.

2004-06-09  Gert Driesen <drieseng@users.sourceforge.net>

	* CompressedStack.cs: Added finalizer to match public API of
	MS.NET

2004-05-19  Lluis Sanchez Gual <lluis@ximian.com>

	* Thread.cs: Some fixes in Abort. Implemented Suspend and Resume.
	  Added internal interruption_requested field.

2004-05-13  Sebastien Pouliot  <sebastien@ximian.com>

	* CompressedStack.cs: Added an internal constructor so a default one
	doesn't appear with corcompare.
	* Thread.cs: Added missing MemoryBarrier (only for 1.1) and SpinWait to please
	corcompare. Both throw a NotImplementedException.
	* ThreadPool.cs: Added missing UnsafeRegisterWaitForSingleObject methods (4
	overloads) to please corcompare. All throw a NotImplementedException.

2004-05-12  Zoltan Varga  <vargaz@freemail.hu>

	* CompressedStack.cs: New file.

2004-04-15  Lluis Sanchez Gual <lluis@ximian.com>

	* ThreadPool.cs: Added GetMinThreads and SetMinThreads.
	* Timer.cs: In Change, return false if the timer has been disposed.
	In Dispose, notify the WaitHandle.

2004-04-11  Lluis Sanchez Gual <lluis@ximian.com>

	* ReaderWriterLock.cs: More fixes: never wait where acquiring a reader lock
	  if the thread already has the lock. Added readyWaitingReaders variable to
	  keep track of threads ready to get the reader lock.

2004-04-11  Lluis Sanchez Gual <lluis@ximian.com>

	* LockQueue.cs: Moved lockCount change inside the rwlock lock. Removed
	  lock(this) when entering the rwlock to avoid a deadlock.
	* ReaderWriterLock.cs: In AcquireWriterLock, queue the thread if the queue
	  is not empty (even if state==0).

2004-04-09  Zoltan Varga  <vargaz@freemail.hu>

	* Timer.cs: Call the callback immediately if dueTime is 0. Fixes
	#56728.

2004-04-08  Jackson Harper  <jackson@ximian.com>

	* ReaderWriterLock.cs: Fix tyop
	
2004-04-08  Lluis Sanchez Gual <lluis@ximian.com>

	* ReaderWriterLock.cs: Changed some methods to private.
	* WaitHandle.cs: In Wait methods, release the synchronization context when 
	  exitContext is true.

2004-04-08  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* Timer.cs: call Abort on the Runner instance too.

2004-04-07  Jackson Harper  <jackson@ximian.com>

	* Thread.cs: Use new culture info method for constructing the
	current culture.
	
2004-04-07  Lluis Sanchez Gual <lluis@ximian.com>

	* ReaderWriterLock.cs: When a thread holds a writer lock, a call to
	  AcquireReaderLock works like a call to AcquireWriterLock.

2004-04-06  Lluis Sanchez Gual <lluis@ximian.com>

	* Monitor.cs: In Wait(), release the synchronization context when 
	  exitContext is true.

2004-04-06  Lluis Sanchez Gual <lluis@ximian.com>

	* LockCookie.cs: Keep in this class the count of reader or writer locks
	  for a thread, not only whether it has locks or not.
	* LockQueue.cs: Added property for checking if a thread is waiting in
	  the queue. Wait now returns a boolean that set to false on timeout 
	  expiration.
	* ReaderWriterLock.cs: Started fixing bugs but I had to rewrite a lot of it.
	  The main change is that now it keeps a reader lock count for each
	  thread. This is needed since methods like ReleaseLock or 
	  UpgradeToWriterLock need to return a per-thread status in LockCookie.
	  Also added support for recursive writer-lock requests.

2004-03-21  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* ThreadAbortException.cs: use same HResult as MS.
	* Timer.cs: abort the running thread when disposing the Timer. This
	fixes NullRefs when finishing xsp.

2004-03-15  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* NativeOverlapped.cs: added 2 new internal fields.
	* Overlapped.cs: implemented, but it's not used.

	* ThreadPool.cs: implemented BindHandle.

2004-03-08  Zoltan Varga  <vargaz@freemail.hu>

	* Timer.cs (Dispose): Applied patch from Jaroslaw Kowalski 
	(jaak@zd.com.pl). Fix finalization problems during appdomain unload.

2004-02-23  Jackson Harper <jackson@ximian.com>

	* LockCookie.cs: Add some fields for restoring locks.
	* ReaderWriterLock.cs: Implement
	* LockQueue.cs: New File - used for queueing thread locks in
	ReaderWriterLock.
	
2004-02-19  Jackson Harper <jackson@ximian.com>

	* Monitor.cs: Fix spelleng.
	
2004-02-09  Zoltan Varga  <vargaz@freemail.hu>

	* Thread.cs: Add fields added to unmanaged MonoThread here as well.
	Fixes random errors caused by memory corruption.

2004-02-06  Zoltan Varga  <vargaz@freemail.hu>

	* Thread.cs: Store the thread name in unmanaged memory, since the
	thread object is shared between appdomains.

2004-02-05  Sebastien Pouliot  <sebastien@ximian.com>

	* Thread.cs: Implemented CurrentPrincipal.

2004-01-22  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* Thread.cs: delayed thread creation until Start is called. If we
	don't do that and Start() is not called, the thread is leaked. First
	step towards fixing bug #53078. 

2003-12-02  Dick Porter  <dick@ximian.com>

	* Thread.cs: Throw InvalidOperationException if Thread.Name is
	already set.

2003-12-01  Dick Porter  <dick@ximian.com>

	* Thread.cs: Implement CurrentCulture and CurrentUICulture

2003-11-12  Miguel de Icaza  <miguel@ximian.com>

	* Thread.cs: Add new VolatileRead/VolatileWrite methods from 1.1

2003-10-23  Lluis Sanchez Gual  <lluis@ximian.com>

	* Thread.cs: Added ResetDataStoreStatus and RestoreDataStoreStatus
	  methods. They are used in CrossAppDomainChannel to save and restore
	  thread's local data when switching between domains.

2003-10-08  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* ManualResetEvent.cs: added check for disposed.
	* Thread.cs: no need to init this field.

2003-10-01  Zoltan Varga  <vargaz@freemail.hu>

	* Thread.cs: Add locking to AllocateNamedDataSlot and 
	FreeNamedDataSlot.

Wed Aug 20 12:01:36 CEST 2003 Paolo Molaro <lupus@ximian.com>

	* Thread.cs: put all the fields at the start and add
	more fields needed by the runtime.

2003-08-14  Lluis Sanchez Gual  <lluis@ximian.com>

	* Thread.cs: SetData() method: use Hashtable.Contains to check
	  if a dataslot has been allocated (value could be null).

2003-07-23  Duncan Mak  <duncan@ximian.com>

	* WaitHandle.cs (CheckDisposed): This method is not in the public
	API, mark it as 'internal'.

2003-07-01  Dick Porter  <dick@ximian.com>

	* Thread.cs: Throw an exception if thread creation failed.
	(Better than just blowing up later.)

2003-06-27  Dietmar Maurer  <dietmar@ximian.com>

	* ThreadPool.cs: use async delegate invoke.

2003-06-25  Dick Porter  <dick@ximian.com>

	* WaitHandle.cs: Default handle value should be InvalidHandle, not
	Zero.

2003-06-21  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* ThreadPool.cs: correctly create a TimeSpan with provided the number of
	milliseconds.

	* WaitHandle.cs: fixes for WaitAny/All and TimeSpan.

2003-06-06  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WaitHandle.cs: checks and exceptions.

2003-06-02  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* NativeEventCalls.cs: added CloseEvent_intenal.
	* WaitHandle.cs: call CloseEvent_internal when disposing.

2003-05-31  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* RegisteredWaitHandle.cs: check that the callback is not null before
	invoking.

	* ThreadPool.cs: fixed timeout -> TimeSpan conversions (closes bug
	#43963). Queue the item before setting the handle. If there's a timeout,
	avoid trying to Dequeue, getting the exception et al, just continue the
	loop.

Mon May 19 09:07:45 CEST 2003 Paolo Molaro <lupus@ximian.com>

	* Monitor.cs: removed test_owner, the check is already done in the
	icall.

Tue May 13 15:34:29 CEST 2003 Paolo Molaro <lupus@ximian.com>

	* Thread.cs: added missing field used by the runtime and
	a new field to support thread-static data.

2003-04-17  Pedro Martï¿½ez Juliï¿½ <yoros@wanadoo.es>

	* Timer.cs: Change the position of two lines because they were
	before the "if" that ensures the integrity. After this, the first of
	that two lines was producing a NullReferenceException.

2003-04-09  Dick Porter  <dick@ximian.com>

	* Thread.cs: Make sure a reference to the ThreadStart delegate is
	held.  There's no telling how long it will be before
	Thread.Start() is called, and GC might destroy the delegate.
	Thread() and Start() need to be rewritten so that the runtime
	creates the new thread when Start() is called, which will simplify
	the code a great deal.

2003-03-20  Miguel de Icaza  <miguel@ximian.com>

	* Thread.cs (CurrentCuluture): use the invaraint culture instead
	of "" for the current_culture setting.

2003-03-25  Zoltan Varga  <vargaz@freemail.hu>

	* Thread.cs: Fix visibility of ResetAbort().

2003-03-18  Dick Porter  <dick@ximian.com>

	* Thread.cs: Keep the thread state updated in all the places that
	require it.  (Suspend, Resume and Interrupt not handled yet)

2003-03-03  Lluis Sanchez Gual <lluis@ideary.com>

	* Thread.cs: Changed implementation of CurrentContext, adapted to the changes
	  in the runtime.

2003-02-19  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* Thread.cs: implemented CurrentContext.

2003-02-17  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* Thread.cs: made the thread_id for the current thread accesible through
	an internal property.  

2003-02-17  Dick Porter  <dick@ximian.com>

	* Thread.cs: Added the Start semaphore field to the class.  Update
	the thread state after Start() has returned, not before.

2003-02-13  Zoltan Varga  <vargaz@freemail.hu>

	* Thread.cs (Sleep): Timeout.Infinite is a value argument.

2003-02-11  Dick Porter  <dick@ximian.com>

	* Monitor.cs: Infinite wait is Infinite, not 0 ms

2003-02-10  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* Thread.cs: fixed bug #37759.

2003-02-07  Patrik Torstensson

	* Timer.cs: Set the Background thread flag for the timer thread

2003-02-05  Patrik Torstensson

	* ThreadPool.cs: Reformated and fixed issue that made all thread exit the pool. 

2003-02-04  Lluis Sanchez Gual <lluis@ideary.com>

	* ThreadPool.cs: Implemented RegisterWaitForSingleObject methods.

Tue Jan 28 17:55:59 CET 2003 Paolo Molaro <lupus@ximian.com>

	* Thread.cs: delay-init datastorehash.

2003-01-10  Patrik Torstensson  <totte@race-x-change.com>

	* ThreadPool.cs: Temporary removed the usage of monitor thread, implemented a 
                    model more equal to the MS one.

2002-12-10  Dick Porter  <dick@ximian.com>

	* Monitor.cs:
	* Thread.cs:
	* ThreadPool.cs:
	* Timer.cs:
	* WaitHandle.cs: Use TotalMilliseconds to convert a TimeSpan to
	ms, not Milliseconds.

2002-12-07  Martin Baulig  <martin@ximian.com>

	* Timer.cs: Make it actually work; now it no longer sets your
	application on fire if you use a zero periode and Timer.Change()
	actually works.

2002-11-11  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* Timer.cs: implemented more stuff. It works now.

2002-10-25  Zoltan Varga  <vargaz@freemail.hu>

	* Thread.cs: Implement GetDomain() and GetDomainID().

2002-10-24  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* ThreadPool.cs: now the monitor thread is not sleeping and checking if
	more worker threads needed. It waits on _DataInQueue. If (and only if)
	there's data in the queue it checks if more worker threads needed and
	then sleeps 0.5s before waiting for queued data again.

2002-09-28  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* ThreadPool.cs: set IsThreadPoolThread before starting the worker.

2002-09-11  Dick Porter  <dick@ximian.com>

	* Mutex.cs: 
	* ManualResetEvent.cs: 
	* AutoResetEvent.cs: Use the WaitHandle.Handle property instead of
	the private field

	* WaitHandle.cs: Hide the os_handle field and the WaitOne_internal
	method

2002-09-03  Dick Porter  <dick@ximian.com>

	* Thread.cs: Added thread ID field

2002-08-27  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WaitHandle.cs: IDisposable fixes.

2002-08-14  Dick Porter  <dick@ximian.com>

	* Thread.cs: Make CurrentUICulture act the same as CurrentCulture
	for now.

2002-08-12  Dietmar Maurer  <dietmar@ximian.com>

	* ThreadAbortException.cs: impl. ExceptionState property.

	* Thread.cs: moved all instance variables to the start of the
	class. added support for Thread::Abort()

2002-04-30  Dick Porter  <dick@ximian.com>

	* Thread.cs: If LocalDataStoreSlot already has data set, remove it
	before adding a new one.

	Use the Thread object destructor to tell the runtime to close the
	thread handle.

2002-04-14 Patrik Torstensson <patrik.torstensson@labs2.com>

	* Interlocked.cs: made all methods icalls.

2002-04-14  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* IOCompletionCallback.cs: added attributes to the delegate
	(CLSCompliant(false) and Serializable).

2002-04-14 Patrik Torstensson <patrik.torstensson@labs2.com>
	* Thread.cs: Fixed IsThreadPoolThread to use a internal property instead of extending 
				 the threadstate enum.
	* ThreadPool.cs: Now using the internal Isthreadpoolthread property
	* ThreadState.cs: removed non-standard enum (ThreadPoolThread)

2002-04-14 Patrik Torstensson <patrik.torstensson@labs2.com>

	* ThreadState.cs: Added enum for threadpool thread
	* Thread.cs: changed the set/clr_state to be internal (used from threadpool)
	* Thread.cs: Added IsThreadPoolThread
	* ThreadPool.cs: Implementation of QueueUserWorkItem

Wed Feb 13 21:51:30 CET 2002 Paolo Molaro <lupus@ximian.com>

	* Thread.cs: implement CurrentCulture property needed by
	Convert.ChangeType() (used when compiling enums).

2002-01-23  Dick Porter  <dick@ximian.com>

	* ManualResetEvent.cs: 
	* AutoResetEvent.cs: Fixed DOS line endings

2002-01-22  Veronica De Santis <veron78@interfree.it>   
        
	* NativeEventCalls : Class that contains internal calls shared by Auto 
	  		     and Manual Reset Events
	* AutoResetEvents.cs : Added class AutoResetEvents and its implementation
	* ManualResetEvents.cs : Added class ManualResetEvents and its implementation

2002-01-16  Veronica De Santis <veron78@interfree.it>   
        
	* WaitHandle.cs : Renamed handle to os_handle and make it protected
	                  instead of private.
	* Mutex.cs : Write the System.Threading.Mutex methods ( constructors 
	             and the ReleaseMutex)

2002-01-15  Dick Porter  <dick@ximian.com>

	* WaitHandle.cs:
	* Thread.cs: Make the runtime's idea of infinite timeouts coincide
	with the class library's

2002-01-10  Dick Porter  <dick@ximian.com>

	* WaitHandle.cs: Added checks for too many handles and null
	handles in WaitAll() and WaitAny
	

2002-01-05  Ravi Pratap  <ravi@ximian.com>

	* AutoResetEvent.cs, ManualResetEvent.cs, Monitor.cs : MonoTODO
	decoration.

	* Mutex.cs, Overlapped.cs, ReaderWriterLock.cs, RegisteredWaitHandle.cs,
	Thread.cs, ThreadAbortException.cs, ThreadPool.cs, Timer.cs, WaitHandler.cs : Ditto.

2001-12-11  Dick Porter  <dick@ximian.com>

	* WaitHandle.cs: Implemented WaitAll(), WaitAny() and WaitOne() as
	internal calls.

2001-11-26  Dick Porter  <dick@ximian.com>

	* Thread.cs: DataSlot uses a single system TLS slot, and a
	hashtable per thread.  Some minor changes to reflect the new
	internal calls using the new IO library, and the newly-supported
	bool returns from internal calls.

	* Monitor.cs: Use bool returns from internal calls now they are
	supported by the runtime.  Coalesce enter with the try_enter
	internal call.

Wed Nov 14 17:06:18 CET 2001 Paolo Molaro <lupus@ximian.com>

	* Overlapped.cs, ThreadPool.cs, Timer.cs: CLSCompliant updates.

2001-10-03  Dick Porter  <dick@ximian.com>

	* Monitor.cs: Implemented all methods except the two Wait()
	methods that take boolean parameters

2001-09-28  Dick Porter  <dick@ximian.com>

	* Thread.cs: Implemented AllocateDataSlot(),
	AllocateNamedDataSlot(), FreeNamedDataSlot(), GetData(),
	GetNamedDataSlot(), SetData(), IsBackground.  Reworked Thread()
	and Start() to avoid a race condition. Added thread-safe state
	changing private operations.

	* Monitor.cs: Comment out the GetType() calls because it isn't implemented yet

2001-09-25  Dick Porter  <dick@ximian.com>

	* Thread.cs: Implement Join and timed Join, set correct state
	around Start, Join and Sleep calls, implement IsAlive and
	ThreadState properties.

	* ThreadState.cs (Threading): Added StopRequested,
	SuspendRequested, Suspended values

2001-09-23  Dick Porter  <dick@ximian.com>

	* Thread.cs: Implemented CurrentThread and Sleep (both versions)
	with internal calls, and Name.

2001-09-21  Dick Porter  <dick@ximian.com>

	* Thread.cs: Implement Thread(ThreadStart) constructor and Start()
	with an internal call

	* WaitHandle.cs: Close calls Dispose(false)

2001-09-13  Dick Porter  <dick@ximian.com>

	* ApartmentState.cs (Threading): Set the correct enum values

2001-09-13  Dick Porter  <dick@ximian.com>

	* ApartmentState.cs, AutoResetEvent.cs, IOCompletionCallback.cs,
	Interlocked.cs, LockCookie.cs, ManualResetEvent.cs, Monitor.cs,
	Mutex.cs, NativeOverlapped.cs, Overlapped.cs, ReaderWriterLock.cs,
	RegisteredWaitHandle.cs, SynchronizationLockException.cs,
	Thread.cs, ThreadAbortException.cs, ThreadInterruptedException.cs,
	ThreadPool.cs, ThreadStart.cs, ThreadStateException.cs,
	Timeout.cs, Timer.cs, TimerCallback.cs, WaitCallback.cs,
	WaitHandle.cs, WaitOrTimerCallback.cs: System.Threading class
	stubs.
	
2001-07-18  Michael Lambert <michaellambert@email.com>

	* ThreadPriority.cs, ThreadState.cs: Add.
