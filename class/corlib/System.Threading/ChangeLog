
Mon May 19 09:07:45 CEST 2003 Paolo Molaro <lupus@ximian.com>

	* Monitor.cs: removed test_owner, the check is already done in the
	icall.

Tue May 13 15:34:29 CEST 2003 Paolo Molaro <lupus@ximian.com>

	* Thread.cs: added missing field used by the runtime and
	a new field to support thread-static data.

2003-04-17  Pedro Martínez Juliá  <yoros@wanadoo.es>

	* Timer.cs: Change the position of two lines because they were
	before the "if" that ensures the integrity. After this, the first of
	that two lines was producing a NullReferenceException.

2003-04-09  Dick Porter  <dick@ximian.com>

	* Thread.cs: Make sure a reference to the ThreadStart delegate is
	held.  There's no telling how long it will be before
	Thread.Start() is called, and GC might destroy the delegate.
	Thread() and Start() need to be rewritten so that the runtime
	creates the new thread when Start() is called, which will simplify
	the code a great deal.

2003-03-20  Miguel de Icaza  <miguel@ximian.com>

	* Thread.cs (CurrentCuluture): use the invaraint culture instead
	of "" for the current_culture setting.

2003-03-25  Zoltan Varga  <vargaz@freemail.hu>

	* Thread.cs: Fix visibility of ResetAbort().

2003-03-18  Dick Porter  <dick@ximian.com>

	* Thread.cs: Keep the thread state updated in all the places that
	require it.  (Suspend, Resume and Interrupt not handled yet)

2003-03-03  Lluis Sanchez Gual <lluis@ideary.com>

	* Thread.cs: Changed implementation of CurrentContext, adapted to the changes
	  in the runtime.

2003-02-19  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* Thread.cs: implemented CurrentContext.

2003-02-17  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* Thread.cs: made the thread_id for the current thread accesible through
	an internal property.  

2003-02-17  Dick Porter  <dick@ximian.com>

	* Thread.cs: Added the Start semaphore field to the class.  Update
	the thread state after Start() has returned, not before.

2003-02-13  Zoltan Varga  <vargaz@freemail.hu>

	* Thread.cs (Sleep): Timeout.Infinite is a value argument.

2003-02-11  Dick Porter  <dick@ximian.com>

	* Monitor.cs: Infinite wait is Infinite, not 0 ms

2003-02-10  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* Thread.cs: fixed bug #37759.

2003-02-07  Patrik Torstensson

	* Timer.cs: Set the Background thread flag for the timer thread

2003-02-05  Patrik Torstensson

	* ThreadPool.cs: Reformated and fixed issue that made all thread exit the pool. 

2003-02-04  Lluis Sanchez Gual <lluis@ideary.com>

	* ThreadPool.cs: Implemented RegisterWaitForSingleObject methods.

Tue Jan 28 17:55:59 CET 2003 Paolo Molaro <lupus@ximian.com>

	* Thread.cs: delay-init datastorehash.

2003-01-10  Patrik Torstensson  <totte@race-x-change.com>

	* ThreadPool.cs: Temporary removed the usage of monitor thread, implemented a 
                    model more equal to the MS one.

2002-12-10  Dick Porter  <dick@ximian.com>

	* Monitor.cs:
	* Thread.cs:
	* ThreadPool.cs:
	* Timer.cs:
	* WaitHandle.cs: Use TotalMilliseconds to convert a TimeSpan to
	ms, not Milliseconds.

2002-12-07  Martin Baulig  <martin@ximian.com>

	* Timer.cs: Make it actually work; now it no longer sets your
	application on fire if you use a zero periode and Timer.Change()
	actually works.

2002-11-11  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* Timer.cs: implemented more stuff. It works now.

2002-10-25  Zoltan Varga  <vargaz@freemail.hu>

	* Thread.cs: Implement GetDomain() and GetDomainID().

2002-10-24  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* ThreadPool.cs: now the monitor thread is not sleeping and checking if
	more worker threads needed. It waits on _DataInQueue. If (and only if)
	there's data in the queue it checks if more worker threads needed and
	then sleeps 0.5s before waiting for queued data again.

2002-09-28  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* ThreadPool.cs: set IsThreadPoolThread before starting the worker.

2002-09-11  Dick Porter  <dick@ximian.com>

	* Mutex.cs: 
	* ManualResetEvent.cs: 
	* AutoResetEvent.cs: Use the WaitHandle.Handle property instead of
	the private field

	* WaitHandle.cs: Hide the os_handle field and the WaitOne_internal
	method

2002-09-03  Dick Porter  <dick@ximian.com>

	* Thread.cs: Added thread ID field

2002-08-27  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WaitHandle.cs: IDisposable fixes.

2002-08-14  Dick Porter  <dick@ximian.com>

	* Thread.cs: Make CurrentUICulture act the same as CurrentCulture
	for now.

2002-08-12  Dietmar Maurer  <dietmar@ximian.com>

	* ThreadAbortException.cs: impl. ExceptionState property.

	* Thread.cs: moved all instance variables to the start of the
	class. added support for Thread::Abort()

2002-04-30  Dick Porter  <dick@ximian.com>

	* Thread.cs: If LocalDataStoreSlot already has data set, remove it
	before adding a new one.

	Use the Thread object destructor to tell the runtime to close the
	thread handle.

2002-04-14 Patrik Torstensson <patrik.torstensson@labs2.com>

	* Interlocked.cs: made all methods icalls.

2002-04-14  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* IOCompletionCallback.cs: added attributes to the delegate
	(CLSCompliant(false) and Serializable).

2002-04-14 Patrik Torstensson <patrik.torstensson@labs2.com>
	* Thread.cs: Fixed IsThreadPoolThread to use a internal property instead of extending 
				 the threadstate enum.
	* ThreadPool.cs: Now using the internal Isthreadpoolthread property
	* ThreadState.cs: removed non-standard enum (ThreadPoolThread)

2002-04-14 Patrik Torstensson <patrik.torstensson@labs2.com>

	* ThreadState.cs: Added enum for threadpool thread
	* Thread.cs: changed the set/clr_state to be internal (used from threadpool)
	* Thread.cs: Added IsThreadPoolThread
	* ThreadPool.cs: Implementation of QueueUserWorkItem

Wed Feb 13 21:51:30 CET 2002 Paolo Molaro <lupus@ximian.com>

	* Thread.cs: implement CurrentCulture property needed by
	Convert.ChangeType() (used when compiling enums).

2002-01-23  Dick Porter  <dick@ximian.com>

	* ManualResetEvent.cs: 
	* AutoResetEvent.cs: Fixed DOS line endings

2002-01-22  Veronica De Santis <veron78@interfree.it>   
        
	* NativeEventCalls : Class that contains internal calls shared by Auto 
	  		     and Manual Reset Events
	* AutoResetEvents.cs : Added class AutoResetEvents and its implementation
	* ManualResetEvents.cs : Added class ManualResetEvents and its implementation

2002-01-16  Veronica De Santis <veron78@interfree.it>   
        
	* WaitHandle.cs : Renamed handle to os_handle and make it protected
	                  instead of private.
	* Mutex.cs : Write the System.Threading.Mutex methods ( constructors 
	             and the ReleaseMutex)

2002-01-15  Dick Porter  <dick@ximian.com>

	* WaitHandle.cs:
	* Thread.cs: Make the runtime's idea of infinite timeouts coincide
	with the class library's

2002-01-10  Dick Porter  <dick@ximian.com>

	* WaitHandle.cs: Added checks for too many handles and null
	handles in WaitAll() and WaitAny
	

2002-01-05  Ravi Pratap  <ravi@ximian.com>

	* AutoResetEvent.cs, ManualResetEvent.cs, Monitor.cs : MonoTODO
	decoration.

	* Mutex.cs, Overlapped.cs, ReaderWriterLock.cs, RegisteredWaitHandle.cs,
	Thread.cs, ThreadAbortException.cs, ThreadPool.cs, Timer.cs, WaitHandler.cs : Ditto.

2001-12-11  Dick Porter  <dick@ximian.com>

	* WaitHandle.cs: Implemented WaitAll(), WaitAny() and WaitOne() as
	internal calls.

2001-11-26  Dick Porter  <dick@ximian.com>

	* Thread.cs: DataSlot uses a single system TLS slot, and a
	hashtable per thread.  Some minor changes to reflect the new
	internal calls using the new IO library, and the newly-supported
	bool returns from internal calls.

	* Monitor.cs: Use bool returns from internal calls now they are
	supported by the runtime.  Coalesce enter with the try_enter
	internal call.

Wed Nov 14 17:06:18 CET 2001 Paolo Molaro <lupus@ximian.com>

	* Overlapped.cs, ThreadPool.cs, Timer.cs: CLSCompliant updates.

2001-10-03  Dick Porter  <dick@ximian.com>

	* Monitor.cs: Implemented all methods except the two Wait()
	methods that take boolean parameters

2001-09-28  Dick Porter  <dick@ximian.com>

	* Thread.cs: Implemented AllocateDataSlot(),
	AllocateNamedDataSlot(), FreeNamedDataSlot(), GetData(),
	GetNamedDataSlot(), SetData(), IsBackground.  Reworked Thread()
	and Start() to avoid a race condition. Added thread-safe state
	changing private operations.

	* Monitor.cs: Comment out the GetType() calls because it isn't implemented yet

2001-09-25  Dick Porter  <dick@ximian.com>

	* Thread.cs: Implement Join and timed Join, set correct state
	around Start, Join and Sleep calls, implement IsAlive and
	ThreadState properties.

	* ThreadState.cs (Threading): Added StopRequested,
	SuspendRequested, Suspended values

2001-09-23  Dick Porter  <dick@ximian.com>

	* Thread.cs: Implemented CurrentThread and Sleep (both versions)
	with internal calls, and Name.

2001-09-21  Dick Porter  <dick@ximian.com>

	* Thread.cs: Implement Thread(ThreadStart) constructor and Start()
	with an internal call

	* WaitHandle.cs: Close calls Dispose(false)

2001-09-13  Dick Porter  <dick@ximian.com>

	* ApartmentState.cs (Threading): Set the correct enum values

2001-09-13  Dick Porter  <dick@ximian.com>

	* ApartmentState.cs, AutoResetEvent.cs, IOCompletionCallback.cs,
	Interlocked.cs, LockCookie.cs, ManualResetEvent.cs, Monitor.cs,
	Mutex.cs, NativeOverlapped.cs, Overlapped.cs, ReaderWriterLock.cs,
	RegisteredWaitHandle.cs, SynchronizationLockException.cs,
	Thread.cs, ThreadAbortException.cs, ThreadInterruptedException.cs,
	ThreadPool.cs, ThreadStart.cs, ThreadStateException.cs,
	Timeout.cs, Timer.cs, TimerCallback.cs, WaitCallback.cs,
	WaitHandle.cs, WaitOrTimerCallback.cs: System.Threading class
	stubs.
	
2001-07-18  Michael Lambert <michaellambert@email.com>

	* ThreadPriority.cs, ThreadState.cs: Add.
