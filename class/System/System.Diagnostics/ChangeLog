2004-09-06  Dick Porter  <dick@ximian.com>

	* Process.cs: Make Dispose() actually dispose things.

2004-06-24  Atsushi Enomoto  <atsushi@ximian.com>

	* Process.cs : quick fix for UseShellExecute=false on windows. See
	  the code comment.

2004-06-17  Lluis Sanchez Gual  <lluis@ximian.com>

	* Process.cs: Added missing check in HasExited property.

2004-05-20  Gert Driesen (drieseng@users.sourceforge.net)

	* EventLogPermissionAttribute.cs:
	* PerformanceCounterPermissionAttribute.cs: adjust AllowMultiple
	and Inherited to match .NET

2004-05-19  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* Process.cs: separate the command and the arguments when calling
	Start_internal.

2004-05-19  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* Process.cs: redirecting I/O is not permitted if UseShellExecute is
	true. Also throw if FileName is null.

2004-04-06  Lluis Sanchez Gual  <lluis@ximian.com>

	* DiagnosticsConfigurationHandler.cs: If initializeData is provided,
	use the constructor that only takes one string as parameter to
	construct the listener. The name is set using the Name property, not the
	constructor.
	
	* TextWriterTraceListener.cs: In Write*, do nothing if no writer was 
	provided.

2004-03-25  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* Process.cs: use the ISynchronizeInvoke object to invoke the event.
	Implemented Close, CloseMainWindow and Kill.

2004-03-23 Ben Maurer  <bmaurer@users.sourceforge.net>

	* Switch.cs: Don't throw when there is no switches section.

2004-03-22  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* Process.cs: support EnableRaisingEvents + Exited event.

2004-03-15  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* Process.cs: patch by Gert Driesen that fixes WaitForExit when the
	timeout is int.MaxValue.

2004-03-15  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* Process.cs: added environment variables setting support and also
	send useShellExecute to the runtime.

	* ProcessStartInfo.cs: support EnvironmentVariables.  MS uses
	StringDictionary, which turns keys into lowercase. We don't do that.

2004-02-22  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* Process.cs: ExitCode and ExitTime check that the process is finished.

2003-12-10  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* Process.cs: if there's an error when starting the process, the 'pid'
	field contains the GetLastError code. Use that for the Win32Exception.

2003-12-06  Martin Baulig  <martin@ximian.com>

	* DefaultTraceListener: Don't use `where' in variable names.

2003-11-13  Andreas Nahr <ClassDevelopment@A-SoftTech.com>

	* ICollectData.cs: Fixed signature

2003-11-12  Andreas Nahr <ClassDevelopment@A-SoftTech.com>

	* ICollectData.cs: Added missing attribute

2003-07-27  Andreas Nahr <ClassDevelopment@A-SoftTech.com>

	* SRDescriptionAttribute.cs: Moved to System directory

2003-07-21  Andreas Nahr <ClassDevelopment@A-SoftTech.com>

	* EventLog.cs: Implementation handling
	* EventLogImpl.cs: Added, contains an platform independent empty implementation
	for EventLog

2003-07-18  Andreas Nahr <ClassDevelopment@A-SoftTech.com>

	* AlphabeticalEnumConverter.cs: Added
	* EventLogEntry.cs: Implemented
	* EventLogPermissionEntryCollection.cs: Fixed signature and implementation of indexer
	* EventLogTraceListener.cs: Fixed signature
	* PerformanceCounter.cs: Added missing attribute
	* PerformanceCounterType.cs: Added missing attribute
	* SRDescriptionAttribute.cs: Added and implemented

2003-07-17  Andreas Nahr <ClassDevelopment@A-SoftTech.com>

	* CounterCreationData.cs:
	* EventLog.cs:
	* EventLogEntry.cs:
	* PerformanceCounter.cs:
	* Process.cs:
	* ProcessModule.cs:
	* ProcessStartInfo.cs:
	* ProcessThread.cs: Reworked attributes based on the new Consts scheme

2003-07-14  Andreas Nahr <ClassDevelopment@A-SoftTech.com>

	* PerformanceCounterCategory.cs: Fixed signatures

2003-07-13  Andreas Nahr <ClassDevelopment@A-SoftTech.com>

	* PerformanceCounter.cs: Implemented or implementation added

2003-07-13  Andreas Nahr <ClassDevelopment@A-SoftTech.com>

	* DiagnosticsConfigurationHandler.cs: Removed a never used variable
	* EventLog.cs: Small update to prevent a warning
	* EventLogPermission.cs: Implemented or implementation added
	* EventLogPermissionAttribute.cs: Implemented or implementation added
	* EventLogPermissionEntry.cs: Implemented or implementation added
	* EventLogPermissionEntryCollection.cs: Implemented or implementation added
	* EventLogTraceListener.cs: Implemented or implementation added
	* PerformanceCounterManager.cs: Implemented or implementation added
	* PerformanceCounterInstaller.cs: Made internal
	* PerformanceCounterCategory.cs: Implemented few members
	* PerformanceCounterPermission.cs: Implemented or implementation added
	* PerformanceCounterPermissionAttribute.cs: Implemented or implementation added
	* PerformanceCounterPermissionEntry.cs: Implemented or implementation added
	* PerformanceCounterPermissionEntryCollection.cs: Implemented or implementation added
	
2003-07-07  Andreas Nahr <ClassDevelopment@A-SoftTech.com>

	* EventLog.cs: Removed unneccesary attribute according to corecompare
	* EventLogEntry.cs: Removed unneccesary attribute according to corecompare
	* Process.cs: Removed unneccesary attributes according to corecompare, added attribute
	* ProcessModule.cs: Removed unneccesary attribute according to corecompare
	* ProcessStartInfo.cs: Removed unneccesary attribute according to corecompare
	* ProcessThread.cs: Removed unneccesary attribute according to corecompare, fixed signature

2003-07-05  Andreas Nahr <ClassDevelopment@A-SoftTech.com>

	* InstanceDataCollectionCollection.cs: Corrected wrong signature
	* EventLog.cs: Missing attributes added, redirected some class members
	* EventLogEntry.cs: Missing attributes added
	* EventLogInstaller.cs: Made internal
	
2003-07-02  Andreas Nahr <ClassDevelopment@A-SoftTech.com>

	* CounterCreationData.cs: Added missing attributes
	* CounterSample.cs: Implemented missing rest, fixed signature
	* CounterSampleCalculator.cs: Added private constructor, redirected function
	* Process.cs: Added attributes, added event mechanism
	* ProcessModule.cs: Added missing attributes
	* ProcessModuleCollection.cs: Redone using the already inherited-from ArrayList. Simplifies this a LOT
	* ProcessStartInfo.cs: Added missing attributes, moved internal fields to the begining of the file, restyling
	* ProcessThread.cs: Added missing attributes, added pseudo constructor
	* ProcessThreadCollection.cs: Implemented
	* PerformanceCounterPermission.cs: Fixed typo in class name
	* PerformanceCounterPermissionAccess.cs: Added attributes, fixed wrong member
	
2003-03-19  Dick Porter  <dick@ximian.com>

	* Process.cs: Implement HasExited, fixes bug 39267

2003-03-13  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* Process.cs: throw an exception when the executable cannot be found.

2002-12-20  Jonathan Pryor <jonpryor@vt.edu>
	* DiagnosticsConfigurationHandler.cs: 
	  - Don't assume that optional attributes are always present
	  - <assert/> can't have any child nodes
	  - Change in semantics: if the attribute isn't present,
	    GetAttribute() returns null, not "".  This allows us to
	    differentiate between an attribute not being present and an
	    attribute with an empty value.
	  - Translate exceptions if a TraceListener type is invalid

2002-12-19  Jonathan Pryor <jonpryor@vt.edu>
	* TraceListenerCollection.cs: IndentLevel and IndentSize shouldn't be 
	  hardcoded; they should be set to whatever TraceImpl is using (which
	  in turn may have been set by the .config file, so we should get the
	  user-specified values in added listeners).
	* TraceListener.cs: Make sure that indents are initially written.  This 
	  allows code that uses Trace.Indent() before a Trace.WriteLine() to be 
	  indented properly.
	* TraceImpl.cs: provide a static constructor to explicitly specify the
	  ordering of initialization, in particular the ordering of
	  TraceImpl.Listeners and the reading of the .config file (by
	  accessing DiagnosticsConfiguration.Settings).  This (hopefully)
	  ensures that the Listeners collection is initialized before the
	  .config file is read in, as the DiagnosticsConfigurationHandler will
	  directly modify the listeners collection.
	  The DiagnosticsConfigurationHandler assumes this so that it can
	  <add/> and <remove/> trace listeners and set the logfile for the
	  DefaultTraceListener.


2002-12-18  Jonathan Pryor <jonpryor@vt.edu>
	* BooleanSwitch.cs: Complete re-write.  It works now.
	* DefaultTraceListener.cs:
	  - Use `const' strings, so I don't worry about copy/paste errors
	  - Give `AssertUiEnabled' an actual backing member
	* DiagnosticsConfigurationHandler.cs: To avoid race conditions, let the
	  configuration handler set .config-specified properties on
	  DefaultTraceListener (AssertUiEnabled, LogFileName) and TraceImpl
	  (AutoFlush, IndentSize).
	* Switch.cs: Near complete re-write.  Actually works, and is (should be)
	  comformant with .NET behavior.  Changed member names because they
	  were confusing me.  (Yes, that doesn't say much about my memory.)
	* TextWriterTraceListener.cs: Append text to already existing files,
	  don't overwrite them.
	* TraceImpl.cs:
	  - Added private destructor, to ensure no instances are created.
	  - Move members declarations to be closer to each other.
	* TraceSwitch.cs: Complete re-write.  It works now.

2002-12-17  Jonathan Pryor <jonpryor@vt.edu>
	* DiagnosticsConfigurationHandler.cs: Implement so that .config files
	support <system.diagnostics> sections.

2002-12-15  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* DefaultTraceListener.cs: now OutputDebugStringW is called from an
	internal call (update your runtime!). No more warnings in linux.

2002-10-31  Dick Porter  <dick@ximian.com>

	* Process.cs: MonoIO methods now have an error parameter

2002-10-26  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* DefaultTraceListener.cs: changed OutputDebugString to
	OutputDebugStringW (no more warnings under windows). Also a few style
	fixes.

2002-10-23  Dick Porter  <dick@ximian.com>

	* Process.cs: Redirected standard input needs to have AutoFlush set

2002-09-27  Dick Porter  <dick@ximian.com>

	* Process.cs: Implemented {get_,set_}{Min,Max}WorkingSet,
	ProcessName, GetProcessById, GetProcesses, GetProcessesByName.
	Pass the working directory to Start.  Pass the program and args in
	one string to be used with the second arg of CreateProcess, so it
	will search the path.

2002-09-19  Nick Drochak <ndrochak@gol.com>

	* TraceImpl.cs: Remove debug prints

2002-09-19  Nick Drochak <ndrochak@gol.com>

	* TraceListenerCollection.cs: Set Indet level and size to default 
	values.  The values from TraceImpl might have been changed.

2002-08-28  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* Process.cs:
	* TextWriterTraceListener.cs: IDisposable fixes.

2002-08-23  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* Process.cs: class status based fixes.

2002-07-20  Dick Porter  <dick@ximian.com>

	* Process.cs: Implement file handle redirection

2002-07-13  Jonathan Pryor <jonpryor@vt.edu>
	* CounterCreationData.cs: Implemented
	* CounterCreationDataCollection.cs: Implemented
	* CounterSample.cs: Stubbed Out
	* CounterSampleCalculator.cs: Stubbed Out
	* InstanceData.cs: Implemented
	* InstanceDataCollection.cs: Implemented
	* InstanceDataCollectionCollection.cs: Implemented
	* MonitoringDescriptionAttribute.cs: Implemented
	* PerformanceCounter.cs: Stubbed Out
	* PerformanceCounterCategory.cs: Stubbed Out
	* PerformanceCounterInstaller.cs: Stubbed Out
	* PerformanceCounterManager.cs: Stubbed Out
	* PerformanceCounterPermission.cs: Stubbed Out
	* PerformanceCounterPermissionAccess.cs: Implemented
	* PerformanceCounterPermissionAttribute.cs: Stubbed Out
	* PerformanceCounterPermissionEntry.cs: Stubbed Out
	* PerformanceCounterPermissionEntryCollection.cs: Implemented
	* PerformanceCounterType.cs: Implemented


2002-06-25  Dick Porter  <dick@ximian.com>

	* Process.cs: Process forking and waiting, and some support functions

	* ProcessStartInfo.cs: Implemented the bits needed for basic
	Process forking

	* ProcessModule.cs: Implemented

	* ProcessModuleCollection.cs: Mostly implemented

	* FileVersionInfo.cs: Implemented

2002-06-16  Jonathan Pryor <jonpryor@vt.edu>
	* ICollectData.cs: Implemented
	* TraceImpl.cs: Setting IndentLevel, IndentSize should change the
		corresponding properties on all current TraceListeners.
		Also, to answer the FIXME message: Yes, the properties in TraceListener
		need to be [ThreadStatic] as well.
	* TraceListenerCollection.cs: When adding a TraceListener, the TraceListener
		should have its properties set to the current TraceImpl property values.
	* TraceListener.cs: Make indentSize, lndentLevel [ThreadStatic].

2002-06-09  Jonathan Pryor <jonpryor@vt.edu>
	* EntryWrittenEventArgs.cs: Implemented
	* EntryWrittenEventHandler.cs: Implemented
	* EventLog.cs: Stubbed out
	* EventLogEntry.cs: Stubbed out
	* EventLogEntryCOllection.cs: Implemented.
	* EventLogEntryType.cs: Implemented
	* EventLogInstaller.cs: Stubbed out
	* EventLogPermission.cs: Stubbed out
	* EventLogPermissionAccess.cs: Implemented
	* EventLogPermissionAttribute.cs: Stubbed out
	* EventLogPermissionEntry.cs: Stubbed out
	* EventLogPermissionEntryCollection.cs: Stubbed out
	* EventLogTraceListener.cs: Stubbed out

2002-05-29  Jonathan Pryor <jonpryor@vt.edu>
  * DefaultTraceListener.cs: Implemented MONO_TRACE support

2002-05-27  Jonathan Pryor <jonpryor@vt.edu>
  * Moved public API documentation for the following files to the
    /mcs/docs/apidocs/xml/en/System.Diagnostics directory:
    - Debug.cs
    - DefaultTraceListener.cs
    - DiagnosticsConfigurationHandler.cs
    - Switch.cs
    - TextWriterTraceListener.cs
    - Trace.cs
    - TraceLevel.cs
    - TraceListener.cs
    - TraceListenerCollection.cs
    - TraceSwitch.cs

2002-04-10  Jonathan Pryor <jonpryor@vt.edu>

	* TraceListenerCollection.cs: Corrected indexer property to provide the
		correct return value and implement the IList indexer property correctly.

2002-04-07  Jonathan Pryor <jonpryor@vt.edu>

	* TraceListener.cs: Fix stack overflow bug
	* DefaultTraceListener.cs: Implement log file support

2002-04-04  Dick Porter  <dick@ximian.com>

	* ThreadWaitReason.cs:
	* ThreadState.cs:
	* ThreadPriorityLevel.cs:
	* ProcessWindowStyle.cs:
	* ProcessThreadCollection.cs
	* ProcessThread.cs:
	* ProcessStartInfo.cs:
	* ProcessModuleCollection.cs: Stub out more classes needed for Process

2002-03-31  Dick Porter  <dick@ximian.com>

	* Process.cs: 
	* ProcessPriorityClass.cs: 
	* ProcessModule.cs: 
	* FileVersionInfo.cs: Stub out classes needed for Process

2002-03-08  Jonathan Pryor <jonpryor@vt.edu>

	* Debug.cs: Clean up (lots of code can be shared with Trace.cs, which 
		is why TraceImpl.cs is introduced), "DEBUG" conditional support
	* TraceListener.cs: Proper implementation of Dispose pattern;
		implementatino of non-abstract methods in terms of abstract methods
	* TraceListenerCollection.cs: check 'object' types before adding
	* TextWriterTraceListener.cs: properly implement Dispose pattern;
		handle NeedIndent and WriteIndent
	* Trace.cs: new file; provides Trace functionality, "TRACE" conditional
		support
	* DefaultTraceListener.cs: new file; the default trace listener

2002-01-17  Miguel de Icaza  <miguel@ximian.com>
	* TraceListenerCollection.cs: Remove Warnings.

2002-01-06  Ravi Pratap  <ravi@ximian.com>
	* Switch.cs, TraceListenerCollection.cs : Decorate incomplete bits
	with the MonoTODO attribute.

2002-01-04  John R. Hicks <angryjohn69@nc.rr.com>
	* Added Debug.cs to the build.

2002-01-04  John R. Hicks <angryjohn69@nc.rr.com>
	* Added preliminary TraceListenerCollection.cs to the build.

2002-01-04  John R. Hicks <angryjohn69@nc.rr.com>
	* Added TraceListener.cs, TextWriterTraceListener.cs, and
	DefaultTraceListener.cs to the build and moved them into the
	proper assembly.

2002-01-04  John R. Hicks <angryjohn69@nc.rr.com>
	* Added DiagnosticsConfigurationHandler.cs to the build.

2001-09-09  Nick Drochak <ndrochak@gol.com>
	* BooleanSwitch.cs: Make this class use it's parent class's features.  Namely, use SwitchSetting
	so that we can get OnSwitchSettingChanged() to fire for free.

2001-09-09  Nick Drochak <ndrochak@gol.com>
	* ChangeLog: added this file
	* Switch.cs: call OnSwitchSettingChanged() when the switch setting is, yes you gessed it, changed.	
