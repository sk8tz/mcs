2003-01-10  Jonathan Pryor <jonpryor@vt.edu>
	* TypeReflectorApp.cs: Don't always require that types be specified on the
	  command line.  This isn't necessary for the GUI front-ends, as the user
		can just open an assembly from within the app after it's running.
	* IndentingTextWriter.cs: Move to Mono.TypeReflector.Displayers.

2003-01-10  Jonathan Pryor <jonpryor@vt.edu>
	- General: Namespace partitioning.  It was getting annoying (when using
	  type-reflector to display itself) to have ~70 classes in a single
	  namespace.  So I split up the classes into namespace according to
	  function.  For example, Finders (ExplicitNodeFinder, ReflectionNodeFinder) 
	  went into Mono.TypeReflector.Finders.
	* CSharpNodeFormatter.cs: Moved into Mono.TypeReflector.Formatters.
	* ConsoleTypeDisplayer.cs: Moved into Mono.TypeReflector.Displayers.
	* DefaultNodeFormatter.cs: Moved into Mono.TypeReflector.Formatters.
	* ExplicitNodeFormatter.cs: Moved into Mono.TypeReflector.Formatters.
	* Factories.cs: Reference the appropriate namespaces.
	* GroupingNodeFinder.cs: Moved into Mono.TypeReflector.Finders.
	* INodeFinder.cs: Moved into Mono.TypeReflector.Finders.
	* INodeFormatter.cs: Moved into Mono.TypeReflector.Formatters.
	* ITypeDisplayer.cs: Moved into Mono.TypeReflector.Displayers.
	* LanguageNodeFormatter.cs: Moved into Mono.TypeReflector.Formatters.
	* Node.cs: Reference the appropriate namespaces.
	* NodeFinder.cs: Moved into Mono.TypeReflector.Finders.
	* NodeFormatter.cs: Moved into Mono.TypeReflector.Formatters.
	* NodeGrouper.cs: Moved into Mono.TypeReflector.Finders.
	* ReflectionNodeFinder.cs: Moved into Mono.TypeReflector.Finders.
	* TypeDisplayer.cs: Moved into Mono.TypeReflector.Displayers.
	* TypeReflectorApp.cs: Reference the appropriate namespaces.
	* VBNodeFormatter.cs: Moved into Mono.TypeReflector.Formatters.
	* type-refelctor.exe.config: Update type names.

2003-01-09  Jonathan Pryor <jonpryor@vt.edu>
  - General: Do the most hackish thing I've ever thought of.  OK, perhaps not
    the *most*, but it must be up there...
  - Problem: type-reflector supports multiple GUI toolkits.  However, I don't
    want to require the existance of any one of them to compile.  Because of
    this, the default has been to support only console output.  Nothing else
    was supported by the default build.
  - Solution: Try to build everything.  Literally.  Due to the wonders of the
    shell's || operator, if one build fails we can provide another build as a
    backup.  This boils down to doing the following:

      make gui-all || make gtk || make swf || make console

    The "make console" is to ensure that, at the very least, console-support
    is built-in.  If no GUI toolkit is available, we'll at least have
    something.
  - Good news: this works, and will support as many toolkits as the build
    platform supports.
  - Bad news: It may invoke several compilations.  For example, my Windows box
    doesn't have Gtk# support, so "gui-all" and "gtk" both fail before "swf"
    successfully compiles.  That's two failed compilation efforts, resulting
    in additional overhead.
  * Makefile: provide a MAKEFILE variable so that makefile.core can invoke the
    correct top-level makefile for its sub-makes (see description above)
  * makefile.core:
    - "all" invokes the "gui" target, not "console".  "gui", in turn, 
      carries out the process described above.  It isn't pretty.
    - removed support for "linux" target.  This hasn't been used for awhile.
  * makefile.gnu: provide a MAKEFILE variable so that makefile.core can invoke 
    the correct top-level makefile for its sub-makes (see description above)

2003-01-09  Jonathan Pryor <jonpryor@vt.edu>
	* TypeReflectorApp.cs: Remove hard-coded factory initialization and #ifdef
	  preprocessor use.  Factory information is located in
	  type-reflector.exe.config now.  This removes dependence on the
	  preprocessor, simplifies addition of new formatters/etc.  (For example, if
	  you want to add a new formatter, you can just edit
	  type-reflector.exe.config with the appropriate type.)
	* makefile.core: 
	  - Remove -d:SYMBOL compiler arguments for GUI support
	  - Due to above, we can simplify GUI targets to use $(CSC_INVOKE).  (I
	    would have done this before, but bug 36410 prevented this from working.)
	* type-reflector.exe.config: Provide new sections to specify the displayers,
	  finders, and formatters that can be used.

2003-01-08  Jonathan Pryor <jonpryor@vt.edu>
	* AssemblyInfo.cs: New; Assembly Information (version, etc.)
	* DefaultNodeFormatter.cs: Use AddMethodReturnValue to invoke methods
	* ITypeDisplayer.cs: Provide a way to display error messages
	* LanguageNodeFormatter.cs: Use AddMethodReturnValue to invoke methods
	* Makefile: Since I need to use csc.exe to compile System.Windows.Forms
	  support, I need a way to use directory separators in a (reasonably)
		portable fashion.  Hennce the DS (Directory Separator) variable, which
		holds the directory separator of the current platform.  Set it to
		backslash for Windows.
	* NodeFormatter.cs: 
	  - Provide an option to enable/disable invoking methods.  See README for a 
	    short discussion of why this is needed.  (Search for [1].)
	  - Minor formatting changes.
	  - Add AddMethodReturnValue() function.  This is used by derived classes,
	    instead of directly invoking a method, if invocation is permitted.
	* README: Updates.
	* TypeDisplayer.cs: 
	  - Check for a null namespace.  This apparently can happen under .NET.  
	    I'm not sure why, but handle it.
	  - Provide default implementation of ITypeDisplayer.ShowError().
	* TypeFactory.cs: Remove Console messages, clean formatting.
	* TypeReflectorApp.cs: 
	  - There's > 1 factory now.  Change names so it makes more sense.
	  - Add "swf" displayer. 
	  - Use ITypeDisplayer.ShowError() for errors
	  - Handle new program options for formatter objects
	* TypeReflectorOptions.cs: Add option to enable method invocation.  Clean up
	  formatting.
	* makefile.core:
	  - Add "swf" target for System.Windows.Forms display:
	  - csc.exe wants ".dll" appended to referenced assemblies.  Add this.
	  - csc.exe wants a colon, not a space, after -r.  Fix.
	  - Add new files (AssemblyInfo.cs, swf/*.cs)
	  - Use $(DS) where appropriate.
	* makefile.gnu: Add $(DS) variable
	* type-reflector.exe.config: Comment out default listeners, enable
	  type-factory messages by default.

2003-01-02  Jonathan Pryor <jonpryor@vt.edu>
	* NodeFormatter.cs: Change formatting of error message.
	* NodeInfo.cs: Nested types are MemberTypes.NestedType; set as
	  NodeTypes.Type so we don't get error messages under .NET.

2002-12-31  Jonathan Pryor <jonpryor@vt.edu>
	* ConsoleTypeDisplayer.cs: New; Display reflection information to the console
	* CSharpNodeFormatter.cs: Most formatting information was moved to
	  LanguageNodeFormatter.cs (to permit sharing with the VBNodeFormatter)
	* ExplicitNodeFinder.cs: Updates due to NodeFinder changes.
	* Factories.cs: Add new "Displayer" factory, remove "Factory" from name of
	  factory objects; the fact they're in a "Factories" class should be
		sufficient.
	* IndentingTextWriter.cs: Ensure that if a string sent to Write or WriteLine
	  contains embedded newlines, that we indent the text after the newlines
		appropriately.
	* ITypeDisplayer.cs: New; Abstraction for displaying reflection information
	* LanguageNodeFormatter.cs: Massive cleanup & Consolidation of features.
	  Now works as a control class for generating Language-like output,
		simplifying C# and VB.NET language formatting.
	* Makefile: Most contents moved to `makefile.core'; just sets variables and
	  forwards operation to `makefile.core'.
	* Node.cs: Debugging ToString() implementation
	* NodeFinder.cs: Change virtual Get* methods to Add* methods, as
	  they're supposed to Add stuff to the Collection object passed as the first
		paramter, not actually return ("get") anything; Removed `maxDepth', as
		it's not used in the NodeFinder.
	* NodeFormatter.cs: Move language-like attribute formatting to
	  LanguageNodeFormatter; check that base type isn't null before accessing
		its name; recent CVS snapshots have the base object of interfaces as the
		null object (before it was System.Object); this may be a mono bug.
	* NodeInfo.cs: Debugging ToString() implementation
	* ProgramOptions.cs: Make classes public, not internal
	* README: Updates
	* ReflectionNodeFinder.cs: Updates due to NodeFinder changes.
	* TestTypes.cs: More tests
	* TypeDisplayer.cs: New; Helper implementation for ITypeDisplayer
	* TypeFactory.cs: Trace/log the exception generated when creating a new
	  object
	* TypeLoader.cs: Take a list of types to search for, not just a single type.
	  This simplifies looking for types, as we can do a single search for all
		types, instead of separate searches for each type.  Also improves
		performance.
	* TypeReflectorApp.cs: New; Formerly ConsoleOutput.cs; sets things in motion
	* TypeReflectorOptions.cs: Make public; Add --displayer argument
	* VBNodeFormatter.cs: New; Displayer reflection information in VB.NET
	* gtk: new directory for Gtk# front-end
	* makefile.core: New; Common makefile rules shared between Makefile,
	  makefile.gnu
	* makefile.gnu: New; makefile used on Linux, used by tools/makefile.gnu for
	  recursive makes.
	* type-reflector.exe.config: Add new switch, sample listener

2002-12-21  Jonathan Pryor <jonpryor@vt.edu>
	* ConsoleOutput.cs: Use a Switch for trace messages.
	* ExplicitNodeFinder.cs: Use a Switch for trace messages.
	* GroupingNodeFinder.cs: Use a Switch for trace messages.
	* IndentingTextWriter.cs: Use a Switch for trace messages; remove copyright
	  statement.
	* NodeFinder.cs: Use a Switch for trace messages.
	* TypeLoader.cs: Use a Switch for trace messages; remove copyright
	  statement.
	* type-reflector.exe.config: default .config file (disable all trace
	  messages)

2002-12-10  Jonathan Pryor <jonpryor@vt.edu>
	* TestTypes.cs: Use a different attribute type for [return:] attribute on 
		TestClass.PublicMethod, as mcs doesn't support [return:] attributes yet
		and it was generating an error for the two "MyAttribute" attributes.

2002-12-08  Jonathan Pryor <jonpryor@vt.edu>
	* DESIGN: Read this to understand the new design that was implemented.
	* ConsoleOutput.cs: Deal with "new world order" of Node objects
	* Makefile: minor cleanup
	* TestTypes.cs: additional tests
	* TypeReflectorOptions.cs: new options
	* CSharpTypeDisplayer.cs: removed
	* ExplicitTypeDisplayer.cs: removed
	* IndentingTypeDisplayer.cs: removed
	* ReflectionTypeDisplayer.cs: removed
	* TypeDisplayer.cs: removed
	* TypeDisplayerFactory.cs: removed
	* CSharpNodeFormatter.cs: new file
	* DefaultNodeFormatter.cs: new file
	* ExplicitNodeFinder.cs: new file
	* Factories.cs: new file
	* GroupingNodeFinder.cs: new file
	* INodeFinder.cs: new file
	* INodeFormatter.cs: new file
	* LICENSE: new file
	* LanguageNodeFormatter.cs: new file
	* Node.cs: new file
	* NodeFinder.cs: new file
	* NodeFormatter.cs: new file
	* NodeGrouper.cs: new file
	* NodeInfo.cs: new file
	* NodeTypes.cs: new file
	* ReflectionNodeFinder.cs: new file
	* TypeFactory.cs: new file

2002-09-04  Jonathan Pryor <jonpryor@vt.edu>
	* CSharpTypeDisplayer.cs: Better attribute output
	* TestTypes.cs: Improve test cases

2002-09-03  Jonathan Pryor <jonpryor@vt.edu>
	* ChangeLog: Added
	* ConsoleOutput.cs: s/parse/display; makes more sense
	* ExplicitTypeDisplayer.cs: Add additional output
	* IndentingTextWriter.cs: Allow indenting to be specified
	* ProgramOptions.cs: Allow more space for program options in output
	* ReflectionTypeDisplayer.cs: Formatting changes
	* TypeDisplayer.cs: Trivial formatting changes
	* TypeReflectorOptions.cs: Re-enable program option, formatting changes

